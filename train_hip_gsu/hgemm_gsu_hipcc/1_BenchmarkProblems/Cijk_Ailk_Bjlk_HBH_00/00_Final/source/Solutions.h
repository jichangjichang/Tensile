/*******************************************************************************
* Copyright (C) 2016-2020 Advanced Micro Devices, Inc. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
* ies of the Software, and to permit persons to whom the Software is furnished
* to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
* PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
* CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

/**************************************************
* This file was generated by Tensile:             *
* https://github.com/ROCmSoftwarePlatform/Tensile *
**************************************************/


#include "TensileTypes.h"
#include "SolutionHelper.h"
#include "Tools.h"
#include <unistd.h>
#include "Kernels.h"

// solution pointer
typedef TensileStatus (*TensileSolutionPointer_Cijk_Ailk_Bjlk_HBH)(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1L,
    unsigned int strideA2K,
    unsigned int strideB1L,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent,
    float * workspace);


TensileStatus Cijk_Ailk_Bjlk_HBH_MT64x1x64_SE_WGM1(
    SolutionLock * solutionLock = nullptr,
    TensileHalf * dataD = nullptr,
    const TensileHalf * dataC = nullptr,
    const TensileHalf * dataA = nullptr,
    const TensileHalf * dataB = nullptr,
    TensileHalf alpha = TensileHalf(),
    TensileHalf beta = TensileHalf(),
    unsigned int strideD1J = 0,
    unsigned int strideD2K = 0,
    unsigned int strideC1J = 0,
    unsigned int strideC2K = 0,
    unsigned int strideA1L = 0,
    unsigned int strideA2K = 0,
    unsigned int strideB1L = 0,
    unsigned int strideB2K = 0,
    unsigned int sizeI = 0,
    unsigned int sizeJ = 0,
    unsigned int sizeK = 0,
    unsigned int sizeL = 0,
    hipStream_t stream = nullptr,
    unsigned int numInputEvents = 0,
    hipEvent_t * inputEvents = nullptr,
    hipEvent_t * outputEvent = nullptr,
    float * workspace = nullptr);


TensileStatus Cijk_Ailk_Bjlk_HBH_MT64x1x64_SE_WGM4(
    SolutionLock * solutionLock = nullptr,
    TensileHalf * dataD = nullptr,
    const TensileHalf * dataC = nullptr,
    const TensileHalf * dataA = nullptr,
    const TensileHalf * dataB = nullptr,
    TensileHalf alpha = TensileHalf(),
    TensileHalf beta = TensileHalf(),
    unsigned int strideD1J = 0,
    unsigned int strideD2K = 0,
    unsigned int strideC1J = 0,
    unsigned int strideC2K = 0,
    unsigned int strideA1L = 0,
    unsigned int strideA2K = 0,
    unsigned int strideB1L = 0,
    unsigned int strideB2K = 0,
    unsigned int sizeI = 0,
    unsigned int sizeJ = 0,
    unsigned int sizeK = 0,
    unsigned int sizeL = 0,
    hipStream_t stream = nullptr,
    unsigned int numInputEvents = 0,
    hipEvent_t * inputEvents = nullptr,
    hipEvent_t * outputEvent = nullptr,
    float * workspace = nullptr);


