/*******************************************************************************
* Copyright (C) 2016-2020 Advanced Micro Devices, Inc. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
* ies of the Software, and to permit persons to whom the Software is furnished
* to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
* PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
* CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

/**************************************************
* This file was generated by Tensile:             *
* https://github.com/ROCmSoftwarePlatform/Tensile *
**************************************************/


#include "Kernels.h"


  /******************************************/
  /* Function Prefix                        */
  /******************************************/



/* tile parameters */
#define NUM_THREADS  64
#define SG0I 64
#define SG1J 1
#define TT0I 1
#define TT1J 1
#define MT0I (SG0I*TT0I)
#define MT1J (SG1J*TT1J)
#define VECTOR_WIDTH 1
#define GLOBAL_LOAD_VECTOR_WIDTH_A 1
#define GLOBAL_LOAD_VECTOR_WIDTH_B 1
#define GLOBAL_WRITE_VECTOR_WIDTH 1

/* DepthU parameters*/
#define CPSV (NUM_THREADS / MT0I * VECTOR_WIDTH)
#define LOCAL_SPLITU 1
#define UNROLL 64
#define LOCAL_DEPTHU (LOCAL_SPLITU*UNROLL)
#define GLOBAL_SPLITU 3

/* other */
#define PAD 0
#define WORK_GROUP_MAPPING 1

/* num loads parallel and perpendicular to coalesced */
#define NLCA 1
#define NLCB 1
#define NLPA 64
#define NLPB 1

/* load sizes parallel and perpendicular to coalesced */
#define LSCA (MT0I/NLCA)
#define LSPA (LOCAL_DEPTHU/NLPA)
#define LSCB (MT1J/NLCB)
#define LSPB (LOCAL_DEPTHU/NLPB)
#define LVCA (LSCA/GLOBAL_LOAD_VECTOR_WIDTH_A)
#define LVCB (LSCB/GLOBAL_LOAD_VECTOR_WIDTH_B)
#define LVPA (LSPA/GLOBAL_LOAD_VECTOR_WIDTH_A)
#define LVPB (LSPB/GLOBAL_LOAD_VECTOR_WIDTH_B)
#define LDS_OFFSET_B 4096
#define LDS_NUM_ELEMENTS 12352
#define LDS_OFFSET_BLK 8192

/* global memory indices */
#define GLOBAL_D(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideD0I + (IDX1J)*strideD1J + (IDXK)*strideDK ))
#define GLOBAL_C(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideC0I + (IDX1J)*strideC1J + (IDXK)*strideCK ))
#define GLOBAL_OFFSET_A(IDX0I, IDXL, IDXK) (( (IDX0I)*strideA0I + (IDXL)*strideAL + (IDXK)*strideAK ))
#define GLOBAL_OFFSET_B(IDX1J, IDXL, IDXK) (( (IDX1J)*strideB1J + (IDXL)*strideBL + (IDXK)*strideBK ))

/* data types */
#define DATA_TYPE tensile_half
#define DEST_DATA_TYPE tensile_half
#define COMPUTE_DATA_TYPE tensile_half

  /* atomic add float */
#ifndef ATOMIC_FLOAT_FUNCTION
#define ATOMIC_FLOAT_FUNCTION

__device__ inline int atomicAddType(int *fPtr, int operand)
{
  return atomicAdd(fPtr,operand);
}

__device__ inline unsigned int atomicAddType(unsigned int *fPtr, unsigned int operand)
{
  return atomicAdd(fPtr,operand);
}

__device__ inline unsigned long long int atomicAddType(unsigned long long int *fPtr, unsigned long long int operand)
{
  return atomicAdd(fPtr,operand);
}

__device__ inline float atomicAddType(float *fPtr, float operand)
{
  return atomicAdd(fPtr,operand);
}

__device__ inline double atomicAddType(double *fPtr, double operand)
{
  return atomicAdd(fPtr,operand);
}

#endif
#define MAGIC_DIV1(dividend, magicNumber, magicShift) ((uint64_t)(dividend) * magicNumber >> magicShift)

/* MAC's */
#define MAC(A,B,DST) DST += static_cast<float>(A) * static_cast<float>(B)
#define TYPE_MAC(MULA,MULB,DST) DST = MAC(MULA,MULB,DST);
#define TYPE_MAC_WRITE(DST,SRC,ALPHA,REG,BETA) atomicAddType(&(DST), (REG));
/* 1x1 micro-tile */
#define MAC_1x1\
  TYPE_MAC(rA[0],rB[0],rC[0+0*TT0I]); \

#define MAC_1x1_BLK\
  TYPE_MAC(rA[0+TT0I],rB[0+TT1J],rC[0+0*TT0I]); \

/* hard-coded initial strides CD*/
/* hard-coded initial strides AB */
#define strideD0I 1
#define strideC0I 1
#define strideA0I 1
#define strideB1J 1


  /******************************************/
  /* Begin Kernel                           */
  /******************************************/

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
extern "C"
__global__ void Cijk_Ailk_Bjlk_HBH_MT64x1x64_SE_K1_WGM1(
  float *D,
  float const * __restrict__ C,
  tensile_half const * __restrict__ A,
  tensile_half const * __restrict__ B,
  tensile_half const alpha,
  tensile_half const beta,
  unsigned int const strideD1J,
  unsigned int const strideDK,
  unsigned int const strideC1J,
  unsigned int const strideCK,
  unsigned int const strideAL,
  unsigned int const strideAK,
  unsigned int const strideBL,
  unsigned int const strideBK,
  unsigned int const size0I,
  unsigned int const size1J,
  unsigned int const sizeK,
  unsigned int const sizeL,
  unsigned int staggerUIterParm,
  unsigned int problemNumGroupTiles0,
  unsigned int problemNumGroupTiles1,
  unsigned int magicNumberProblemNumGroupTiles0 )
#pragma clang diagnostic pop

 {


  /******************************************/
  /* Allocate Resources                     */
  /******************************************/

  unsigned int serial = hc_get_workitem_id(0);
  unsigned int sgId = serial / (SG0I*SG1J);
#define SCALAR_ZERO (tensile_half)(0)
#define SCALAR_OOB_DATA SCALAR_ZERO
  /* registers for MAC's */
  float rC[TT0I*TT1J];
  DATA_TYPE rA[TT0I*2];
  DATA_TYPE rB[TT1J*2];

  /* registers for global->local */
  DATA_TYPE a_0_0_0_0;
  DATA_TYPE a_0_0_1_0;
  DATA_TYPE a_0_0_2_0;
  DATA_TYPE a_0_0_3_0;
  DATA_TYPE a_0_0_4_0;
  DATA_TYPE a_0_0_5_0;
  DATA_TYPE a_0_0_6_0;
  DATA_TYPE a_0_0_7_0;
  DATA_TYPE a_0_0_8_0;
  DATA_TYPE a_0_0_9_0;
  DATA_TYPE a_0_0_10_0;
  DATA_TYPE a_0_0_11_0;
  DATA_TYPE a_0_0_12_0;
  DATA_TYPE a_0_0_13_0;
  DATA_TYPE a_0_0_14_0;
  DATA_TYPE a_0_0_15_0;
  DATA_TYPE a_0_0_16_0;
  DATA_TYPE a_0_0_17_0;
  DATA_TYPE a_0_0_18_0;
  DATA_TYPE a_0_0_19_0;
  DATA_TYPE a_0_0_20_0;
  DATA_TYPE a_0_0_21_0;
  DATA_TYPE a_0_0_22_0;
  DATA_TYPE a_0_0_23_0;
  DATA_TYPE a_0_0_24_0;
  DATA_TYPE a_0_0_25_0;
  DATA_TYPE a_0_0_26_0;
  DATA_TYPE a_0_0_27_0;
  DATA_TYPE a_0_0_28_0;
  DATA_TYPE a_0_0_29_0;
  DATA_TYPE a_0_0_30_0;
  DATA_TYPE a_0_0_31_0;
  DATA_TYPE a_0_0_32_0;
  DATA_TYPE a_0_0_33_0;
  DATA_TYPE a_0_0_34_0;
  DATA_TYPE a_0_0_35_0;
  DATA_TYPE a_0_0_36_0;
  DATA_TYPE a_0_0_37_0;
  DATA_TYPE a_0_0_38_0;
  DATA_TYPE a_0_0_39_0;
  DATA_TYPE a_0_0_40_0;
  DATA_TYPE a_0_0_41_0;
  DATA_TYPE a_0_0_42_0;
  DATA_TYPE a_0_0_43_0;
  DATA_TYPE a_0_0_44_0;
  DATA_TYPE a_0_0_45_0;
  DATA_TYPE a_0_0_46_0;
  DATA_TYPE a_0_0_47_0;
  DATA_TYPE a_0_0_48_0;
  DATA_TYPE a_0_0_49_0;
  DATA_TYPE a_0_0_50_0;
  DATA_TYPE a_0_0_51_0;
  DATA_TYPE a_0_0_52_0;
  DATA_TYPE a_0_0_53_0;
  DATA_TYPE a_0_0_54_0;
  DATA_TYPE a_0_0_55_0;
  DATA_TYPE a_0_0_56_0;
  DATA_TYPE a_0_0_57_0;
  DATA_TYPE a_0_0_58_0;
  DATA_TYPE a_0_0_59_0;
  DATA_TYPE a_0_0_60_0;
  DATA_TYPE a_0_0_61_0;
  DATA_TYPE a_0_0_62_0;
  DATA_TYPE a_0_0_63_0;
  DATA_TYPE b_0_0_0_0;

  /* allocate tensile_half2 memory */
  tensile_half2 a_pk_fma;
  tensile_half2 b_pk_fma;
  tensile_half2 c_pk_fma;

  /* allocate local memory */
  __shared__ DATA_TYPE localMemory[LDS_NUM_ELEMENTS];
typedef struct MagicStruct {unsigned M; int a; int s;} MagicStruct;
const unsigned MAGIC_STRUCT_A = 0x80000000; // for extracting a-bit from shift kernarg
#define MAGIC_DIV2(dividend, magic) (((((uint64_t)(dividend) * magic.M) >> 32) + dividend*magic.a) >> magic.s)


  /******************************************/
  /* Local Read Addresses                   */
  /******************************************/


  /* local read addresses: tile assignments a */

  unsigned int lr0I = (serial % SG0I);


  /* local read addresses: tile assignments b */

  unsigned int lr1J = (serial / SG0I) % SG1J;


  /* local read addresses: final offsets a */

  unsigned int localReadOffsetA = lr0I*VECTOR_WIDTH + sgId*(MT0I+PAD);


  /* local read addresses: final offsets b */

  unsigned int localReadOffsetB = lr1J*VECTOR_WIDTH + sgId*(MT1J+PAD) + LDS_OFFSET_B;


  /* local read addresses: declare addresses a */

  DATA_TYPE *localReadA;


  /* local read addresses: declare addresses b */

  DATA_TYPE *localReadB;



  /******************************************/
  /* Begin setupNewTile                     */
  /******************************************/


  /* global read addresses: work-group */

  unsigned int wg0I = hc_get_group_id(0);
  unsigned int wg1J = hc_get_group_id(1);
  unsigned int nwg0I = hc_get_num_groups(0);
  unsigned int nwg1J = hc_get_num_groups(1);
  nwg1J /= GLOBAL_SPLITU;
  unsigned int gsuSumIdx = 0;
  gsuSumIdx = wg1J % GLOBAL_SPLITU;
  wg1J = wg1J / GLOBAL_SPLITU;

  /* global read addresses: tile offset assignment a */

  unsigned int globalReadOffsetA0I = (serial%LVCA)*GLOBAL_LOAD_VECTOR_WIDTH_A + (wg0I)*MT0I;


  /* global read addresses: tile offset assignment b */

  unsigned int globalReadOffsetB1J = (serial%LVCB)*GLOBAL_LOAD_VECTOR_WIDTH_B + (wg1J)*MT1J;


  /* global read addresses: unroll assignment a */

  unsigned int globalReadOffsetAL = (serial/LVCA) + LOCAL_DEPTHU*gsuSumIdx;


  /* global read addresses: unroll assignment b */

  unsigned int globalReadOffsetBL = (serial/LVCB) + LOCAL_DEPTHU*gsuSumIdx;


  /* global read addresses: other free assignments */

  unsigned int wgK = ( hc_get_group_id(2) ) % sizeK;


  /* global read addresses: tile offsets a */

  unsigned int flattenedOffsetA_0_0 = globalReadOffsetA0I + 0 + 0*LSCA;
  flattenedOffsetA_0_0 = (flattenedOffsetA_0_0 > (size0I-1)) ? (size0I-1):flattenedOffsetA_0_0;
  unsigned int globalReadOffsetA0I_0_0 = flattenedOffsetA_0_0;


  /* global read addresses: tile offsets b */

  unsigned int flattenedOffsetB_0_0 = globalReadOffsetB1J + 0 + 0*LSCB;
  flattenedOffsetB_0_0 = (flattenedOffsetB_0_0 > (size1J-1)) ? (size1J-1):flattenedOffsetB_0_0;
  unsigned int globalReadOffsetB1J_0_0 = flattenedOffsetB_0_0;


  /* global read addresses: unroll offsets a */

  unsigned int globalReadOffsetAL_0_0 = globalReadOffsetAL + 0 + 0*LSPA;
  unsigned int globalReadOffsetAL_1_0 = globalReadOffsetAL + 0 + 1*LSPA;
  unsigned int globalReadOffsetAL_2_0 = globalReadOffsetAL + 0 + 2*LSPA;
  unsigned int globalReadOffsetAL_3_0 = globalReadOffsetAL + 0 + 3*LSPA;
  unsigned int globalReadOffsetAL_4_0 = globalReadOffsetAL + 0 + 4*LSPA;
  unsigned int globalReadOffsetAL_5_0 = globalReadOffsetAL + 0 + 5*LSPA;
  unsigned int globalReadOffsetAL_6_0 = globalReadOffsetAL + 0 + 6*LSPA;
  unsigned int globalReadOffsetAL_7_0 = globalReadOffsetAL + 0 + 7*LSPA;
  unsigned int globalReadOffsetAL_8_0 = globalReadOffsetAL + 0 + 8*LSPA;
  unsigned int globalReadOffsetAL_9_0 = globalReadOffsetAL + 0 + 9*LSPA;
  unsigned int globalReadOffsetAL_10_0 = globalReadOffsetAL + 0 + 10*LSPA;
  unsigned int globalReadOffsetAL_11_0 = globalReadOffsetAL + 0 + 11*LSPA;
  unsigned int globalReadOffsetAL_12_0 = globalReadOffsetAL + 0 + 12*LSPA;
  unsigned int globalReadOffsetAL_13_0 = globalReadOffsetAL + 0 + 13*LSPA;
  unsigned int globalReadOffsetAL_14_0 = globalReadOffsetAL + 0 + 14*LSPA;
  unsigned int globalReadOffsetAL_15_0 = globalReadOffsetAL + 0 + 15*LSPA;
  unsigned int globalReadOffsetAL_16_0 = globalReadOffsetAL + 0 + 16*LSPA;
  unsigned int globalReadOffsetAL_17_0 = globalReadOffsetAL + 0 + 17*LSPA;
  unsigned int globalReadOffsetAL_18_0 = globalReadOffsetAL + 0 + 18*LSPA;
  unsigned int globalReadOffsetAL_19_0 = globalReadOffsetAL + 0 + 19*LSPA;
  unsigned int globalReadOffsetAL_20_0 = globalReadOffsetAL + 0 + 20*LSPA;
  unsigned int globalReadOffsetAL_21_0 = globalReadOffsetAL + 0 + 21*LSPA;
  unsigned int globalReadOffsetAL_22_0 = globalReadOffsetAL + 0 + 22*LSPA;
  unsigned int globalReadOffsetAL_23_0 = globalReadOffsetAL + 0 + 23*LSPA;
  unsigned int globalReadOffsetAL_24_0 = globalReadOffsetAL + 0 + 24*LSPA;
  unsigned int globalReadOffsetAL_25_0 = globalReadOffsetAL + 0 + 25*LSPA;
  unsigned int globalReadOffsetAL_26_0 = globalReadOffsetAL + 0 + 26*LSPA;
  unsigned int globalReadOffsetAL_27_0 = globalReadOffsetAL + 0 + 27*LSPA;
  unsigned int globalReadOffsetAL_28_0 = globalReadOffsetAL + 0 + 28*LSPA;
  unsigned int globalReadOffsetAL_29_0 = globalReadOffsetAL + 0 + 29*LSPA;
  unsigned int globalReadOffsetAL_30_0 = globalReadOffsetAL + 0 + 30*LSPA;
  unsigned int globalReadOffsetAL_31_0 = globalReadOffsetAL + 0 + 31*LSPA;
  unsigned int globalReadOffsetAL_32_0 = globalReadOffsetAL + 0 + 32*LSPA;
  unsigned int globalReadOffsetAL_33_0 = globalReadOffsetAL + 0 + 33*LSPA;
  unsigned int globalReadOffsetAL_34_0 = globalReadOffsetAL + 0 + 34*LSPA;
  unsigned int globalReadOffsetAL_35_0 = globalReadOffsetAL + 0 + 35*LSPA;
  unsigned int globalReadOffsetAL_36_0 = globalReadOffsetAL + 0 + 36*LSPA;
  unsigned int globalReadOffsetAL_37_0 = globalReadOffsetAL + 0 + 37*LSPA;
  unsigned int globalReadOffsetAL_38_0 = globalReadOffsetAL + 0 + 38*LSPA;
  unsigned int globalReadOffsetAL_39_0 = globalReadOffsetAL + 0 + 39*LSPA;
  unsigned int globalReadOffsetAL_40_0 = globalReadOffsetAL + 0 + 40*LSPA;
  unsigned int globalReadOffsetAL_41_0 = globalReadOffsetAL + 0 + 41*LSPA;
  unsigned int globalReadOffsetAL_42_0 = globalReadOffsetAL + 0 + 42*LSPA;
  unsigned int globalReadOffsetAL_43_0 = globalReadOffsetAL + 0 + 43*LSPA;
  unsigned int globalReadOffsetAL_44_0 = globalReadOffsetAL + 0 + 44*LSPA;
  unsigned int globalReadOffsetAL_45_0 = globalReadOffsetAL + 0 + 45*LSPA;
  unsigned int globalReadOffsetAL_46_0 = globalReadOffsetAL + 0 + 46*LSPA;
  unsigned int globalReadOffsetAL_47_0 = globalReadOffsetAL + 0 + 47*LSPA;
  unsigned int globalReadOffsetAL_48_0 = globalReadOffsetAL + 0 + 48*LSPA;
  unsigned int globalReadOffsetAL_49_0 = globalReadOffsetAL + 0 + 49*LSPA;
  unsigned int globalReadOffsetAL_50_0 = globalReadOffsetAL + 0 + 50*LSPA;
  unsigned int globalReadOffsetAL_51_0 = globalReadOffsetAL + 0 + 51*LSPA;
  unsigned int globalReadOffsetAL_52_0 = globalReadOffsetAL + 0 + 52*LSPA;
  unsigned int globalReadOffsetAL_53_0 = globalReadOffsetAL + 0 + 53*LSPA;
  unsigned int globalReadOffsetAL_54_0 = globalReadOffsetAL + 0 + 54*LSPA;
  unsigned int globalReadOffsetAL_55_0 = globalReadOffsetAL + 0 + 55*LSPA;
  unsigned int globalReadOffsetAL_56_0 = globalReadOffsetAL + 0 + 56*LSPA;
  unsigned int globalReadOffsetAL_57_0 = globalReadOffsetAL + 0 + 57*LSPA;
  unsigned int globalReadOffsetAL_58_0 = globalReadOffsetAL + 0 + 58*LSPA;
  unsigned int globalReadOffsetAL_59_0 = globalReadOffsetAL + 0 + 59*LSPA;
  unsigned int globalReadOffsetAL_60_0 = globalReadOffsetAL + 0 + 60*LSPA;
  unsigned int globalReadOffsetAL_61_0 = globalReadOffsetAL + 0 + 61*LSPA;
  unsigned int globalReadOffsetAL_62_0 = globalReadOffsetAL + 0 + 62*LSPA;
  unsigned int globalReadOffsetAL_63_0 = globalReadOffsetAL + 0 + 63*LSPA;


  /* global read addresses: unroll offsets b */

  unsigned int globalReadOffsetBL_0_0 = globalReadOffsetBL + 0 + 0*LSPB;


  /* global read addresses: final offsets a */

  int64_t globalReadOffsetA_0_0_0_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_0_0), wgK );
  int64_t globalReadOffsetA_0_0_1_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_1_0), wgK );
  int64_t globalReadOffsetA_0_0_2_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_2_0), wgK );
  int64_t globalReadOffsetA_0_0_3_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_3_0), wgK );
  int64_t globalReadOffsetA_0_0_4_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_4_0), wgK );
  int64_t globalReadOffsetA_0_0_5_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_5_0), wgK );
  int64_t globalReadOffsetA_0_0_6_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_6_0), wgK );
  int64_t globalReadOffsetA_0_0_7_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_7_0), wgK );
  int64_t globalReadOffsetA_0_0_8_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_8_0), wgK );
  int64_t globalReadOffsetA_0_0_9_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_9_0), wgK );
  int64_t globalReadOffsetA_0_0_10_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_10_0), wgK );
  int64_t globalReadOffsetA_0_0_11_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_11_0), wgK );
  int64_t globalReadOffsetA_0_0_12_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_12_0), wgK );
  int64_t globalReadOffsetA_0_0_13_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_13_0), wgK );
  int64_t globalReadOffsetA_0_0_14_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_14_0), wgK );
  int64_t globalReadOffsetA_0_0_15_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_15_0), wgK );
  int64_t globalReadOffsetA_0_0_16_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_16_0), wgK );
  int64_t globalReadOffsetA_0_0_17_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_17_0), wgK );
  int64_t globalReadOffsetA_0_0_18_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_18_0), wgK );
  int64_t globalReadOffsetA_0_0_19_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_19_0), wgK );
  int64_t globalReadOffsetA_0_0_20_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_20_0), wgK );
  int64_t globalReadOffsetA_0_0_21_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_21_0), wgK );
  int64_t globalReadOffsetA_0_0_22_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_22_0), wgK );
  int64_t globalReadOffsetA_0_0_23_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_23_0), wgK );
  int64_t globalReadOffsetA_0_0_24_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_24_0), wgK );
  int64_t globalReadOffsetA_0_0_25_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_25_0), wgK );
  int64_t globalReadOffsetA_0_0_26_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_26_0), wgK );
  int64_t globalReadOffsetA_0_0_27_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_27_0), wgK );
  int64_t globalReadOffsetA_0_0_28_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_28_0), wgK );
  int64_t globalReadOffsetA_0_0_29_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_29_0), wgK );
  int64_t globalReadOffsetA_0_0_30_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_30_0), wgK );
  int64_t globalReadOffsetA_0_0_31_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_31_0), wgK );
  int64_t globalReadOffsetA_0_0_32_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_32_0), wgK );
  int64_t globalReadOffsetA_0_0_33_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_33_0), wgK );
  int64_t globalReadOffsetA_0_0_34_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_34_0), wgK );
  int64_t globalReadOffsetA_0_0_35_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_35_0), wgK );
  int64_t globalReadOffsetA_0_0_36_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_36_0), wgK );
  int64_t globalReadOffsetA_0_0_37_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_37_0), wgK );
  int64_t globalReadOffsetA_0_0_38_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_38_0), wgK );
  int64_t globalReadOffsetA_0_0_39_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_39_0), wgK );
  int64_t globalReadOffsetA_0_0_40_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_40_0), wgK );
  int64_t globalReadOffsetA_0_0_41_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_41_0), wgK );
  int64_t globalReadOffsetA_0_0_42_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_42_0), wgK );
  int64_t globalReadOffsetA_0_0_43_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_43_0), wgK );
  int64_t globalReadOffsetA_0_0_44_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_44_0), wgK );
  int64_t globalReadOffsetA_0_0_45_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_45_0), wgK );
  int64_t globalReadOffsetA_0_0_46_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_46_0), wgK );
  int64_t globalReadOffsetA_0_0_47_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_47_0), wgK );
  int64_t globalReadOffsetA_0_0_48_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_48_0), wgK );
  int64_t globalReadOffsetA_0_0_49_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_49_0), wgK );
  int64_t globalReadOffsetA_0_0_50_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_50_0), wgK );
  int64_t globalReadOffsetA_0_0_51_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_51_0), wgK );
  int64_t globalReadOffsetA_0_0_52_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_52_0), wgK );
  int64_t globalReadOffsetA_0_0_53_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_53_0), wgK );
  int64_t globalReadOffsetA_0_0_54_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_54_0), wgK );
  int64_t globalReadOffsetA_0_0_55_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_55_0), wgK );
  int64_t globalReadOffsetA_0_0_56_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_56_0), wgK );
  int64_t globalReadOffsetA_0_0_57_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_57_0), wgK );
  int64_t globalReadOffsetA_0_0_58_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_58_0), wgK );
  int64_t globalReadOffsetA_0_0_59_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_59_0), wgK );
  int64_t globalReadOffsetA_0_0_60_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_60_0), wgK );
  int64_t globalReadOffsetA_0_0_61_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_61_0), wgK );
  int64_t globalReadOffsetA_0_0_62_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_62_0), wgK );
  int64_t globalReadOffsetA_0_0_63_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_63_0), wgK );


  /* global read addresses: final offsets b */

  int64_t globalReadOffsetB_0_0_0_0 = GLOBAL_OFFSET_B( (globalReadOffsetB1J_0_0), (globalReadOffsetBL_0_0), wgK );


  /* global read addresses: addresses a */

  DATA_TYPE const *globalReadA_0_0_0_0 = A + globalReadOffsetA_0_0_0_0;
  DATA_TYPE const *globalReadA_0_0_1_0 = A + globalReadOffsetA_0_0_1_0;
  DATA_TYPE const *globalReadA_0_0_2_0 = A + globalReadOffsetA_0_0_2_0;
  DATA_TYPE const *globalReadA_0_0_3_0 = A + globalReadOffsetA_0_0_3_0;
  DATA_TYPE const *globalReadA_0_0_4_0 = A + globalReadOffsetA_0_0_4_0;
  DATA_TYPE const *globalReadA_0_0_5_0 = A + globalReadOffsetA_0_0_5_0;
  DATA_TYPE const *globalReadA_0_0_6_0 = A + globalReadOffsetA_0_0_6_0;
  DATA_TYPE const *globalReadA_0_0_7_0 = A + globalReadOffsetA_0_0_7_0;
  DATA_TYPE const *globalReadA_0_0_8_0 = A + globalReadOffsetA_0_0_8_0;
  DATA_TYPE const *globalReadA_0_0_9_0 = A + globalReadOffsetA_0_0_9_0;
  DATA_TYPE const *globalReadA_0_0_10_0 = A + globalReadOffsetA_0_0_10_0;
  DATA_TYPE const *globalReadA_0_0_11_0 = A + globalReadOffsetA_0_0_11_0;
  DATA_TYPE const *globalReadA_0_0_12_0 = A + globalReadOffsetA_0_0_12_0;
  DATA_TYPE const *globalReadA_0_0_13_0 = A + globalReadOffsetA_0_0_13_0;
  DATA_TYPE const *globalReadA_0_0_14_0 = A + globalReadOffsetA_0_0_14_0;
  DATA_TYPE const *globalReadA_0_0_15_0 = A + globalReadOffsetA_0_0_15_0;
  DATA_TYPE const *globalReadA_0_0_16_0 = A + globalReadOffsetA_0_0_16_0;
  DATA_TYPE const *globalReadA_0_0_17_0 = A + globalReadOffsetA_0_0_17_0;
  DATA_TYPE const *globalReadA_0_0_18_0 = A + globalReadOffsetA_0_0_18_0;
  DATA_TYPE const *globalReadA_0_0_19_0 = A + globalReadOffsetA_0_0_19_0;
  DATA_TYPE const *globalReadA_0_0_20_0 = A + globalReadOffsetA_0_0_20_0;
  DATA_TYPE const *globalReadA_0_0_21_0 = A + globalReadOffsetA_0_0_21_0;
  DATA_TYPE const *globalReadA_0_0_22_0 = A + globalReadOffsetA_0_0_22_0;
  DATA_TYPE const *globalReadA_0_0_23_0 = A + globalReadOffsetA_0_0_23_0;
  DATA_TYPE const *globalReadA_0_0_24_0 = A + globalReadOffsetA_0_0_24_0;
  DATA_TYPE const *globalReadA_0_0_25_0 = A + globalReadOffsetA_0_0_25_0;
  DATA_TYPE const *globalReadA_0_0_26_0 = A + globalReadOffsetA_0_0_26_0;
  DATA_TYPE const *globalReadA_0_0_27_0 = A + globalReadOffsetA_0_0_27_0;
  DATA_TYPE const *globalReadA_0_0_28_0 = A + globalReadOffsetA_0_0_28_0;
  DATA_TYPE const *globalReadA_0_0_29_0 = A + globalReadOffsetA_0_0_29_0;
  DATA_TYPE const *globalReadA_0_0_30_0 = A + globalReadOffsetA_0_0_30_0;
  DATA_TYPE const *globalReadA_0_0_31_0 = A + globalReadOffsetA_0_0_31_0;
  DATA_TYPE const *globalReadA_0_0_32_0 = A + globalReadOffsetA_0_0_32_0;
  DATA_TYPE const *globalReadA_0_0_33_0 = A + globalReadOffsetA_0_0_33_0;
  DATA_TYPE const *globalReadA_0_0_34_0 = A + globalReadOffsetA_0_0_34_0;
  DATA_TYPE const *globalReadA_0_0_35_0 = A + globalReadOffsetA_0_0_35_0;
  DATA_TYPE const *globalReadA_0_0_36_0 = A + globalReadOffsetA_0_0_36_0;
  DATA_TYPE const *globalReadA_0_0_37_0 = A + globalReadOffsetA_0_0_37_0;
  DATA_TYPE const *globalReadA_0_0_38_0 = A + globalReadOffsetA_0_0_38_0;
  DATA_TYPE const *globalReadA_0_0_39_0 = A + globalReadOffsetA_0_0_39_0;
  DATA_TYPE const *globalReadA_0_0_40_0 = A + globalReadOffsetA_0_0_40_0;
  DATA_TYPE const *globalReadA_0_0_41_0 = A + globalReadOffsetA_0_0_41_0;
  DATA_TYPE const *globalReadA_0_0_42_0 = A + globalReadOffsetA_0_0_42_0;
  DATA_TYPE const *globalReadA_0_0_43_0 = A + globalReadOffsetA_0_0_43_0;
  DATA_TYPE const *globalReadA_0_0_44_0 = A + globalReadOffsetA_0_0_44_0;
  DATA_TYPE const *globalReadA_0_0_45_0 = A + globalReadOffsetA_0_0_45_0;
  DATA_TYPE const *globalReadA_0_0_46_0 = A + globalReadOffsetA_0_0_46_0;
  DATA_TYPE const *globalReadA_0_0_47_0 = A + globalReadOffsetA_0_0_47_0;
  DATA_TYPE const *globalReadA_0_0_48_0 = A + globalReadOffsetA_0_0_48_0;
  DATA_TYPE const *globalReadA_0_0_49_0 = A + globalReadOffsetA_0_0_49_0;
  DATA_TYPE const *globalReadA_0_0_50_0 = A + globalReadOffsetA_0_0_50_0;
  DATA_TYPE const *globalReadA_0_0_51_0 = A + globalReadOffsetA_0_0_51_0;
  DATA_TYPE const *globalReadA_0_0_52_0 = A + globalReadOffsetA_0_0_52_0;
  DATA_TYPE const *globalReadA_0_0_53_0 = A + globalReadOffsetA_0_0_53_0;
  DATA_TYPE const *globalReadA_0_0_54_0 = A + globalReadOffsetA_0_0_54_0;
  DATA_TYPE const *globalReadA_0_0_55_0 = A + globalReadOffsetA_0_0_55_0;
  DATA_TYPE const *globalReadA_0_0_56_0 = A + globalReadOffsetA_0_0_56_0;
  DATA_TYPE const *globalReadA_0_0_57_0 = A + globalReadOffsetA_0_0_57_0;
  DATA_TYPE const *globalReadA_0_0_58_0 = A + globalReadOffsetA_0_0_58_0;
  DATA_TYPE const *globalReadA_0_0_59_0 = A + globalReadOffsetA_0_0_59_0;
  DATA_TYPE const *globalReadA_0_0_60_0 = A + globalReadOffsetA_0_0_60_0;
  DATA_TYPE const *globalReadA_0_0_61_0 = A + globalReadOffsetA_0_0_61_0;
  DATA_TYPE const *globalReadA_0_0_62_0 = A + globalReadOffsetA_0_0_62_0;
  DATA_TYPE const *globalReadA_0_0_63_0 = A + globalReadOffsetA_0_0_63_0;


  /* global read addresses: addresses b */

  DATA_TYPE const *globalReadB_0_0_0_0 = B + globalReadOffsetB_0_0_0_0;


  /* global read addresses: increments a */

  int64_t globalReadIncAL = (int64_t)strideAL*LOCAL_DEPTHU*GLOBAL_SPLITU;


  /* global read addresses: increments b */

  int64_t globalReadIncBL = (int64_t)strideBL*LOCAL_DEPTHU*GLOBAL_SPLITU;


  /******************************************/
  /* Local Write Addresses                  */
  /******************************************/


  /* local write addresses: tile assignment A */
  unsigned int lwA0I = (serial%LVCA)*GLOBAL_LOAD_VECTOR_WIDTH_A;


  /* local write addresses: tile assignment B */
  unsigned int lwB1J = (serial%LVCB)*GLOBAL_LOAD_VECTOR_WIDTH_B;


  /* local write addresses: unroll assignment A */
  unsigned int lwAL = (serial/LVCA);


  /* local write addresses: unroll assignment B */
  unsigned int lwBL = (serial/LVCB);


  /* local write addresses: first offset a */

  unsigned int localWriteFirstOffsetA = lwA0I + lwAL*(MT0I+PAD);


  /* local write addresses: first offset b */

  unsigned int localWriteFirstOffsetB = lwB1J + lwBL*(MT1J+PAD) + LDS_OFFSET_B;


  /* local write addresses: final offsets A */
  unsigned int localWriteOffsetA_0_0_0_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 0*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_1_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 1*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_2_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 2*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_3_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 3*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_4_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 4*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_5_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 5*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_6_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 6*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_7_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 7*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_8_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 8*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_9_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 9*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_10_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 10*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_11_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 11*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_12_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 12*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_13_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 13*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_14_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 14*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_15_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 15*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_16_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 16*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_17_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 17*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_18_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 18*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_19_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 19*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_20_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 20*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_21_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 21*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_22_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 22*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_23_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 23*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_24_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 24*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_25_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 25*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_26_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 26*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_27_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 27*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_28_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 28*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_29_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 29*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_30_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 30*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_31_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 31*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_32_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 32*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_33_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 33*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_34_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 34*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_35_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 35*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_36_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 36*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_37_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 37*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_38_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 38*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_39_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 39*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_40_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 40*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_41_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 41*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_42_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 42*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_43_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 43*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_44_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 44*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_45_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 45*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_46_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 46*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_47_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 47*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_48_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 48*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_49_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 49*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_50_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 50*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_51_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 51*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_52_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 52*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_53_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 53*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_54_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 54*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_55_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 55*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_56_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 56*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_57_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 57*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_58_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 58*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_59_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 59*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_60_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 60*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_61_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 61*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_62_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 62*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_63_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 63*LSPA)*(MT0I+PAD);


  /* local write addresses: final offsets B */
  unsigned int localWriteOffsetB_0_0_0_0 = localWriteFirstOffsetB + (0 + 0*LSCB) + (0 + 0*LSPB)*(MT1J+PAD);


  /* local write addresses: declare addresses A */
  DATA_TYPE *localWriteA_0_0_0_0;
  DATA_TYPE *localWriteA_0_0_1_0;
  DATA_TYPE *localWriteA_0_0_2_0;
  DATA_TYPE *localWriteA_0_0_3_0;
  DATA_TYPE *localWriteA_0_0_4_0;
  DATA_TYPE *localWriteA_0_0_5_0;
  DATA_TYPE *localWriteA_0_0_6_0;
  DATA_TYPE *localWriteA_0_0_7_0;
  DATA_TYPE *localWriteA_0_0_8_0;
  DATA_TYPE *localWriteA_0_0_9_0;
  DATA_TYPE *localWriteA_0_0_10_0;
  DATA_TYPE *localWriteA_0_0_11_0;
  DATA_TYPE *localWriteA_0_0_12_0;
  DATA_TYPE *localWriteA_0_0_13_0;
  DATA_TYPE *localWriteA_0_0_14_0;
  DATA_TYPE *localWriteA_0_0_15_0;
  DATA_TYPE *localWriteA_0_0_16_0;
  DATA_TYPE *localWriteA_0_0_17_0;
  DATA_TYPE *localWriteA_0_0_18_0;
  DATA_TYPE *localWriteA_0_0_19_0;
  DATA_TYPE *localWriteA_0_0_20_0;
  DATA_TYPE *localWriteA_0_0_21_0;
  DATA_TYPE *localWriteA_0_0_22_0;
  DATA_TYPE *localWriteA_0_0_23_0;
  DATA_TYPE *localWriteA_0_0_24_0;
  DATA_TYPE *localWriteA_0_0_25_0;
  DATA_TYPE *localWriteA_0_0_26_0;
  DATA_TYPE *localWriteA_0_0_27_0;
  DATA_TYPE *localWriteA_0_0_28_0;
  DATA_TYPE *localWriteA_0_0_29_0;
  DATA_TYPE *localWriteA_0_0_30_0;
  DATA_TYPE *localWriteA_0_0_31_0;
  DATA_TYPE *localWriteA_0_0_32_0;
  DATA_TYPE *localWriteA_0_0_33_0;
  DATA_TYPE *localWriteA_0_0_34_0;
  DATA_TYPE *localWriteA_0_0_35_0;
  DATA_TYPE *localWriteA_0_0_36_0;
  DATA_TYPE *localWriteA_0_0_37_0;
  DATA_TYPE *localWriteA_0_0_38_0;
  DATA_TYPE *localWriteA_0_0_39_0;
  DATA_TYPE *localWriteA_0_0_40_0;
  DATA_TYPE *localWriteA_0_0_41_0;
  DATA_TYPE *localWriteA_0_0_42_0;
  DATA_TYPE *localWriteA_0_0_43_0;
  DATA_TYPE *localWriteA_0_0_44_0;
  DATA_TYPE *localWriteA_0_0_45_0;
  DATA_TYPE *localWriteA_0_0_46_0;
  DATA_TYPE *localWriteA_0_0_47_0;
  DATA_TYPE *localWriteA_0_0_48_0;
  DATA_TYPE *localWriteA_0_0_49_0;
  DATA_TYPE *localWriteA_0_0_50_0;
  DATA_TYPE *localWriteA_0_0_51_0;
  DATA_TYPE *localWriteA_0_0_52_0;
  DATA_TYPE *localWriteA_0_0_53_0;
  DATA_TYPE *localWriteA_0_0_54_0;
  DATA_TYPE *localWriteA_0_0_55_0;
  DATA_TYPE *localWriteA_0_0_56_0;
  DATA_TYPE *localWriteA_0_0_57_0;
  DATA_TYPE *localWriteA_0_0_58_0;
  DATA_TYPE *localWriteA_0_0_59_0;
  DATA_TYPE *localWriteA_0_0_60_0;
  DATA_TYPE *localWriteA_0_0_61_0;
  DATA_TYPE *localWriteA_0_0_62_0;
  DATA_TYPE *localWriteA_0_0_63_0;


  /* local write addresses: declare addresses B */
  DATA_TYPE *localWriteB_0_0_0_0;


  /* local write init pointers A */
  localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
  localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
  localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
  localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);
  localWriteA_0_0_4_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_4_0);
  localWriteA_0_0_5_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_5_0);
  localWriteA_0_0_6_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_6_0);
  localWriteA_0_0_7_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_7_0);
  localWriteA_0_0_8_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_8_0);
  localWriteA_0_0_9_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_9_0);
  localWriteA_0_0_10_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_10_0);
  localWriteA_0_0_11_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_11_0);
  localWriteA_0_0_12_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_12_0);
  localWriteA_0_0_13_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_13_0);
  localWriteA_0_0_14_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_14_0);
  localWriteA_0_0_15_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_15_0);
  localWriteA_0_0_16_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_16_0);
  localWriteA_0_0_17_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_17_0);
  localWriteA_0_0_18_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_18_0);
  localWriteA_0_0_19_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_19_0);
  localWriteA_0_0_20_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_20_0);
  localWriteA_0_0_21_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_21_0);
  localWriteA_0_0_22_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_22_0);
  localWriteA_0_0_23_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_23_0);
  localWriteA_0_0_24_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_24_0);
  localWriteA_0_0_25_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_25_0);
  localWriteA_0_0_26_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_26_0);
  localWriteA_0_0_27_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_27_0);
  localWriteA_0_0_28_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_28_0);
  localWriteA_0_0_29_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_29_0);
  localWriteA_0_0_30_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_30_0);
  localWriteA_0_0_31_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_31_0);
  localWriteA_0_0_32_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_32_0);
  localWriteA_0_0_33_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_33_0);
  localWriteA_0_0_34_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_34_0);
  localWriteA_0_0_35_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_35_0);
  localWriteA_0_0_36_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_36_0);
  localWriteA_0_0_37_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_37_0);
  localWriteA_0_0_38_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_38_0);
  localWriteA_0_0_39_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_39_0);
  localWriteA_0_0_40_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_40_0);
  localWriteA_0_0_41_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_41_0);
  localWriteA_0_0_42_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_42_0);
  localWriteA_0_0_43_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_43_0);
  localWriteA_0_0_44_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_44_0);
  localWriteA_0_0_45_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_45_0);
  localWriteA_0_0_46_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_46_0);
  localWriteA_0_0_47_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_47_0);
  localWriteA_0_0_48_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_48_0);
  localWriteA_0_0_49_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_49_0);
  localWriteA_0_0_50_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_50_0);
  localWriteA_0_0_51_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_51_0);
  localWriteA_0_0_52_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_52_0);
  localWriteA_0_0_53_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_53_0);
  localWriteA_0_0_54_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_54_0);
  localWriteA_0_0_55_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_55_0);
  localWriteA_0_0_56_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_56_0);
  localWriteA_0_0_57_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_57_0);
  localWriteA_0_0_58_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_58_0);
  localWriteA_0_0_59_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_59_0);
  localWriteA_0_0_60_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_60_0);
  localWriteA_0_0_61_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_61_0);
  localWriteA_0_0_62_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_62_0);
  localWriteA_0_0_63_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_63_0);


  /* local write init pointers B */
  localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);

  /* declare loop num iterations */

  int numIterL;


  /* Compute summation loop num iter */
  unsigned int numIterMyWg = (sizeL / LOCAL_DEPTHU) / GLOBAL_SPLITU;
  unsigned int numIterPerWgRemainder = (sizeL / LOCAL_DEPTHU) % GLOBAL_SPLITU;
  if (gsuSumIdx < numIterPerWgRemainder) {
    numIterMyWg ++;
  }
  numIterL = numIterMyWg;

  const unsigned origNumIter = numIterL;
  unsigned staggerUIter = (wg0I & staggerUIterParm);
  staggerUIter = (staggerUIter << 1); // shift so each stagger has 256-byte stride

  globalReadA_0_0_0_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_1_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_2_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_3_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_4_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_5_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_6_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_7_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_8_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_9_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_10_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_11_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_12_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_13_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_14_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_15_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_16_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_17_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_18_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_19_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_20_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_21_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_22_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_23_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_24_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_25_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_26_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_27_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_28_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_29_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_30_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_31_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_32_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_33_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_34_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_35_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_36_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_37_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_38_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_39_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_40_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_41_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_42_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_43_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_44_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_45_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_46_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_47_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_48_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_49_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_50_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_51_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_52_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_53_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_54_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_55_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_56_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_57_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_58_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_59_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_60_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_61_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_62_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_63_0 += (staggerUIter * globalReadIncAL); // apply stagger offset


  globalReadB_0_0_0_0 += (staggerUIter * globalReadIncBL); // apply stagger offset

  staggerUIter += 1; // add PrefetchGlobalRead

  /* local read addresses: init pointers a */

  localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

  /* local read addresses: init pointers b */

  localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);


  /* prefetch: global -> local */

  if (numIterMyWg >= 1) {



    /* global read A */
    a_0_0_0_0 = *(globalReadA_0_0_0_0 + 0);
    a_0_0_1_0 = *(globalReadA_0_0_1_0 + 0);
    a_0_0_2_0 = *(globalReadA_0_0_2_0 + 0);
    a_0_0_3_0 = *(globalReadA_0_0_3_0 + 0);
    a_0_0_4_0 = *(globalReadA_0_0_4_0 + 0);
    a_0_0_5_0 = *(globalReadA_0_0_5_0 + 0);
    a_0_0_6_0 = *(globalReadA_0_0_6_0 + 0);
    a_0_0_7_0 = *(globalReadA_0_0_7_0 + 0);
    a_0_0_8_0 = *(globalReadA_0_0_8_0 + 0);
    a_0_0_9_0 = *(globalReadA_0_0_9_0 + 0);
    a_0_0_10_0 = *(globalReadA_0_0_10_0 + 0);
    a_0_0_11_0 = *(globalReadA_0_0_11_0 + 0);
    a_0_0_12_0 = *(globalReadA_0_0_12_0 + 0);
    a_0_0_13_0 = *(globalReadA_0_0_13_0 + 0);
    a_0_0_14_0 = *(globalReadA_0_0_14_0 + 0);
    a_0_0_15_0 = *(globalReadA_0_0_15_0 + 0);
    a_0_0_16_0 = *(globalReadA_0_0_16_0 + 0);
    a_0_0_17_0 = *(globalReadA_0_0_17_0 + 0);
    a_0_0_18_0 = *(globalReadA_0_0_18_0 + 0);
    a_0_0_19_0 = *(globalReadA_0_0_19_0 + 0);
    a_0_0_20_0 = *(globalReadA_0_0_20_0 + 0);
    a_0_0_21_0 = *(globalReadA_0_0_21_0 + 0);
    a_0_0_22_0 = *(globalReadA_0_0_22_0 + 0);
    a_0_0_23_0 = *(globalReadA_0_0_23_0 + 0);
    a_0_0_24_0 = *(globalReadA_0_0_24_0 + 0);
    a_0_0_25_0 = *(globalReadA_0_0_25_0 + 0);
    a_0_0_26_0 = *(globalReadA_0_0_26_0 + 0);
    a_0_0_27_0 = *(globalReadA_0_0_27_0 + 0);
    a_0_0_28_0 = *(globalReadA_0_0_28_0 + 0);
    a_0_0_29_0 = *(globalReadA_0_0_29_0 + 0);
    a_0_0_30_0 = *(globalReadA_0_0_30_0 + 0);
    a_0_0_31_0 = *(globalReadA_0_0_31_0 + 0);
    a_0_0_32_0 = *(globalReadA_0_0_32_0 + 0);
    a_0_0_33_0 = *(globalReadA_0_0_33_0 + 0);
    a_0_0_34_0 = *(globalReadA_0_0_34_0 + 0);
    a_0_0_35_0 = *(globalReadA_0_0_35_0 + 0);
    a_0_0_36_0 = *(globalReadA_0_0_36_0 + 0);
    a_0_0_37_0 = *(globalReadA_0_0_37_0 + 0);
    a_0_0_38_0 = *(globalReadA_0_0_38_0 + 0);
    a_0_0_39_0 = *(globalReadA_0_0_39_0 + 0);
    a_0_0_40_0 = *(globalReadA_0_0_40_0 + 0);
    a_0_0_41_0 = *(globalReadA_0_0_41_0 + 0);
    a_0_0_42_0 = *(globalReadA_0_0_42_0 + 0);
    a_0_0_43_0 = *(globalReadA_0_0_43_0 + 0);
    a_0_0_44_0 = *(globalReadA_0_0_44_0 + 0);
    a_0_0_45_0 = *(globalReadA_0_0_45_0 + 0);
    a_0_0_46_0 = *(globalReadA_0_0_46_0 + 0);
    a_0_0_47_0 = *(globalReadA_0_0_47_0 + 0);
    a_0_0_48_0 = *(globalReadA_0_0_48_0 + 0);
    a_0_0_49_0 = *(globalReadA_0_0_49_0 + 0);
    a_0_0_50_0 = *(globalReadA_0_0_50_0 + 0);
    a_0_0_51_0 = *(globalReadA_0_0_51_0 + 0);
    a_0_0_52_0 = *(globalReadA_0_0_52_0 + 0);
    a_0_0_53_0 = *(globalReadA_0_0_53_0 + 0);
    a_0_0_54_0 = *(globalReadA_0_0_54_0 + 0);
    a_0_0_55_0 = *(globalReadA_0_0_55_0 + 0);
    a_0_0_56_0 = *(globalReadA_0_0_56_0 + 0);
    a_0_0_57_0 = *(globalReadA_0_0_57_0 + 0);
    a_0_0_58_0 = *(globalReadA_0_0_58_0 + 0);
    a_0_0_59_0 = *(globalReadA_0_0_59_0 + 0);
    a_0_0_60_0 = *(globalReadA_0_0_60_0 + 0);
    a_0_0_61_0 = *(globalReadA_0_0_61_0 + 0);
    a_0_0_62_0 = *(globalReadA_0_0_62_0 + 0);
    a_0_0_63_0 = *(globalReadA_0_0_63_0 + 0);



    /* global read B */
    b_0_0_0_0 = *(globalReadB_0_0_0_0 + 0);


    /* global read inc A for sumL */
    globalReadA_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_0_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_0_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_1_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_1_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_1_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_2_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_2_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_2_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_3_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_3_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_3_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_4_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_4_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_4_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_5_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_5_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_5_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_6_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_6_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_6_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_7_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_7_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_7_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_8_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_8_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_8_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_9_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_9_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_9_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_10_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_10_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_10_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_11_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_11_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_11_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_12_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_12_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_12_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_13_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_13_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_13_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_14_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_14_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_14_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_15_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_15_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_15_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_16_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_16_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_16_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_17_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_17_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_17_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_18_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_18_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_18_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_19_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_19_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_19_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_20_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_20_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_20_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_21_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_21_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_21_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_22_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_22_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_22_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_23_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_23_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_23_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_24_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_24_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_24_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_25_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_25_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_25_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_26_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_26_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_26_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_27_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_27_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_27_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_28_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_28_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_28_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_29_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_29_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_29_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_30_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_30_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_30_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_31_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_31_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_31_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_32_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_32_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_32_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_33_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_33_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_33_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_34_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_34_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_34_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_35_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_35_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_35_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_36_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_36_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_36_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_37_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_37_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_37_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_38_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_38_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_38_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_39_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_39_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_39_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_40_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_40_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_40_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_41_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_41_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_41_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_42_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_42_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_42_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_43_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_43_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_43_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_44_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_44_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_44_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_45_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_45_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_45_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_46_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_46_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_46_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_47_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_47_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_47_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_48_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_48_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_48_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_49_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_49_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_49_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_50_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_50_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_50_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_51_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_51_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_51_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_52_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_52_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_52_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_53_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_53_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_53_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_54_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_54_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_54_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_55_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_55_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_55_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_56_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_56_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_56_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_57_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_57_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_57_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_58_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_58_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_58_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_59_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_59_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_59_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_60_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_60_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_60_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_61_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_61_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_61_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_62_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_62_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_62_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_63_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_63_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_63_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }

    /* global read inc B for sumL */
    globalReadB_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_0_0) + 1*globalReadIncBL);
    if ((numIterL) == staggerUIter) {
      globalReadB_0_0_0_0 -= (origNumIter * globalReadIncBL); // wrap staggered offset back to row start
    }


    /******************************************/
    /* End setupNewTile                       */
    /******************************************/




  rC[0] = SCALAR_ZERO;




    /* local write a */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
    *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
    *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
    *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
    *(localWriteA_0_0_4_0 + 0) = a_0_0_4_0;
    *(localWriteA_0_0_5_0 + 0) = a_0_0_5_0;
    *(localWriteA_0_0_6_0 + 0) = a_0_0_6_0;
    *(localWriteA_0_0_7_0 + 0) = a_0_0_7_0;
    *(localWriteA_0_0_8_0 + 0) = a_0_0_8_0;
    *(localWriteA_0_0_9_0 + 0) = a_0_0_9_0;
    *(localWriteA_0_0_10_0 + 0) = a_0_0_10_0;
    *(localWriteA_0_0_11_0 + 0) = a_0_0_11_0;
    *(localWriteA_0_0_12_0 + 0) = a_0_0_12_0;
    *(localWriteA_0_0_13_0 + 0) = a_0_0_13_0;
    *(localWriteA_0_0_14_0 + 0) = a_0_0_14_0;
    *(localWriteA_0_0_15_0 + 0) = a_0_0_15_0;
    *(localWriteA_0_0_16_0 + 0) = a_0_0_16_0;
    *(localWriteA_0_0_17_0 + 0) = a_0_0_17_0;
    *(localWriteA_0_0_18_0 + 0) = a_0_0_18_0;
    *(localWriteA_0_0_19_0 + 0) = a_0_0_19_0;
    *(localWriteA_0_0_20_0 + 0) = a_0_0_20_0;
    *(localWriteA_0_0_21_0 + 0) = a_0_0_21_0;
    *(localWriteA_0_0_22_0 + 0) = a_0_0_22_0;
    *(localWriteA_0_0_23_0 + 0) = a_0_0_23_0;
    *(localWriteA_0_0_24_0 + 0) = a_0_0_24_0;
    *(localWriteA_0_0_25_0 + 0) = a_0_0_25_0;
    *(localWriteA_0_0_26_0 + 0) = a_0_0_26_0;
    *(localWriteA_0_0_27_0 + 0) = a_0_0_27_0;
    *(localWriteA_0_0_28_0 + 0) = a_0_0_28_0;
    *(localWriteA_0_0_29_0 + 0) = a_0_0_29_0;
    *(localWriteA_0_0_30_0 + 0) = a_0_0_30_0;
    *(localWriteA_0_0_31_0 + 0) = a_0_0_31_0;
    *(localWriteA_0_0_32_0 + 0) = a_0_0_32_0;
    *(localWriteA_0_0_33_0 + 0) = a_0_0_33_0;
    *(localWriteA_0_0_34_0 + 0) = a_0_0_34_0;
    *(localWriteA_0_0_35_0 + 0) = a_0_0_35_0;
    *(localWriteA_0_0_36_0 + 0) = a_0_0_36_0;
    *(localWriteA_0_0_37_0 + 0) = a_0_0_37_0;
    *(localWriteA_0_0_38_0 + 0) = a_0_0_38_0;
    *(localWriteA_0_0_39_0 + 0) = a_0_0_39_0;
    *(localWriteA_0_0_40_0 + 0) = a_0_0_40_0;
    *(localWriteA_0_0_41_0 + 0) = a_0_0_41_0;
    *(localWriteA_0_0_42_0 + 0) = a_0_0_42_0;
    *(localWriteA_0_0_43_0 + 0) = a_0_0_43_0;
    *(localWriteA_0_0_44_0 + 0) = a_0_0_44_0;
    *(localWriteA_0_0_45_0 + 0) = a_0_0_45_0;
    *(localWriteA_0_0_46_0 + 0) = a_0_0_46_0;
    *(localWriteA_0_0_47_0 + 0) = a_0_0_47_0;
    *(localWriteA_0_0_48_0 + 0) = a_0_0_48_0;
    *(localWriteA_0_0_49_0 + 0) = a_0_0_49_0;
    *(localWriteA_0_0_50_0 + 0) = a_0_0_50_0;
    *(localWriteA_0_0_51_0 + 0) = a_0_0_51_0;
    *(localWriteA_0_0_52_0 + 0) = a_0_0_52_0;
    *(localWriteA_0_0_53_0 + 0) = a_0_0_53_0;
    *(localWriteA_0_0_54_0 + 0) = a_0_0_54_0;
    *(localWriteA_0_0_55_0 + 0) = a_0_0_55_0;
    *(localWriteA_0_0_56_0 + 0) = a_0_0_56_0;
    *(localWriteA_0_0_57_0 + 0) = a_0_0_57_0;
    *(localWriteA_0_0_58_0 + 0) = a_0_0_58_0;
    *(localWriteA_0_0_59_0 + 0) = a_0_0_59_0;
    *(localWriteA_0_0_60_0 + 0) = a_0_0_60_0;
    *(localWriteA_0_0_61_0 + 0) = a_0_0_61_0;
    *(localWriteA_0_0_62_0 + 0) = a_0_0_62_0;
    *(localWriteA_0_0_63_0 + 0) = a_0_0_63_0;
#pragma clang diagnostic pop


    /* local write b */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
#pragma clang diagnostic pop


    /* local write swap a */

    localWriteOffsetA_0_0_0_0 = (localWriteOffsetA_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_1_0 = (localWriteOffsetA_0_0_1_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_2_0 = (localWriteOffsetA_0_0_2_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_3_0 = (localWriteOffsetA_0_0_3_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_4_0 = (localWriteOffsetA_0_0_4_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_5_0 = (localWriteOffsetA_0_0_5_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_6_0 = (localWriteOffsetA_0_0_6_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_7_0 = (localWriteOffsetA_0_0_7_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_8_0 = (localWriteOffsetA_0_0_8_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_9_0 = (localWriteOffsetA_0_0_9_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_10_0 = (localWriteOffsetA_0_0_10_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_11_0 = (localWriteOffsetA_0_0_11_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_12_0 = (localWriteOffsetA_0_0_12_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_13_0 = (localWriteOffsetA_0_0_13_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_14_0 = (localWriteOffsetA_0_0_14_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_15_0 = (localWriteOffsetA_0_0_15_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_16_0 = (localWriteOffsetA_0_0_16_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_17_0 = (localWriteOffsetA_0_0_17_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_18_0 = (localWriteOffsetA_0_0_18_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_19_0 = (localWriteOffsetA_0_0_19_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_20_0 = (localWriteOffsetA_0_0_20_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_21_0 = (localWriteOffsetA_0_0_21_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_22_0 = (localWriteOffsetA_0_0_22_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_23_0 = (localWriteOffsetA_0_0_23_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_24_0 = (localWriteOffsetA_0_0_24_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_25_0 = (localWriteOffsetA_0_0_25_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_26_0 = (localWriteOffsetA_0_0_26_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_27_0 = (localWriteOffsetA_0_0_27_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_28_0 = (localWriteOffsetA_0_0_28_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_29_0 = (localWriteOffsetA_0_0_29_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_30_0 = (localWriteOffsetA_0_0_30_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_31_0 = (localWriteOffsetA_0_0_31_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_32_0 = (localWriteOffsetA_0_0_32_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_33_0 = (localWriteOffsetA_0_0_33_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_34_0 = (localWriteOffsetA_0_0_34_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_35_0 = (localWriteOffsetA_0_0_35_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_36_0 = (localWriteOffsetA_0_0_36_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_37_0 = (localWriteOffsetA_0_0_37_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_38_0 = (localWriteOffsetA_0_0_38_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_39_0 = (localWriteOffsetA_0_0_39_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_40_0 = (localWriteOffsetA_0_0_40_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_41_0 = (localWriteOffsetA_0_0_41_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_42_0 = (localWriteOffsetA_0_0_42_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_43_0 = (localWriteOffsetA_0_0_43_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_44_0 = (localWriteOffsetA_0_0_44_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_45_0 = (localWriteOffsetA_0_0_45_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_46_0 = (localWriteOffsetA_0_0_46_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_47_0 = (localWriteOffsetA_0_0_47_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_48_0 = (localWriteOffsetA_0_0_48_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_49_0 = (localWriteOffsetA_0_0_49_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_50_0 = (localWriteOffsetA_0_0_50_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_51_0 = (localWriteOffsetA_0_0_51_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_52_0 = (localWriteOffsetA_0_0_52_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_53_0 = (localWriteOffsetA_0_0_53_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_54_0 = (localWriteOffsetA_0_0_54_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_55_0 = (localWriteOffsetA_0_0_55_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_56_0 = (localWriteOffsetA_0_0_56_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_57_0 = (localWriteOffsetA_0_0_57_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_58_0 = (localWriteOffsetA_0_0_58_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_59_0 = (localWriteOffsetA_0_0_59_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_60_0 = (localWriteOffsetA_0_0_60_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_61_0 = (localWriteOffsetA_0_0_61_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_62_0 = (localWriteOffsetA_0_0_62_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_63_0 = (localWriteOffsetA_0_0_63_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);


    /* local write swap b */

    localWriteOffsetB_0_0_0_0 = (localWriteOffsetB_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);


    /* local write init pointers A */
    localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
    localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
    localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
    localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);
    localWriteA_0_0_4_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_4_0);
    localWriteA_0_0_5_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_5_0);
    localWriteA_0_0_6_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_6_0);
    localWriteA_0_0_7_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_7_0);
    localWriteA_0_0_8_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_8_0);
    localWriteA_0_0_9_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_9_0);
    localWriteA_0_0_10_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_10_0);
    localWriteA_0_0_11_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_11_0);
    localWriteA_0_0_12_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_12_0);
    localWriteA_0_0_13_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_13_0);
    localWriteA_0_0_14_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_14_0);
    localWriteA_0_0_15_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_15_0);
    localWriteA_0_0_16_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_16_0);
    localWriteA_0_0_17_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_17_0);
    localWriteA_0_0_18_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_18_0);
    localWriteA_0_0_19_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_19_0);
    localWriteA_0_0_20_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_20_0);
    localWriteA_0_0_21_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_21_0);
    localWriteA_0_0_22_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_22_0);
    localWriteA_0_0_23_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_23_0);
    localWriteA_0_0_24_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_24_0);
    localWriteA_0_0_25_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_25_0);
    localWriteA_0_0_26_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_26_0);
    localWriteA_0_0_27_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_27_0);
    localWriteA_0_0_28_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_28_0);
    localWriteA_0_0_29_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_29_0);
    localWriteA_0_0_30_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_30_0);
    localWriteA_0_0_31_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_31_0);
    localWriteA_0_0_32_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_32_0);
    localWriteA_0_0_33_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_33_0);
    localWriteA_0_0_34_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_34_0);
    localWriteA_0_0_35_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_35_0);
    localWriteA_0_0_36_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_36_0);
    localWriteA_0_0_37_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_37_0);
    localWriteA_0_0_38_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_38_0);
    localWriteA_0_0_39_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_39_0);
    localWriteA_0_0_40_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_40_0);
    localWriteA_0_0_41_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_41_0);
    localWriteA_0_0_42_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_42_0);
    localWriteA_0_0_43_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_43_0);
    localWriteA_0_0_44_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_44_0);
    localWriteA_0_0_45_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_45_0);
    localWriteA_0_0_46_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_46_0);
    localWriteA_0_0_47_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_47_0);
    localWriteA_0_0_48_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_48_0);
    localWriteA_0_0_49_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_49_0);
    localWriteA_0_0_50_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_50_0);
    localWriteA_0_0_51_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_51_0);
    localWriteA_0_0_52_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_52_0);
    localWriteA_0_0_53_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_53_0);
    localWriteA_0_0_54_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_54_0);
    localWriteA_0_0_55_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_55_0);
    localWriteA_0_0_56_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_56_0);
    localWriteA_0_0_57_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_57_0);
    localWriteA_0_0_58_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_58_0);
    localWriteA_0_0_59_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_59_0);
    localWriteA_0_0_60_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_60_0);
    localWriteA_0_0_61_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_61_0);
    localWriteA_0_0_62_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_62_0);
    localWriteA_0_0_63_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_63_0);


    /* local write init pointers B */
    localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);


    __syncthreads(); //


    /* local read prefetch a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read prefetch b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);

  } // end PrefetchGlobalRead
  else { // still need to initC even if skipped prefetch

  rC[0] = SCALAR_ZERO;
  }


  /******************************************/
  /* Unrolled Loop(s) - Begin               */
  /******************************************/

  while (numIterL-- > 1) {


    /******************************************/
    /* Unroll Loop 1/1 - Begin                */
    /******************************************/



    /* global read A */
    a_0_0_0_0 = *(globalReadA_0_0_0_0 + 0);
    a_0_0_1_0 = *(globalReadA_0_0_1_0 + 0);
    a_0_0_2_0 = *(globalReadA_0_0_2_0 + 0);
    a_0_0_3_0 = *(globalReadA_0_0_3_0 + 0);
    a_0_0_4_0 = *(globalReadA_0_0_4_0 + 0);
    a_0_0_5_0 = *(globalReadA_0_0_5_0 + 0);
    a_0_0_6_0 = *(globalReadA_0_0_6_0 + 0);
    a_0_0_7_0 = *(globalReadA_0_0_7_0 + 0);
    a_0_0_8_0 = *(globalReadA_0_0_8_0 + 0);
    a_0_0_9_0 = *(globalReadA_0_0_9_0 + 0);
    a_0_0_10_0 = *(globalReadA_0_0_10_0 + 0);
    a_0_0_11_0 = *(globalReadA_0_0_11_0 + 0);
    a_0_0_12_0 = *(globalReadA_0_0_12_0 + 0);
    a_0_0_13_0 = *(globalReadA_0_0_13_0 + 0);
    a_0_0_14_0 = *(globalReadA_0_0_14_0 + 0);
    a_0_0_15_0 = *(globalReadA_0_0_15_0 + 0);
    a_0_0_16_0 = *(globalReadA_0_0_16_0 + 0);
    a_0_0_17_0 = *(globalReadA_0_0_17_0 + 0);
    a_0_0_18_0 = *(globalReadA_0_0_18_0 + 0);
    a_0_0_19_0 = *(globalReadA_0_0_19_0 + 0);
    a_0_0_20_0 = *(globalReadA_0_0_20_0 + 0);
    a_0_0_21_0 = *(globalReadA_0_0_21_0 + 0);
    a_0_0_22_0 = *(globalReadA_0_0_22_0 + 0);
    a_0_0_23_0 = *(globalReadA_0_0_23_0 + 0);
    a_0_0_24_0 = *(globalReadA_0_0_24_0 + 0);
    a_0_0_25_0 = *(globalReadA_0_0_25_0 + 0);
    a_0_0_26_0 = *(globalReadA_0_0_26_0 + 0);
    a_0_0_27_0 = *(globalReadA_0_0_27_0 + 0);
    a_0_0_28_0 = *(globalReadA_0_0_28_0 + 0);
    a_0_0_29_0 = *(globalReadA_0_0_29_0 + 0);
    a_0_0_30_0 = *(globalReadA_0_0_30_0 + 0);
    a_0_0_31_0 = *(globalReadA_0_0_31_0 + 0);
    a_0_0_32_0 = *(globalReadA_0_0_32_0 + 0);
    a_0_0_33_0 = *(globalReadA_0_0_33_0 + 0);
    a_0_0_34_0 = *(globalReadA_0_0_34_0 + 0);
    a_0_0_35_0 = *(globalReadA_0_0_35_0 + 0);
    a_0_0_36_0 = *(globalReadA_0_0_36_0 + 0);
    a_0_0_37_0 = *(globalReadA_0_0_37_0 + 0);
    a_0_0_38_0 = *(globalReadA_0_0_38_0 + 0);
    a_0_0_39_0 = *(globalReadA_0_0_39_0 + 0);
    a_0_0_40_0 = *(globalReadA_0_0_40_0 + 0);
    a_0_0_41_0 = *(globalReadA_0_0_41_0 + 0);
    a_0_0_42_0 = *(globalReadA_0_0_42_0 + 0);
    a_0_0_43_0 = *(globalReadA_0_0_43_0 + 0);
    a_0_0_44_0 = *(globalReadA_0_0_44_0 + 0);
    a_0_0_45_0 = *(globalReadA_0_0_45_0 + 0);
    a_0_0_46_0 = *(globalReadA_0_0_46_0 + 0);
    a_0_0_47_0 = *(globalReadA_0_0_47_0 + 0);
    a_0_0_48_0 = *(globalReadA_0_0_48_0 + 0);
    a_0_0_49_0 = *(globalReadA_0_0_49_0 + 0);
    a_0_0_50_0 = *(globalReadA_0_0_50_0 + 0);
    a_0_0_51_0 = *(globalReadA_0_0_51_0 + 0);
    a_0_0_52_0 = *(globalReadA_0_0_52_0 + 0);
    a_0_0_53_0 = *(globalReadA_0_0_53_0 + 0);
    a_0_0_54_0 = *(globalReadA_0_0_54_0 + 0);
    a_0_0_55_0 = *(globalReadA_0_0_55_0 + 0);
    a_0_0_56_0 = *(globalReadA_0_0_56_0 + 0);
    a_0_0_57_0 = *(globalReadA_0_0_57_0 + 0);
    a_0_0_58_0 = *(globalReadA_0_0_58_0 + 0);
    a_0_0_59_0 = *(globalReadA_0_0_59_0 + 0);
    a_0_0_60_0 = *(globalReadA_0_0_60_0 + 0);
    a_0_0_61_0 = *(globalReadA_0_0_61_0 + 0);
    a_0_0_62_0 = *(globalReadA_0_0_62_0 + 0);
    a_0_0_63_0 = *(globalReadA_0_0_63_0 + 0);

    /* global read B */
    b_0_0_0_0 = *(globalReadB_0_0_0_0 + 0);

    /* global read inc A for sumL */
    globalReadA_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_0_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_0_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_1_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_1_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_1_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_2_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_2_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_2_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_3_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_3_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_3_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_4_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_4_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_4_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_5_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_5_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_5_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_6_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_6_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_6_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_7_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_7_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_7_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_8_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_8_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_8_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_9_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_9_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_9_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_10_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_10_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_10_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_11_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_11_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_11_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_12_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_12_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_12_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_13_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_13_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_13_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_14_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_14_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_14_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_15_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_15_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_15_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_16_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_16_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_16_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_17_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_17_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_17_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_18_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_18_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_18_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_19_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_19_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_19_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_20_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_20_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_20_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_21_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_21_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_21_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_22_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_22_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_22_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_23_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_23_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_23_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_24_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_24_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_24_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_25_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_25_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_25_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_26_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_26_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_26_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_27_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_27_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_27_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_28_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_28_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_28_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_29_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_29_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_29_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_30_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_30_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_30_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_31_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_31_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_31_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_32_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_32_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_32_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_33_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_33_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_33_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_34_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_34_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_34_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_35_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_35_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_35_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_36_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_36_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_36_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_37_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_37_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_37_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_38_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_38_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_38_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_39_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_39_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_39_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_40_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_40_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_40_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_41_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_41_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_41_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_42_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_42_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_42_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_43_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_43_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_43_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_44_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_44_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_44_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_45_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_45_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_45_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_46_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_46_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_46_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_47_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_47_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_47_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_48_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_48_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_48_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_49_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_49_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_49_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_50_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_50_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_50_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_51_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_51_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_51_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_52_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_52_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_52_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_53_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_53_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_53_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_54_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_54_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_54_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_55_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_55_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_55_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_56_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_56_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_56_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_57_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_57_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_57_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_58_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_58_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_58_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_59_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_59_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_59_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_60_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_60_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_60_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_61_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_61_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_61_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_62_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_62_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_62_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_63_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_63_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_63_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }

    /* global read inc B for sumL */
    globalReadB_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_0_0) + 1*globalReadIncBL);
    if ((numIterL) == staggerUIter) {
      globalReadB_0_0_0_0 -= (origNumIter * globalReadIncBL); // wrap staggered offset back to row start
    }




    /* iter 0 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 1 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 2 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 3 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 4 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 5 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 6 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 7 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 8 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 9 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 10 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 11 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 12 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 13 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 14 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 15 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 16 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 17 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 18 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 19 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 20 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 21 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 22 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 23 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 24 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 25 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 26 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 27 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 28 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 29 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 30 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 31 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 32 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 33 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 34 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 35 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 36 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 37 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 38 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 39 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 40 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 41 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 42 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 43 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 44 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 45 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 46 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 47 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 48 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 49 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 50 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 51 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 52 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 53 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 54 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 55 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 56 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 57 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 58 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 59 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 60 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 61 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 62 (localWrite + swap local pointers iteration) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

/* local write A */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
    *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
    *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
    *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
    *(localWriteA_0_0_4_0 + 0) = a_0_0_4_0;
    *(localWriteA_0_0_5_0 + 0) = a_0_0_5_0;
    *(localWriteA_0_0_6_0 + 0) = a_0_0_6_0;
    *(localWriteA_0_0_7_0 + 0) = a_0_0_7_0;
    *(localWriteA_0_0_8_0 + 0) = a_0_0_8_0;
    *(localWriteA_0_0_9_0 + 0) = a_0_0_9_0;
    *(localWriteA_0_0_10_0 + 0) = a_0_0_10_0;
    *(localWriteA_0_0_11_0 + 0) = a_0_0_11_0;
    *(localWriteA_0_0_12_0 + 0) = a_0_0_12_0;
    *(localWriteA_0_0_13_0 + 0) = a_0_0_13_0;
    *(localWriteA_0_0_14_0 + 0) = a_0_0_14_0;
    *(localWriteA_0_0_15_0 + 0) = a_0_0_15_0;
    *(localWriteA_0_0_16_0 + 0) = a_0_0_16_0;
    *(localWriteA_0_0_17_0 + 0) = a_0_0_17_0;
    *(localWriteA_0_0_18_0 + 0) = a_0_0_18_0;
    *(localWriteA_0_0_19_0 + 0) = a_0_0_19_0;
    *(localWriteA_0_0_20_0 + 0) = a_0_0_20_0;
    *(localWriteA_0_0_21_0 + 0) = a_0_0_21_0;
    *(localWriteA_0_0_22_0 + 0) = a_0_0_22_0;
    *(localWriteA_0_0_23_0 + 0) = a_0_0_23_0;
    *(localWriteA_0_0_24_0 + 0) = a_0_0_24_0;
    *(localWriteA_0_0_25_0 + 0) = a_0_0_25_0;
    *(localWriteA_0_0_26_0 + 0) = a_0_0_26_0;
    *(localWriteA_0_0_27_0 + 0) = a_0_0_27_0;
    *(localWriteA_0_0_28_0 + 0) = a_0_0_28_0;
    *(localWriteA_0_0_29_0 + 0) = a_0_0_29_0;
    *(localWriteA_0_0_30_0 + 0) = a_0_0_30_0;
    *(localWriteA_0_0_31_0 + 0) = a_0_0_31_0;
    *(localWriteA_0_0_32_0 + 0) = a_0_0_32_0;
    *(localWriteA_0_0_33_0 + 0) = a_0_0_33_0;
    *(localWriteA_0_0_34_0 + 0) = a_0_0_34_0;
    *(localWriteA_0_0_35_0 + 0) = a_0_0_35_0;
    *(localWriteA_0_0_36_0 + 0) = a_0_0_36_0;
    *(localWriteA_0_0_37_0 + 0) = a_0_0_37_0;
    *(localWriteA_0_0_38_0 + 0) = a_0_0_38_0;
    *(localWriteA_0_0_39_0 + 0) = a_0_0_39_0;
    *(localWriteA_0_0_40_0 + 0) = a_0_0_40_0;
    *(localWriteA_0_0_41_0 + 0) = a_0_0_41_0;
    *(localWriteA_0_0_42_0 + 0) = a_0_0_42_0;
    *(localWriteA_0_0_43_0 + 0) = a_0_0_43_0;
    *(localWriteA_0_0_44_0 + 0) = a_0_0_44_0;
    *(localWriteA_0_0_45_0 + 0) = a_0_0_45_0;
    *(localWriteA_0_0_46_0 + 0) = a_0_0_46_0;
    *(localWriteA_0_0_47_0 + 0) = a_0_0_47_0;
    *(localWriteA_0_0_48_0 + 0) = a_0_0_48_0;
    *(localWriteA_0_0_49_0 + 0) = a_0_0_49_0;
    *(localWriteA_0_0_50_0 + 0) = a_0_0_50_0;
    *(localWriteA_0_0_51_0 + 0) = a_0_0_51_0;
    *(localWriteA_0_0_52_0 + 0) = a_0_0_52_0;
    *(localWriteA_0_0_53_0 + 0) = a_0_0_53_0;
    *(localWriteA_0_0_54_0 + 0) = a_0_0_54_0;
    *(localWriteA_0_0_55_0 + 0) = a_0_0_55_0;
    *(localWriteA_0_0_56_0 + 0) = a_0_0_56_0;
    *(localWriteA_0_0_57_0 + 0) = a_0_0_57_0;
    *(localWriteA_0_0_58_0 + 0) = a_0_0_58_0;
    *(localWriteA_0_0_59_0 + 0) = a_0_0_59_0;
    *(localWriteA_0_0_60_0 + 0) = a_0_0_60_0;
    *(localWriteA_0_0_61_0 + 0) = a_0_0_61_0;
    *(localWriteA_0_0_62_0 + 0) = a_0_0_62_0;
    *(localWriteA_0_0_63_0 + 0) = a_0_0_63_0;
#pragma clang diagnostic pop

/* local write B */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
#pragma clang diagnostic pop

    /* local write swap offsets a */
    localWriteOffsetA_0_0_0_0 = (localWriteOffsetA_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_1_0 = (localWriteOffsetA_0_0_1_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_2_0 = (localWriteOffsetA_0_0_2_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_3_0 = (localWriteOffsetA_0_0_3_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_4_0 = (localWriteOffsetA_0_0_4_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_5_0 = (localWriteOffsetA_0_0_5_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_6_0 = (localWriteOffsetA_0_0_6_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_7_0 = (localWriteOffsetA_0_0_7_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_8_0 = (localWriteOffsetA_0_0_8_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_9_0 = (localWriteOffsetA_0_0_9_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_10_0 = (localWriteOffsetA_0_0_10_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_11_0 = (localWriteOffsetA_0_0_11_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_12_0 = (localWriteOffsetA_0_0_12_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_13_0 = (localWriteOffsetA_0_0_13_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_14_0 = (localWriteOffsetA_0_0_14_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_15_0 = (localWriteOffsetA_0_0_15_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_16_0 = (localWriteOffsetA_0_0_16_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_17_0 = (localWriteOffsetA_0_0_17_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_18_0 = (localWriteOffsetA_0_0_18_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_19_0 = (localWriteOffsetA_0_0_19_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_20_0 = (localWriteOffsetA_0_0_20_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_21_0 = (localWriteOffsetA_0_0_21_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_22_0 = (localWriteOffsetA_0_0_22_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_23_0 = (localWriteOffsetA_0_0_23_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_24_0 = (localWriteOffsetA_0_0_24_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_25_0 = (localWriteOffsetA_0_0_25_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_26_0 = (localWriteOffsetA_0_0_26_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_27_0 = (localWriteOffsetA_0_0_27_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_28_0 = (localWriteOffsetA_0_0_28_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_29_0 = (localWriteOffsetA_0_0_29_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_30_0 = (localWriteOffsetA_0_0_30_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_31_0 = (localWriteOffsetA_0_0_31_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_32_0 = (localWriteOffsetA_0_0_32_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_33_0 = (localWriteOffsetA_0_0_33_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_34_0 = (localWriteOffsetA_0_0_34_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_35_0 = (localWriteOffsetA_0_0_35_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_36_0 = (localWriteOffsetA_0_0_36_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_37_0 = (localWriteOffsetA_0_0_37_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_38_0 = (localWriteOffsetA_0_0_38_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_39_0 = (localWriteOffsetA_0_0_39_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_40_0 = (localWriteOffsetA_0_0_40_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_41_0 = (localWriteOffsetA_0_0_41_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_42_0 = (localWriteOffsetA_0_0_42_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_43_0 = (localWriteOffsetA_0_0_43_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_44_0 = (localWriteOffsetA_0_0_44_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_45_0 = (localWriteOffsetA_0_0_45_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_46_0 = (localWriteOffsetA_0_0_46_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_47_0 = (localWriteOffsetA_0_0_47_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_48_0 = (localWriteOffsetA_0_0_48_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_49_0 = (localWriteOffsetA_0_0_49_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_50_0 = (localWriteOffsetA_0_0_50_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_51_0 = (localWriteOffsetA_0_0_51_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_52_0 = (localWriteOffsetA_0_0_52_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_53_0 = (localWriteOffsetA_0_0_53_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_54_0 = (localWriteOffsetA_0_0_54_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_55_0 = (localWriteOffsetA_0_0_55_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_56_0 = (localWriteOffsetA_0_0_56_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_57_0 = (localWriteOffsetA_0_0_57_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_58_0 = (localWriteOffsetA_0_0_58_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_59_0 = (localWriteOffsetA_0_0_59_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_60_0 = (localWriteOffsetA_0_0_60_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_61_0 = (localWriteOffsetA_0_0_61_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_62_0 = (localWriteOffsetA_0_0_62_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_63_0 = (localWriteOffsetA_0_0_63_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write swap offsets b */
    localWriteOffsetB_0_0_0_0 = (localWriteOffsetB_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write init pointers A */
    localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
    localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
    localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
    localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);
    localWriteA_0_0_4_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_4_0);
    localWriteA_0_0_5_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_5_0);
    localWriteA_0_0_6_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_6_0);
    localWriteA_0_0_7_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_7_0);
    localWriteA_0_0_8_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_8_0);
    localWriteA_0_0_9_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_9_0);
    localWriteA_0_0_10_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_10_0);
    localWriteA_0_0_11_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_11_0);
    localWriteA_0_0_12_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_12_0);
    localWriteA_0_0_13_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_13_0);
    localWriteA_0_0_14_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_14_0);
    localWriteA_0_0_15_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_15_0);
    localWriteA_0_0_16_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_16_0);
    localWriteA_0_0_17_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_17_0);
    localWriteA_0_0_18_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_18_0);
    localWriteA_0_0_19_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_19_0);
    localWriteA_0_0_20_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_20_0);
    localWriteA_0_0_21_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_21_0);
    localWriteA_0_0_22_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_22_0);
    localWriteA_0_0_23_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_23_0);
    localWriteA_0_0_24_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_24_0);
    localWriteA_0_0_25_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_25_0);
    localWriteA_0_0_26_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_26_0);
    localWriteA_0_0_27_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_27_0);
    localWriteA_0_0_28_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_28_0);
    localWriteA_0_0_29_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_29_0);
    localWriteA_0_0_30_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_30_0);
    localWriteA_0_0_31_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_31_0);
    localWriteA_0_0_32_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_32_0);
    localWriteA_0_0_33_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_33_0);
    localWriteA_0_0_34_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_34_0);
    localWriteA_0_0_35_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_35_0);
    localWriteA_0_0_36_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_36_0);
    localWriteA_0_0_37_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_37_0);
    localWriteA_0_0_38_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_38_0);
    localWriteA_0_0_39_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_39_0);
    localWriteA_0_0_40_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_40_0);
    localWriteA_0_0_41_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_41_0);
    localWriteA_0_0_42_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_42_0);
    localWriteA_0_0_43_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_43_0);
    localWriteA_0_0_44_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_44_0);
    localWriteA_0_0_45_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_45_0);
    localWriteA_0_0_46_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_46_0);
    localWriteA_0_0_47_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_47_0);
    localWriteA_0_0_48_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_48_0);
    localWriteA_0_0_49_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_49_0);
    localWriteA_0_0_50_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_50_0);
    localWriteA_0_0_51_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_51_0);
    localWriteA_0_0_52_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_52_0);
    localWriteA_0_0_53_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_53_0);
    localWriteA_0_0_54_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_54_0);
    localWriteA_0_0_55_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_55_0);
    localWriteA_0_0_56_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_56_0);
    localWriteA_0_0_57_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_57_0);
    localWriteA_0_0_58_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_58_0);
    localWriteA_0_0_59_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_59_0);
    localWriteA_0_0_60_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_60_0);
    localWriteA_0_0_61_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_61_0);
    localWriteA_0_0_62_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_62_0);
    localWriteA_0_0_63_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_63_0);

    /* local write init pointers B */
    localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);

    /* local read swap offsets a */
    localReadOffsetA = (localReadOffsetA + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local read swap offsets b */
    localReadOffsetB = (localReadOffsetB + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local read init pointers a */
    localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

    /* local read init pointers b */
    localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);
    MAC_1x1


    /* iter 63 */

    __syncthreads(); //

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK




    /******************************************/
    /* Unrolled Loop - End                    */
    /******************************************/

  }


  if (numIterMyWg >= 1) {


    /* iter 0 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 1 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 2 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 3 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 4 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 5 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 6 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 7 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 8 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 9 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 10 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 11 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 12 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 13 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 14 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 15 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 16 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 17 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 18 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 19 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 20 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 21 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 22 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 23 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 24 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 25 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 26 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 27 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 28 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 29 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 30 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 31 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 32 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 33 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 34 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 35 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 36 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 37 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 38 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 39 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 40 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 41 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 42 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 43 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 44 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 45 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 46 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 47 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 48 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 49 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 50 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 51 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 52 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 53 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 54 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 55 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 56 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 57 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 58 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 59 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 60 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 61 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 62 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 63 */


    MAC_1x1_BLK

  } // end unroll


  /******************************************/
  /* Tail Loop                              */
  /******************************************/


  /* local write reset offsets a */

  localWriteOffsetA_0_0_0_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_1_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_2_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_3_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_4_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_5_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_6_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_7_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_8_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_9_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_10_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_11_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_12_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_13_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_14_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_15_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_16_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_17_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_18_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_19_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_20_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_21_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_22_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_23_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_24_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_25_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_26_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_27_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_28_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_29_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_30_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_31_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_32_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_33_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_34_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_35_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_36_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_37_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_38_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_39_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_40_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_41_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_42_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_43_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_44_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_45_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_46_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_47_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_48_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_49_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_50_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_51_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_52_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_53_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_54_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_55_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_56_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_57_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_58_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_59_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_60_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_61_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_62_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_63_0 %= LDS_OFFSET_BLK;


  /* local write reset offsets b */

  localWriteOffsetB_0_0_0_0 %= LDS_OFFSET_BLK;


  /* Compute tail loop num iter */
  numIterL = (((sizeL % LOCAL_DEPTHU) + LOCAL_SPLITU - 1) / LOCAL_SPLITU);
  if (gsuSumIdx != numIterPerWgRemainder) {
    numIterL = 0;
  }


  /* remove stagger offsets for tail loop */

  globalReadA_0_0_0_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_1_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_2_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_3_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_4_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_5_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_6_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_7_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_8_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_9_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_10_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_11_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_12_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_13_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_14_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_15_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_16_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_17_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_18_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_19_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_20_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_21_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_22_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_23_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_24_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_25_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_26_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_27_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_28_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_29_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_30_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_31_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_32_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_33_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_34_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_35_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_36_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_37_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_38_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_39_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_40_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_41_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_42_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_43_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_44_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_45_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_46_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_47_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_48_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_49_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_50_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_51_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_52_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_53_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_54_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_55_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_56_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_57_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_58_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_59_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_60_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_61_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_62_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_63_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset

  globalReadB_0_0_0_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncBL); // remove stagger offset


  /* Update M0 for DTLDS */



  /* global read a */


  /* global read A */
  a_0_0_0_0 = ( globalReadOffsetAL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_0_0 + 0);
  a_0_0_1_0 = ( globalReadOffsetAL_1_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_1_0 + 0);
  a_0_0_2_0 = ( globalReadOffsetAL_2_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_2_0 + 0);
  a_0_0_3_0 = ( globalReadOffsetAL_3_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_3_0 + 0);
  a_0_0_4_0 = ( globalReadOffsetAL_4_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_4_0 + 0);
  a_0_0_5_0 = ( globalReadOffsetAL_5_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_5_0 + 0);
  a_0_0_6_0 = ( globalReadOffsetAL_6_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_6_0 + 0);
  a_0_0_7_0 = ( globalReadOffsetAL_7_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_7_0 + 0);
  a_0_0_8_0 = ( globalReadOffsetAL_8_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_8_0 + 0);
  a_0_0_9_0 = ( globalReadOffsetAL_9_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_9_0 + 0);
  a_0_0_10_0 = ( globalReadOffsetAL_10_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_10_0 + 0);
  a_0_0_11_0 = ( globalReadOffsetAL_11_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_11_0 + 0);
  a_0_0_12_0 = ( globalReadOffsetAL_12_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_12_0 + 0);
  a_0_0_13_0 = ( globalReadOffsetAL_13_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_13_0 + 0);
  a_0_0_14_0 = ( globalReadOffsetAL_14_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_14_0 + 0);
  a_0_0_15_0 = ( globalReadOffsetAL_15_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_15_0 + 0);
  a_0_0_16_0 = ( globalReadOffsetAL_16_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_16_0 + 0);
  a_0_0_17_0 = ( globalReadOffsetAL_17_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_17_0 + 0);
  a_0_0_18_0 = ( globalReadOffsetAL_18_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_18_0 + 0);
  a_0_0_19_0 = ( globalReadOffsetAL_19_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_19_0 + 0);
  a_0_0_20_0 = ( globalReadOffsetAL_20_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_20_0 + 0);
  a_0_0_21_0 = ( globalReadOffsetAL_21_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_21_0 + 0);
  a_0_0_22_0 = ( globalReadOffsetAL_22_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_22_0 + 0);
  a_0_0_23_0 = ( globalReadOffsetAL_23_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_23_0 + 0);
  a_0_0_24_0 = ( globalReadOffsetAL_24_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_24_0 + 0);
  a_0_0_25_0 = ( globalReadOffsetAL_25_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_25_0 + 0);
  a_0_0_26_0 = ( globalReadOffsetAL_26_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_26_0 + 0);
  a_0_0_27_0 = ( globalReadOffsetAL_27_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_27_0 + 0);
  a_0_0_28_0 = ( globalReadOffsetAL_28_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_28_0 + 0);
  a_0_0_29_0 = ( globalReadOffsetAL_29_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_29_0 + 0);
  a_0_0_30_0 = ( globalReadOffsetAL_30_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_30_0 + 0);
  a_0_0_31_0 = ( globalReadOffsetAL_31_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_31_0 + 0);
  a_0_0_32_0 = ( globalReadOffsetAL_32_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_32_0 + 0);
  a_0_0_33_0 = ( globalReadOffsetAL_33_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_33_0 + 0);
  a_0_0_34_0 = ( globalReadOffsetAL_34_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_34_0 + 0);
  a_0_0_35_0 = ( globalReadOffsetAL_35_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_35_0 + 0);
  a_0_0_36_0 = ( globalReadOffsetAL_36_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_36_0 + 0);
  a_0_0_37_0 = ( globalReadOffsetAL_37_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_37_0 + 0);
  a_0_0_38_0 = ( globalReadOffsetAL_38_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_38_0 + 0);
  a_0_0_39_0 = ( globalReadOffsetAL_39_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_39_0 + 0);
  a_0_0_40_0 = ( globalReadOffsetAL_40_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_40_0 + 0);
  a_0_0_41_0 = ( globalReadOffsetAL_41_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_41_0 + 0);
  a_0_0_42_0 = ( globalReadOffsetAL_42_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_42_0 + 0);
  a_0_0_43_0 = ( globalReadOffsetAL_43_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_43_0 + 0);
  a_0_0_44_0 = ( globalReadOffsetAL_44_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_44_0 + 0);
  a_0_0_45_0 = ( globalReadOffsetAL_45_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_45_0 + 0);
  a_0_0_46_0 = ( globalReadOffsetAL_46_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_46_0 + 0);
  a_0_0_47_0 = ( globalReadOffsetAL_47_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_47_0 + 0);
  a_0_0_48_0 = ( globalReadOffsetAL_48_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_48_0 + 0);
  a_0_0_49_0 = ( globalReadOffsetAL_49_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_49_0 + 0);
  a_0_0_50_0 = ( globalReadOffsetAL_50_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_50_0 + 0);
  a_0_0_51_0 = ( globalReadOffsetAL_51_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_51_0 + 0);
  a_0_0_52_0 = ( globalReadOffsetAL_52_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_52_0 + 0);
  a_0_0_53_0 = ( globalReadOffsetAL_53_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_53_0 + 0);
  a_0_0_54_0 = ( globalReadOffsetAL_54_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_54_0 + 0);
  a_0_0_55_0 = ( globalReadOffsetAL_55_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_55_0 + 0);
  a_0_0_56_0 = ( globalReadOffsetAL_56_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_56_0 + 0);
  a_0_0_57_0 = ( globalReadOffsetAL_57_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_57_0 + 0);
  a_0_0_58_0 = ( globalReadOffsetAL_58_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_58_0 + 0);
  a_0_0_59_0 = ( globalReadOffsetAL_59_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_59_0 + 0);
  a_0_0_60_0 = ( globalReadOffsetAL_60_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_60_0 + 0);
  a_0_0_61_0 = ( globalReadOffsetAL_61_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_61_0 + 0);
  a_0_0_62_0 = ( globalReadOffsetAL_62_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_62_0 + 0);
  a_0_0_63_0 = ( globalReadOffsetAL_63_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_63_0 + 0);


  /* Update M0 for DTLDS */



  /* global read b */


  /* global read B */
  b_0_0_0_0 = ( globalReadOffsetBL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadB_0_0_0_0 + 0);


  __syncthreads(); //


  /* local write init pointers A */
  localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
  localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
  localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
  localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);
  localWriteA_0_0_4_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_4_0);
  localWriteA_0_0_5_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_5_0);
  localWriteA_0_0_6_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_6_0);
  localWriteA_0_0_7_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_7_0);
  localWriteA_0_0_8_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_8_0);
  localWriteA_0_0_9_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_9_0);
  localWriteA_0_0_10_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_10_0);
  localWriteA_0_0_11_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_11_0);
  localWriteA_0_0_12_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_12_0);
  localWriteA_0_0_13_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_13_0);
  localWriteA_0_0_14_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_14_0);
  localWriteA_0_0_15_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_15_0);
  localWriteA_0_0_16_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_16_0);
  localWriteA_0_0_17_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_17_0);
  localWriteA_0_0_18_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_18_0);
  localWriteA_0_0_19_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_19_0);
  localWriteA_0_0_20_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_20_0);
  localWriteA_0_0_21_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_21_0);
  localWriteA_0_0_22_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_22_0);
  localWriteA_0_0_23_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_23_0);
  localWriteA_0_0_24_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_24_0);
  localWriteA_0_0_25_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_25_0);
  localWriteA_0_0_26_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_26_0);
  localWriteA_0_0_27_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_27_0);
  localWriteA_0_0_28_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_28_0);
  localWriteA_0_0_29_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_29_0);
  localWriteA_0_0_30_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_30_0);
  localWriteA_0_0_31_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_31_0);
  localWriteA_0_0_32_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_32_0);
  localWriteA_0_0_33_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_33_0);
  localWriteA_0_0_34_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_34_0);
  localWriteA_0_0_35_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_35_0);
  localWriteA_0_0_36_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_36_0);
  localWriteA_0_0_37_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_37_0);
  localWriteA_0_0_38_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_38_0);
  localWriteA_0_0_39_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_39_0);
  localWriteA_0_0_40_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_40_0);
  localWriteA_0_0_41_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_41_0);
  localWriteA_0_0_42_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_42_0);
  localWriteA_0_0_43_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_43_0);
  localWriteA_0_0_44_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_44_0);
  localWriteA_0_0_45_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_45_0);
  localWriteA_0_0_46_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_46_0);
  localWriteA_0_0_47_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_47_0);
  localWriteA_0_0_48_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_48_0);
  localWriteA_0_0_49_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_49_0);
  localWriteA_0_0_50_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_50_0);
  localWriteA_0_0_51_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_51_0);
  localWriteA_0_0_52_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_52_0);
  localWriteA_0_0_53_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_53_0);
  localWriteA_0_0_54_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_54_0);
  localWriteA_0_0_55_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_55_0);
  localWriteA_0_0_56_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_56_0);
  localWriteA_0_0_57_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_57_0);
  localWriteA_0_0_58_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_58_0);
  localWriteA_0_0_59_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_59_0);
  localWriteA_0_0_60_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_60_0);
  localWriteA_0_0_61_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_61_0);
  localWriteA_0_0_62_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_62_0);
  localWriteA_0_0_63_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_63_0);


  /* local write init pointers B */
  localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);


  /* local write a */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
  *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
  *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
  *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
  *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
  *(localWriteA_0_0_4_0 + 0) = a_0_0_4_0;
  *(localWriteA_0_0_5_0 + 0) = a_0_0_5_0;
  *(localWriteA_0_0_6_0 + 0) = a_0_0_6_0;
  *(localWriteA_0_0_7_0 + 0) = a_0_0_7_0;
  *(localWriteA_0_0_8_0 + 0) = a_0_0_8_0;
  *(localWriteA_0_0_9_0 + 0) = a_0_0_9_0;
  *(localWriteA_0_0_10_0 + 0) = a_0_0_10_0;
  *(localWriteA_0_0_11_0 + 0) = a_0_0_11_0;
  *(localWriteA_0_0_12_0 + 0) = a_0_0_12_0;
  *(localWriteA_0_0_13_0 + 0) = a_0_0_13_0;
  *(localWriteA_0_0_14_0 + 0) = a_0_0_14_0;
  *(localWriteA_0_0_15_0 + 0) = a_0_0_15_0;
  *(localWriteA_0_0_16_0 + 0) = a_0_0_16_0;
  *(localWriteA_0_0_17_0 + 0) = a_0_0_17_0;
  *(localWriteA_0_0_18_0 + 0) = a_0_0_18_0;
  *(localWriteA_0_0_19_0 + 0) = a_0_0_19_0;
  *(localWriteA_0_0_20_0 + 0) = a_0_0_20_0;
  *(localWriteA_0_0_21_0 + 0) = a_0_0_21_0;
  *(localWriteA_0_0_22_0 + 0) = a_0_0_22_0;
  *(localWriteA_0_0_23_0 + 0) = a_0_0_23_0;
  *(localWriteA_0_0_24_0 + 0) = a_0_0_24_0;
  *(localWriteA_0_0_25_0 + 0) = a_0_0_25_0;
  *(localWriteA_0_0_26_0 + 0) = a_0_0_26_0;
  *(localWriteA_0_0_27_0 + 0) = a_0_0_27_0;
  *(localWriteA_0_0_28_0 + 0) = a_0_0_28_0;
  *(localWriteA_0_0_29_0 + 0) = a_0_0_29_0;
  *(localWriteA_0_0_30_0 + 0) = a_0_0_30_0;
  *(localWriteA_0_0_31_0 + 0) = a_0_0_31_0;
  *(localWriteA_0_0_32_0 + 0) = a_0_0_32_0;
  *(localWriteA_0_0_33_0 + 0) = a_0_0_33_0;
  *(localWriteA_0_0_34_0 + 0) = a_0_0_34_0;
  *(localWriteA_0_0_35_0 + 0) = a_0_0_35_0;
  *(localWriteA_0_0_36_0 + 0) = a_0_0_36_0;
  *(localWriteA_0_0_37_0 + 0) = a_0_0_37_0;
  *(localWriteA_0_0_38_0 + 0) = a_0_0_38_0;
  *(localWriteA_0_0_39_0 + 0) = a_0_0_39_0;
  *(localWriteA_0_0_40_0 + 0) = a_0_0_40_0;
  *(localWriteA_0_0_41_0 + 0) = a_0_0_41_0;
  *(localWriteA_0_0_42_0 + 0) = a_0_0_42_0;
  *(localWriteA_0_0_43_0 + 0) = a_0_0_43_0;
  *(localWriteA_0_0_44_0 + 0) = a_0_0_44_0;
  *(localWriteA_0_0_45_0 + 0) = a_0_0_45_0;
  *(localWriteA_0_0_46_0 + 0) = a_0_0_46_0;
  *(localWriteA_0_0_47_0 + 0) = a_0_0_47_0;
  *(localWriteA_0_0_48_0 + 0) = a_0_0_48_0;
  *(localWriteA_0_0_49_0 + 0) = a_0_0_49_0;
  *(localWriteA_0_0_50_0 + 0) = a_0_0_50_0;
  *(localWriteA_0_0_51_0 + 0) = a_0_0_51_0;
  *(localWriteA_0_0_52_0 + 0) = a_0_0_52_0;
  *(localWriteA_0_0_53_0 + 0) = a_0_0_53_0;
  *(localWriteA_0_0_54_0 + 0) = a_0_0_54_0;
  *(localWriteA_0_0_55_0 + 0) = a_0_0_55_0;
  *(localWriteA_0_0_56_0 + 0) = a_0_0_56_0;
  *(localWriteA_0_0_57_0 + 0) = a_0_0_57_0;
  *(localWriteA_0_0_58_0 + 0) = a_0_0_58_0;
  *(localWriteA_0_0_59_0 + 0) = a_0_0_59_0;
  *(localWriteA_0_0_60_0 + 0) = a_0_0_60_0;
  *(localWriteA_0_0_61_0 + 0) = a_0_0_61_0;
  *(localWriteA_0_0_62_0 + 0) = a_0_0_62_0;
  *(localWriteA_0_0_63_0 + 0) = a_0_0_63_0;
#pragma clang diagnostic pop


  /* local write b */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
  *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
#pragma clang diagnostic pop


  __syncthreads(); //


  /* local read reset offsets a */

  localReadOffsetA %= LDS_OFFSET_BLK;


  /* local read reset offsets b */

  localReadOffsetB %= LDS_OFFSET_BLK;


  /* local read init pointers a */

  localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);


  /* local read init pointers b */

  localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);


  /* tail loop: macs */

  while (numIterL-- > 0) {


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1

  }




  /* not-LocalSplitU: global write indices */

  unsigned int flattenedGlobalC0 = (wg0I)*MT0I + (serial % SG0I)*VECTOR_WIDTH;
  unsigned int flattenedGlobalC1 = (wg1J)*MT1J + (serial / SG0I)*VECTOR_WIDTH;
  unsigned int globalC0I = flattenedGlobalC0;
  unsigned int globalC1J = flattenedGlobalC1;
  unsigned int globalCK = (wgK);


  /* not-LocalSplitU: global write */

  /* new vw0 offset - inc and extract tensor dims */
  globalC0I =   flattenedGlobalC0 +  0*SG0I*VECTOR_WIDTH;
  /* new vw1 offset - inc and extract tensor dims */
  globalC1J =   flattenedGlobalC1 + 0 + 0*SG1J*VECTOR_WIDTH;
  if (globalC0I < size0I) 
  {  if (globalC1J < size1J)
	 {  
	  D[gsuSumIdx + 1] = rC[0];
	  //atomicAdd(&(D[0]),rC[0]);
	  //TYPE_MAC_WRITE( D[ 0], C[ 0 ], alpha, rC[0], beta)
	  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I, (uint64_t) globalC1J, (uint64_t) globalCK) ], C[ GLOBAL_C( (uint64_t) globalC0I, (uint64_t) globalC1J, (uint64_t) globalCK) ], alpha, rC[0*VECTOR_WIDTH+0 + (0*VECTOR_WIDTH+0)*TT0I], beta)
    } 
  }
}

#undef UNROLL
#undef LOCAL_SPLITU
#undef LOCAL_DEPTHU
#undef SG0I
#undef SG1J
#undef TT0I
#undef TT1J
#undef MT0I
#undef MT1J
#undef NLCA
#undef NLCB
#undef NLPA
#undef NLPB
#undef LSCA
#undef LSPA
#undef LSCB
#undef LSPB
#undef GLOBAL_C
#undef GLOBAL_OFFSET_A
#undef GLOBAL_OFFSET_B
#undef DATA_TYPE
#undef DEST_DATA_TYPE
#undef COMPUTE_DATA_TYPE
#undef LDS_OFFSET_B
#undef LDS_OFFSET_BLK
#undef LDS_NUM_ELEMENTS
#undef NUM_THREADS
#undef WORK_GROUP_MAPPING
#undef VECTOR_WIDTH
#undef GLOBAL_LOAD_VECTOR_WIDTH_A
#undef GLOBAL_LOAD_VECTOR_WIDTH_B
#undef GLOBAL_WRITE_VECTOR_WIDTH
#undef MAC
#undef TYPE_MAC
#undef TYPE_MAC_WRITE
#undef GLOBAL_SPLITU
#undef SCALAR_ZERO
#undef SCALAR_OOB_DATA
#undef MAC_1x1
#undef MAC_1x1_BLK
#undef strideD0I
#undef strideC0I
#undef strideA0I
#undef strideB1J






  /******************************************/
  /* Function Prefix                        */
  /******************************************/



/* tile parameters */
#define NUM_THREADS  64
#define SG0I 64
#define SG1J 1
#define TT0I 1
#define TT1J 1
#define MT0I (SG0I*TT0I)
#define MT1J (SG1J*TT1J)
#define VECTOR_WIDTH 1
#define GLOBAL_LOAD_VECTOR_WIDTH_A 1
#define GLOBAL_LOAD_VECTOR_WIDTH_B 1
#define GLOBAL_WRITE_VECTOR_WIDTH 1

/* DepthU parameters*/
#define CPSV (NUM_THREADS / MT0I * VECTOR_WIDTH)
#define LOCAL_SPLITU 1
#define UNROLL 64
#define LOCAL_DEPTHU (LOCAL_SPLITU*UNROLL)
#define GLOBAL_SPLITU 3

/* other */
#define PAD 0
#define WORK_GROUP_MAPPING 4

/* num loads parallel and perpendicular to coalesced */
#define NLCA 1
#define NLCB 1
#define NLPA 64
#define NLPB 1

/* load sizes parallel and perpendicular to coalesced */
#define LSCA (MT0I/NLCA)
#define LSPA (LOCAL_DEPTHU/NLPA)
#define LSCB (MT1J/NLCB)
#define LSPB (LOCAL_DEPTHU/NLPB)
#define LVCA (LSCA/GLOBAL_LOAD_VECTOR_WIDTH_A)
#define LVCB (LSCB/GLOBAL_LOAD_VECTOR_WIDTH_B)
#define LVPA (LSPA/GLOBAL_LOAD_VECTOR_WIDTH_A)
#define LVPB (LSPB/GLOBAL_LOAD_VECTOR_WIDTH_B)
#define LDS_OFFSET_B 4096
#define LDS_NUM_ELEMENTS 12352
#define LDS_OFFSET_BLK 8192

/* global memory indices */
#define GLOBAL_D(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideD0I + (IDX1J)*strideD1J + (IDXK)*strideDK ))
#define GLOBAL_C(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideC0I + (IDX1J)*strideC1J + (IDXK)*strideCK ))
#define GLOBAL_OFFSET_A(IDX0I, IDXL, IDXK) (( (IDX0I)*strideA0I + (IDXL)*strideAL + (IDXK)*strideAK ))
#define GLOBAL_OFFSET_B(IDX1J, IDXL, IDXK) (( (IDX1J)*strideB1J + (IDXL)*strideBL + (IDXK)*strideBK ))

/* data types */
#define DATA_TYPE tensile_half
#define DEST_DATA_TYPE tensile_half
#define COMPUTE_DATA_TYPE tensile_half

  /* atomic add float */
#ifndef ATOMIC_FLOAT_FUNCTION
#define ATOMIC_FLOAT_FUNCTION

__device__ inline int atomicAddType(int *fPtr, int operand)
{
  return atomicAdd(fPtr,operand);
}

__device__ inline unsigned int atomicAddType(unsigned int *fPtr, unsigned int operand)
{
  return atomicAdd(fPtr,operand);
}

__device__ inline unsigned long long int atomicAddType(unsigned long long int *fPtr, unsigned long long int operand)
{
  return atomicAdd(fPtr,operand);
}

__device__ inline float atomicAddType(float *fPtr, float operand)
{
  return atomicAdd(fPtr,operand);
}

__device__ inline double atomicAddType(double *fPtr, double operand)
{
  return atomicAdd(fPtr,operand);
}

#endif
#define MAGIC_DIV1(dividend, magicNumber, magicShift) ((uint64_t)(dividend) * magicNumber >> magicShift)

/* MAC's */
#define MAC(A,B,DST) DST += static_cast<float>(A) * static_cast<float>(B)
#define TYPE_MAC(MULA,MULB,DST) DST = MAC(MULA,MULB,DST);
#define TYPE_MAC_WRITE(DST,SRC,ALPHA,REG,BETA) atomicAddType(&(DST), (REG));
/* 1x1 micro-tile */
#define MAC_1x1\
  TYPE_MAC(rA[0],rB[0],rC[0+0*TT0I]); \

#define MAC_1x1_BLK\
  TYPE_MAC(rA[0+TT0I],rB[0+TT1J],rC[0+0*TT0I]); \

/* hard-coded initial strides CD*/
/* hard-coded initial strides AB */
#define strideD0I 1
#define strideC0I 1
#define strideA0I 1
#define strideB1J 1


  /******************************************/
  /* Begin Kernel                           */
  /******************************************/

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
extern "C"
__global__ void Cijk_Ailk_Bjlk_HBH_MT64x1x64_SE_K1_WGM4(
  float *D,
  float const * __restrict__ C,
  tensile_half const * __restrict__ A,
  tensile_half const * __restrict__ B,
  tensile_half const alpha,
  tensile_half const beta,
  unsigned int const strideD1J,
  unsigned int const strideDK,
  unsigned int const strideC1J,
  unsigned int const strideCK,
  unsigned int const strideAL,
  unsigned int const strideAK,
  unsigned int const strideBL,
  unsigned int const strideBK,
  unsigned int const size0I,
  unsigned int const size1J,
  unsigned int const sizeK,
  unsigned int const sizeL,
  unsigned int staggerUIterParm,
  unsigned int problemNumGroupTiles0,
  unsigned int problemNumGroupTiles1,
  unsigned int magicNumberProblemNumGroupTiles0 )
#pragma clang diagnostic pop

 {


  /******************************************/
  /* Allocate Resources                     */
  /******************************************/

  unsigned int serial = hc_get_workitem_id(0);
  unsigned int sgId = serial / (SG0I*SG1J);
#define SCALAR_ZERO (tensile_half)(0)
#define SCALAR_OOB_DATA SCALAR_ZERO
  /* registers for MAC's */
  float rC[TT0I*TT1J];
  DATA_TYPE rA[TT0I*2];
  DATA_TYPE rB[TT1J*2];

  /* registers for global->local */
  DATA_TYPE a_0_0_0_0;
  DATA_TYPE a_0_0_1_0;
  DATA_TYPE a_0_0_2_0;
  DATA_TYPE a_0_0_3_0;
  DATA_TYPE a_0_0_4_0;
  DATA_TYPE a_0_0_5_0;
  DATA_TYPE a_0_0_6_0;
  DATA_TYPE a_0_0_7_0;
  DATA_TYPE a_0_0_8_0;
  DATA_TYPE a_0_0_9_0;
  DATA_TYPE a_0_0_10_0;
  DATA_TYPE a_0_0_11_0;
  DATA_TYPE a_0_0_12_0;
  DATA_TYPE a_0_0_13_0;
  DATA_TYPE a_0_0_14_0;
  DATA_TYPE a_0_0_15_0;
  DATA_TYPE a_0_0_16_0;
  DATA_TYPE a_0_0_17_0;
  DATA_TYPE a_0_0_18_0;
  DATA_TYPE a_0_0_19_0;
  DATA_TYPE a_0_0_20_0;
  DATA_TYPE a_0_0_21_0;
  DATA_TYPE a_0_0_22_0;
  DATA_TYPE a_0_0_23_0;
  DATA_TYPE a_0_0_24_0;
  DATA_TYPE a_0_0_25_0;
  DATA_TYPE a_0_0_26_0;
  DATA_TYPE a_0_0_27_0;
  DATA_TYPE a_0_0_28_0;
  DATA_TYPE a_0_0_29_0;
  DATA_TYPE a_0_0_30_0;
  DATA_TYPE a_0_0_31_0;
  DATA_TYPE a_0_0_32_0;
  DATA_TYPE a_0_0_33_0;
  DATA_TYPE a_0_0_34_0;
  DATA_TYPE a_0_0_35_0;
  DATA_TYPE a_0_0_36_0;
  DATA_TYPE a_0_0_37_0;
  DATA_TYPE a_0_0_38_0;
  DATA_TYPE a_0_0_39_0;
  DATA_TYPE a_0_0_40_0;
  DATA_TYPE a_0_0_41_0;
  DATA_TYPE a_0_0_42_0;
  DATA_TYPE a_0_0_43_0;
  DATA_TYPE a_0_0_44_0;
  DATA_TYPE a_0_0_45_0;
  DATA_TYPE a_0_0_46_0;
  DATA_TYPE a_0_0_47_0;
  DATA_TYPE a_0_0_48_0;
  DATA_TYPE a_0_0_49_0;
  DATA_TYPE a_0_0_50_0;
  DATA_TYPE a_0_0_51_0;
  DATA_TYPE a_0_0_52_0;
  DATA_TYPE a_0_0_53_0;
  DATA_TYPE a_0_0_54_0;
  DATA_TYPE a_0_0_55_0;
  DATA_TYPE a_0_0_56_0;
  DATA_TYPE a_0_0_57_0;
  DATA_TYPE a_0_0_58_0;
  DATA_TYPE a_0_0_59_0;
  DATA_TYPE a_0_0_60_0;
  DATA_TYPE a_0_0_61_0;
  DATA_TYPE a_0_0_62_0;
  DATA_TYPE a_0_0_63_0;
  DATA_TYPE b_0_0_0_0;

  /* allocate tensile_half2 memory */
  tensile_half2 a_pk_fma;
  tensile_half2 b_pk_fma;
  tensile_half2 c_pk_fma;

  /* allocate local memory */
  __shared__ DATA_TYPE localMemory[LDS_NUM_ELEMENTS];
typedef struct MagicStruct {unsigned M; int a; int s;} MagicStruct;
const unsigned MAGIC_STRUCT_A = 0x80000000; // for extracting a-bit from shift kernarg
#define MAGIC_DIV2(dividend, magic) (((((uint64_t)(dividend) * magic.M) >> 32) + dividend*magic.a) >> magic.s)


  /******************************************/
  /* Local Read Addresses                   */
  /******************************************/


  /* local read addresses: tile assignments a */

  unsigned int lr0I = (serial % SG0I);


  /* local read addresses: tile assignments b */

  unsigned int lr1J = (serial / SG0I) % SG1J;


  /* local read addresses: final offsets a */

  unsigned int localReadOffsetA = lr0I*VECTOR_WIDTH + sgId*(MT0I+PAD);


  /* local read addresses: final offsets b */

  unsigned int localReadOffsetB = lr1J*VECTOR_WIDTH + sgId*(MT1J+PAD) + LDS_OFFSET_B;


  /* local read addresses: declare addresses a */

  DATA_TYPE *localReadA;


  /* local read addresses: declare addresses b */

  DATA_TYPE *localReadB;



  /******************************************/
  /* Begin setupNewTile                     */
  /******************************************/


  /* global read addresses: work-group */

  unsigned int wg0I = hc_get_group_id(0);
  unsigned int wg1J = hc_get_group_id(1);
  unsigned int nwg0I = hc_get_num_groups(0);
  unsigned int nwg1J = hc_get_num_groups(1);
  nwg1J /= GLOBAL_SPLITU;
  unsigned int gsuSumIdx;
  gsuSumIdx = wg1J % GLOBAL_SPLITU;
  wg1J = wg1J / GLOBAL_SPLITU;

  uint64_t wgSerial = wg0I + (wg1J % WORK_GROUP_MAPPING) * nwg0I;// within block
  unsigned int block = wg1J / WORK_GROUP_MAPPING;
  unsigned int blockRemainder = (wg1J < nwg1J-(nwg1J % WORK_GROUP_MAPPING) ) ? 0 : nwg1J % WORK_GROUP_MAPPING;
  if ( blockRemainder == 0) {
    wg0I = wgSerial / 4;
    wg1J = wgSerial % 4 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 1) {
    wg0I = wgSerial / 1;
    wg1J = wgSerial % 1 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 2) {
    wg0I = wgSerial / 2;
    wg1J = wgSerial % 2 + block*WORK_GROUP_MAPPING;
  } else {
    wg0I = wgSerial / 3;
    wg1J = wgSerial % 3 + block*WORK_GROUP_MAPPING;
  }


  /* global read addresses: tile offset assignment a */

  unsigned int globalReadOffsetA0I = (serial%LVCA)*GLOBAL_LOAD_VECTOR_WIDTH_A + (wg0I)*MT0I;


  /* global read addresses: tile offset assignment b */

  unsigned int globalReadOffsetB1J = (serial%LVCB)*GLOBAL_LOAD_VECTOR_WIDTH_B + (wg1J)*MT1J;


  /* global read addresses: unroll assignment a */

  unsigned int globalReadOffsetAL = (serial/LVCA) + LOCAL_DEPTHU*gsuSumIdx;


  /* global read addresses: unroll assignment b */

  unsigned int globalReadOffsetBL = (serial/LVCB) + LOCAL_DEPTHU*gsuSumIdx;


  /* global read addresses: other free assignments */

  unsigned int wgK = ( hc_get_group_id(2) ) % sizeK;


  /* global read addresses: tile offsets a */

  unsigned int flattenedOffsetA_0_0 = globalReadOffsetA0I + 0 + 0*LSCA;
  flattenedOffsetA_0_0 = (flattenedOffsetA_0_0 > (size0I-1)) ? (size0I-1):flattenedOffsetA_0_0;
  unsigned int globalReadOffsetA0I_0_0 = flattenedOffsetA_0_0;


  /* global read addresses: tile offsets b */

  unsigned int flattenedOffsetB_0_0 = globalReadOffsetB1J + 0 + 0*LSCB;
  flattenedOffsetB_0_0 = (flattenedOffsetB_0_0 > (size1J-1)) ? (size1J-1):flattenedOffsetB_0_0;
  unsigned int globalReadOffsetB1J_0_0 = flattenedOffsetB_0_0;


  /* global read addresses: unroll offsets a */

  unsigned int globalReadOffsetAL_0_0 = globalReadOffsetAL + 0 + 0*LSPA;
  unsigned int globalReadOffsetAL_1_0 = globalReadOffsetAL + 0 + 1*LSPA;
  unsigned int globalReadOffsetAL_2_0 = globalReadOffsetAL + 0 + 2*LSPA;
  unsigned int globalReadOffsetAL_3_0 = globalReadOffsetAL + 0 + 3*LSPA;
  unsigned int globalReadOffsetAL_4_0 = globalReadOffsetAL + 0 + 4*LSPA;
  unsigned int globalReadOffsetAL_5_0 = globalReadOffsetAL + 0 + 5*LSPA;
  unsigned int globalReadOffsetAL_6_0 = globalReadOffsetAL + 0 + 6*LSPA;
  unsigned int globalReadOffsetAL_7_0 = globalReadOffsetAL + 0 + 7*LSPA;
  unsigned int globalReadOffsetAL_8_0 = globalReadOffsetAL + 0 + 8*LSPA;
  unsigned int globalReadOffsetAL_9_0 = globalReadOffsetAL + 0 + 9*LSPA;
  unsigned int globalReadOffsetAL_10_0 = globalReadOffsetAL + 0 + 10*LSPA;
  unsigned int globalReadOffsetAL_11_0 = globalReadOffsetAL + 0 + 11*LSPA;
  unsigned int globalReadOffsetAL_12_0 = globalReadOffsetAL + 0 + 12*LSPA;
  unsigned int globalReadOffsetAL_13_0 = globalReadOffsetAL + 0 + 13*LSPA;
  unsigned int globalReadOffsetAL_14_0 = globalReadOffsetAL + 0 + 14*LSPA;
  unsigned int globalReadOffsetAL_15_0 = globalReadOffsetAL + 0 + 15*LSPA;
  unsigned int globalReadOffsetAL_16_0 = globalReadOffsetAL + 0 + 16*LSPA;
  unsigned int globalReadOffsetAL_17_0 = globalReadOffsetAL + 0 + 17*LSPA;
  unsigned int globalReadOffsetAL_18_0 = globalReadOffsetAL + 0 + 18*LSPA;
  unsigned int globalReadOffsetAL_19_0 = globalReadOffsetAL + 0 + 19*LSPA;
  unsigned int globalReadOffsetAL_20_0 = globalReadOffsetAL + 0 + 20*LSPA;
  unsigned int globalReadOffsetAL_21_0 = globalReadOffsetAL + 0 + 21*LSPA;
  unsigned int globalReadOffsetAL_22_0 = globalReadOffsetAL + 0 + 22*LSPA;
  unsigned int globalReadOffsetAL_23_0 = globalReadOffsetAL + 0 + 23*LSPA;
  unsigned int globalReadOffsetAL_24_0 = globalReadOffsetAL + 0 + 24*LSPA;
  unsigned int globalReadOffsetAL_25_0 = globalReadOffsetAL + 0 + 25*LSPA;
  unsigned int globalReadOffsetAL_26_0 = globalReadOffsetAL + 0 + 26*LSPA;
  unsigned int globalReadOffsetAL_27_0 = globalReadOffsetAL + 0 + 27*LSPA;
  unsigned int globalReadOffsetAL_28_0 = globalReadOffsetAL + 0 + 28*LSPA;
  unsigned int globalReadOffsetAL_29_0 = globalReadOffsetAL + 0 + 29*LSPA;
  unsigned int globalReadOffsetAL_30_0 = globalReadOffsetAL + 0 + 30*LSPA;
  unsigned int globalReadOffsetAL_31_0 = globalReadOffsetAL + 0 + 31*LSPA;
  unsigned int globalReadOffsetAL_32_0 = globalReadOffsetAL + 0 + 32*LSPA;
  unsigned int globalReadOffsetAL_33_0 = globalReadOffsetAL + 0 + 33*LSPA;
  unsigned int globalReadOffsetAL_34_0 = globalReadOffsetAL + 0 + 34*LSPA;
  unsigned int globalReadOffsetAL_35_0 = globalReadOffsetAL + 0 + 35*LSPA;
  unsigned int globalReadOffsetAL_36_0 = globalReadOffsetAL + 0 + 36*LSPA;
  unsigned int globalReadOffsetAL_37_0 = globalReadOffsetAL + 0 + 37*LSPA;
  unsigned int globalReadOffsetAL_38_0 = globalReadOffsetAL + 0 + 38*LSPA;
  unsigned int globalReadOffsetAL_39_0 = globalReadOffsetAL + 0 + 39*LSPA;
  unsigned int globalReadOffsetAL_40_0 = globalReadOffsetAL + 0 + 40*LSPA;
  unsigned int globalReadOffsetAL_41_0 = globalReadOffsetAL + 0 + 41*LSPA;
  unsigned int globalReadOffsetAL_42_0 = globalReadOffsetAL + 0 + 42*LSPA;
  unsigned int globalReadOffsetAL_43_0 = globalReadOffsetAL + 0 + 43*LSPA;
  unsigned int globalReadOffsetAL_44_0 = globalReadOffsetAL + 0 + 44*LSPA;
  unsigned int globalReadOffsetAL_45_0 = globalReadOffsetAL + 0 + 45*LSPA;
  unsigned int globalReadOffsetAL_46_0 = globalReadOffsetAL + 0 + 46*LSPA;
  unsigned int globalReadOffsetAL_47_0 = globalReadOffsetAL + 0 + 47*LSPA;
  unsigned int globalReadOffsetAL_48_0 = globalReadOffsetAL + 0 + 48*LSPA;
  unsigned int globalReadOffsetAL_49_0 = globalReadOffsetAL + 0 + 49*LSPA;
  unsigned int globalReadOffsetAL_50_0 = globalReadOffsetAL + 0 + 50*LSPA;
  unsigned int globalReadOffsetAL_51_0 = globalReadOffsetAL + 0 + 51*LSPA;
  unsigned int globalReadOffsetAL_52_0 = globalReadOffsetAL + 0 + 52*LSPA;
  unsigned int globalReadOffsetAL_53_0 = globalReadOffsetAL + 0 + 53*LSPA;
  unsigned int globalReadOffsetAL_54_0 = globalReadOffsetAL + 0 + 54*LSPA;
  unsigned int globalReadOffsetAL_55_0 = globalReadOffsetAL + 0 + 55*LSPA;
  unsigned int globalReadOffsetAL_56_0 = globalReadOffsetAL + 0 + 56*LSPA;
  unsigned int globalReadOffsetAL_57_0 = globalReadOffsetAL + 0 + 57*LSPA;
  unsigned int globalReadOffsetAL_58_0 = globalReadOffsetAL + 0 + 58*LSPA;
  unsigned int globalReadOffsetAL_59_0 = globalReadOffsetAL + 0 + 59*LSPA;
  unsigned int globalReadOffsetAL_60_0 = globalReadOffsetAL + 0 + 60*LSPA;
  unsigned int globalReadOffsetAL_61_0 = globalReadOffsetAL + 0 + 61*LSPA;
  unsigned int globalReadOffsetAL_62_0 = globalReadOffsetAL + 0 + 62*LSPA;
  unsigned int globalReadOffsetAL_63_0 = globalReadOffsetAL + 0 + 63*LSPA;


  /* global read addresses: unroll offsets b */

  unsigned int globalReadOffsetBL_0_0 = globalReadOffsetBL + 0 + 0*LSPB;


  /* global read addresses: final offsets a */

  int64_t globalReadOffsetA_0_0_0_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_0_0), wgK );
  int64_t globalReadOffsetA_0_0_1_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_1_0), wgK );
  int64_t globalReadOffsetA_0_0_2_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_2_0), wgK );
  int64_t globalReadOffsetA_0_0_3_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_3_0), wgK );
  int64_t globalReadOffsetA_0_0_4_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_4_0), wgK );
  int64_t globalReadOffsetA_0_0_5_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_5_0), wgK );
  int64_t globalReadOffsetA_0_0_6_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_6_0), wgK );
  int64_t globalReadOffsetA_0_0_7_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_7_0), wgK );
  int64_t globalReadOffsetA_0_0_8_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_8_0), wgK );
  int64_t globalReadOffsetA_0_0_9_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_9_0), wgK );
  int64_t globalReadOffsetA_0_0_10_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_10_0), wgK );
  int64_t globalReadOffsetA_0_0_11_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_11_0), wgK );
  int64_t globalReadOffsetA_0_0_12_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_12_0), wgK );
  int64_t globalReadOffsetA_0_0_13_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_13_0), wgK );
  int64_t globalReadOffsetA_0_0_14_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_14_0), wgK );
  int64_t globalReadOffsetA_0_0_15_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_15_0), wgK );
  int64_t globalReadOffsetA_0_0_16_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_16_0), wgK );
  int64_t globalReadOffsetA_0_0_17_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_17_0), wgK );
  int64_t globalReadOffsetA_0_0_18_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_18_0), wgK );
  int64_t globalReadOffsetA_0_0_19_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_19_0), wgK );
  int64_t globalReadOffsetA_0_0_20_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_20_0), wgK );
  int64_t globalReadOffsetA_0_0_21_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_21_0), wgK );
  int64_t globalReadOffsetA_0_0_22_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_22_0), wgK );
  int64_t globalReadOffsetA_0_0_23_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_23_0), wgK );
  int64_t globalReadOffsetA_0_0_24_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_24_0), wgK );
  int64_t globalReadOffsetA_0_0_25_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_25_0), wgK );
  int64_t globalReadOffsetA_0_0_26_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_26_0), wgK );
  int64_t globalReadOffsetA_0_0_27_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_27_0), wgK );
  int64_t globalReadOffsetA_0_0_28_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_28_0), wgK );
  int64_t globalReadOffsetA_0_0_29_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_29_0), wgK );
  int64_t globalReadOffsetA_0_0_30_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_30_0), wgK );
  int64_t globalReadOffsetA_0_0_31_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_31_0), wgK );
  int64_t globalReadOffsetA_0_0_32_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_32_0), wgK );
  int64_t globalReadOffsetA_0_0_33_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_33_0), wgK );
  int64_t globalReadOffsetA_0_0_34_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_34_0), wgK );
  int64_t globalReadOffsetA_0_0_35_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_35_0), wgK );
  int64_t globalReadOffsetA_0_0_36_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_36_0), wgK );
  int64_t globalReadOffsetA_0_0_37_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_37_0), wgK );
  int64_t globalReadOffsetA_0_0_38_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_38_0), wgK );
  int64_t globalReadOffsetA_0_0_39_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_39_0), wgK );
  int64_t globalReadOffsetA_0_0_40_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_40_0), wgK );
  int64_t globalReadOffsetA_0_0_41_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_41_0), wgK );
  int64_t globalReadOffsetA_0_0_42_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_42_0), wgK );
  int64_t globalReadOffsetA_0_0_43_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_43_0), wgK );
  int64_t globalReadOffsetA_0_0_44_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_44_0), wgK );
  int64_t globalReadOffsetA_0_0_45_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_45_0), wgK );
  int64_t globalReadOffsetA_0_0_46_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_46_0), wgK );
  int64_t globalReadOffsetA_0_0_47_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_47_0), wgK );
  int64_t globalReadOffsetA_0_0_48_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_48_0), wgK );
  int64_t globalReadOffsetA_0_0_49_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_49_0), wgK );
  int64_t globalReadOffsetA_0_0_50_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_50_0), wgK );
  int64_t globalReadOffsetA_0_0_51_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_51_0), wgK );
  int64_t globalReadOffsetA_0_0_52_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_52_0), wgK );
  int64_t globalReadOffsetA_0_0_53_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_53_0), wgK );
  int64_t globalReadOffsetA_0_0_54_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_54_0), wgK );
  int64_t globalReadOffsetA_0_0_55_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_55_0), wgK );
  int64_t globalReadOffsetA_0_0_56_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_56_0), wgK );
  int64_t globalReadOffsetA_0_0_57_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_57_0), wgK );
  int64_t globalReadOffsetA_0_0_58_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_58_0), wgK );
  int64_t globalReadOffsetA_0_0_59_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_59_0), wgK );
  int64_t globalReadOffsetA_0_0_60_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_60_0), wgK );
  int64_t globalReadOffsetA_0_0_61_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_61_0), wgK );
  int64_t globalReadOffsetA_0_0_62_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_62_0), wgK );
  int64_t globalReadOffsetA_0_0_63_0 = GLOBAL_OFFSET_A( (globalReadOffsetA0I_0_0), (globalReadOffsetAL_63_0), wgK );


  /* global read addresses: final offsets b */

  int64_t globalReadOffsetB_0_0_0_0 = GLOBAL_OFFSET_B( (globalReadOffsetB1J_0_0), (globalReadOffsetBL_0_0), wgK );


  /* global read addresses: addresses a */

  DATA_TYPE const *globalReadA_0_0_0_0 = A + globalReadOffsetA_0_0_0_0;
  DATA_TYPE const *globalReadA_0_0_1_0 = A + globalReadOffsetA_0_0_1_0;
  DATA_TYPE const *globalReadA_0_0_2_0 = A + globalReadOffsetA_0_0_2_0;
  DATA_TYPE const *globalReadA_0_0_3_0 = A + globalReadOffsetA_0_0_3_0;
  DATA_TYPE const *globalReadA_0_0_4_0 = A + globalReadOffsetA_0_0_4_0;
  DATA_TYPE const *globalReadA_0_0_5_0 = A + globalReadOffsetA_0_0_5_0;
  DATA_TYPE const *globalReadA_0_0_6_0 = A + globalReadOffsetA_0_0_6_0;
  DATA_TYPE const *globalReadA_0_0_7_0 = A + globalReadOffsetA_0_0_7_0;
  DATA_TYPE const *globalReadA_0_0_8_0 = A + globalReadOffsetA_0_0_8_0;
  DATA_TYPE const *globalReadA_0_0_9_0 = A + globalReadOffsetA_0_0_9_0;
  DATA_TYPE const *globalReadA_0_0_10_0 = A + globalReadOffsetA_0_0_10_0;
  DATA_TYPE const *globalReadA_0_0_11_0 = A + globalReadOffsetA_0_0_11_0;
  DATA_TYPE const *globalReadA_0_0_12_0 = A + globalReadOffsetA_0_0_12_0;
  DATA_TYPE const *globalReadA_0_0_13_0 = A + globalReadOffsetA_0_0_13_0;
  DATA_TYPE const *globalReadA_0_0_14_0 = A + globalReadOffsetA_0_0_14_0;
  DATA_TYPE const *globalReadA_0_0_15_0 = A + globalReadOffsetA_0_0_15_0;
  DATA_TYPE const *globalReadA_0_0_16_0 = A + globalReadOffsetA_0_0_16_0;
  DATA_TYPE const *globalReadA_0_0_17_0 = A + globalReadOffsetA_0_0_17_0;
  DATA_TYPE const *globalReadA_0_0_18_0 = A + globalReadOffsetA_0_0_18_0;
  DATA_TYPE const *globalReadA_0_0_19_0 = A + globalReadOffsetA_0_0_19_0;
  DATA_TYPE const *globalReadA_0_0_20_0 = A + globalReadOffsetA_0_0_20_0;
  DATA_TYPE const *globalReadA_0_0_21_0 = A + globalReadOffsetA_0_0_21_0;
  DATA_TYPE const *globalReadA_0_0_22_0 = A + globalReadOffsetA_0_0_22_0;
  DATA_TYPE const *globalReadA_0_0_23_0 = A + globalReadOffsetA_0_0_23_0;
  DATA_TYPE const *globalReadA_0_0_24_0 = A + globalReadOffsetA_0_0_24_0;
  DATA_TYPE const *globalReadA_0_0_25_0 = A + globalReadOffsetA_0_0_25_0;
  DATA_TYPE const *globalReadA_0_0_26_0 = A + globalReadOffsetA_0_0_26_0;
  DATA_TYPE const *globalReadA_0_0_27_0 = A + globalReadOffsetA_0_0_27_0;
  DATA_TYPE const *globalReadA_0_0_28_0 = A + globalReadOffsetA_0_0_28_0;
  DATA_TYPE const *globalReadA_0_0_29_0 = A + globalReadOffsetA_0_0_29_0;
  DATA_TYPE const *globalReadA_0_0_30_0 = A + globalReadOffsetA_0_0_30_0;
  DATA_TYPE const *globalReadA_0_0_31_0 = A + globalReadOffsetA_0_0_31_0;
  DATA_TYPE const *globalReadA_0_0_32_0 = A + globalReadOffsetA_0_0_32_0;
  DATA_TYPE const *globalReadA_0_0_33_0 = A + globalReadOffsetA_0_0_33_0;
  DATA_TYPE const *globalReadA_0_0_34_0 = A + globalReadOffsetA_0_0_34_0;
  DATA_TYPE const *globalReadA_0_0_35_0 = A + globalReadOffsetA_0_0_35_0;
  DATA_TYPE const *globalReadA_0_0_36_0 = A + globalReadOffsetA_0_0_36_0;
  DATA_TYPE const *globalReadA_0_0_37_0 = A + globalReadOffsetA_0_0_37_0;
  DATA_TYPE const *globalReadA_0_0_38_0 = A + globalReadOffsetA_0_0_38_0;
  DATA_TYPE const *globalReadA_0_0_39_0 = A + globalReadOffsetA_0_0_39_0;
  DATA_TYPE const *globalReadA_0_0_40_0 = A + globalReadOffsetA_0_0_40_0;
  DATA_TYPE const *globalReadA_0_0_41_0 = A + globalReadOffsetA_0_0_41_0;
  DATA_TYPE const *globalReadA_0_0_42_0 = A + globalReadOffsetA_0_0_42_0;
  DATA_TYPE const *globalReadA_0_0_43_0 = A + globalReadOffsetA_0_0_43_0;
  DATA_TYPE const *globalReadA_0_0_44_0 = A + globalReadOffsetA_0_0_44_0;
  DATA_TYPE const *globalReadA_0_0_45_0 = A + globalReadOffsetA_0_0_45_0;
  DATA_TYPE const *globalReadA_0_0_46_0 = A + globalReadOffsetA_0_0_46_0;
  DATA_TYPE const *globalReadA_0_0_47_0 = A + globalReadOffsetA_0_0_47_0;
  DATA_TYPE const *globalReadA_0_0_48_0 = A + globalReadOffsetA_0_0_48_0;
  DATA_TYPE const *globalReadA_0_0_49_0 = A + globalReadOffsetA_0_0_49_0;
  DATA_TYPE const *globalReadA_0_0_50_0 = A + globalReadOffsetA_0_0_50_0;
  DATA_TYPE const *globalReadA_0_0_51_0 = A + globalReadOffsetA_0_0_51_0;
  DATA_TYPE const *globalReadA_0_0_52_0 = A + globalReadOffsetA_0_0_52_0;
  DATA_TYPE const *globalReadA_0_0_53_0 = A + globalReadOffsetA_0_0_53_0;
  DATA_TYPE const *globalReadA_0_0_54_0 = A + globalReadOffsetA_0_0_54_0;
  DATA_TYPE const *globalReadA_0_0_55_0 = A + globalReadOffsetA_0_0_55_0;
  DATA_TYPE const *globalReadA_0_0_56_0 = A + globalReadOffsetA_0_0_56_0;
  DATA_TYPE const *globalReadA_0_0_57_0 = A + globalReadOffsetA_0_0_57_0;
  DATA_TYPE const *globalReadA_0_0_58_0 = A + globalReadOffsetA_0_0_58_0;
  DATA_TYPE const *globalReadA_0_0_59_0 = A + globalReadOffsetA_0_0_59_0;
  DATA_TYPE const *globalReadA_0_0_60_0 = A + globalReadOffsetA_0_0_60_0;
  DATA_TYPE const *globalReadA_0_0_61_0 = A + globalReadOffsetA_0_0_61_0;
  DATA_TYPE const *globalReadA_0_0_62_0 = A + globalReadOffsetA_0_0_62_0;
  DATA_TYPE const *globalReadA_0_0_63_0 = A + globalReadOffsetA_0_0_63_0;


  /* global read addresses: addresses b */

  DATA_TYPE const *globalReadB_0_0_0_0 = B + globalReadOffsetB_0_0_0_0;


  /* global read addresses: increments a */

  int64_t globalReadIncAL = (int64_t)strideAL*LOCAL_DEPTHU*GLOBAL_SPLITU;


  /* global read addresses: increments b */

  int64_t globalReadIncBL = (int64_t)strideBL*LOCAL_DEPTHU*GLOBAL_SPLITU;


  /******************************************/
  /* Local Write Addresses                  */
  /******************************************/


  /* local write addresses: tile assignment A */
  unsigned int lwA0I = (serial%LVCA)*GLOBAL_LOAD_VECTOR_WIDTH_A;


  /* local write addresses: tile assignment B */
  unsigned int lwB1J = (serial%LVCB)*GLOBAL_LOAD_VECTOR_WIDTH_B;


  /* local write addresses: unroll assignment A */
  unsigned int lwAL = (serial/LVCA);


  /* local write addresses: unroll assignment B */
  unsigned int lwBL = (serial/LVCB);


  /* local write addresses: first offset a */

  unsigned int localWriteFirstOffsetA = lwA0I + lwAL*(MT0I+PAD);


  /* local write addresses: first offset b */

  unsigned int localWriteFirstOffsetB = lwB1J + lwBL*(MT1J+PAD) + LDS_OFFSET_B;


  /* local write addresses: final offsets A */
  unsigned int localWriteOffsetA_0_0_0_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 0*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_1_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 1*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_2_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 2*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_3_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 3*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_4_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 4*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_5_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 5*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_6_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 6*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_7_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 7*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_8_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 8*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_9_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 9*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_10_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 10*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_11_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 11*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_12_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 12*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_13_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 13*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_14_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 14*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_15_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 15*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_16_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 16*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_17_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 17*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_18_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 18*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_19_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 19*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_20_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 20*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_21_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 21*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_22_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 22*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_23_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 23*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_24_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 24*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_25_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 25*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_26_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 26*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_27_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 27*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_28_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 28*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_29_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 29*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_30_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 30*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_31_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 31*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_32_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 32*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_33_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 33*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_34_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 34*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_35_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 35*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_36_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 36*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_37_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 37*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_38_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 38*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_39_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 39*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_40_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 40*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_41_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 41*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_42_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 42*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_43_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 43*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_44_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 44*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_45_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 45*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_46_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 46*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_47_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 47*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_48_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 48*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_49_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 49*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_50_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 50*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_51_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 51*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_52_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 52*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_53_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 53*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_54_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 54*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_55_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 55*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_56_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 56*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_57_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 57*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_58_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 58*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_59_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 59*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_60_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 60*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_61_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 61*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_62_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 62*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_0_0_63_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 63*LSPA)*(MT0I+PAD);


  /* local write addresses: final offsets B */
  unsigned int localWriteOffsetB_0_0_0_0 = localWriteFirstOffsetB + (0 + 0*LSCB) + (0 + 0*LSPB)*(MT1J+PAD);


  /* local write addresses: declare addresses A */
  DATA_TYPE *localWriteA_0_0_0_0;
  DATA_TYPE *localWriteA_0_0_1_0;
  DATA_TYPE *localWriteA_0_0_2_0;
  DATA_TYPE *localWriteA_0_0_3_0;
  DATA_TYPE *localWriteA_0_0_4_0;
  DATA_TYPE *localWriteA_0_0_5_0;
  DATA_TYPE *localWriteA_0_0_6_0;
  DATA_TYPE *localWriteA_0_0_7_0;
  DATA_TYPE *localWriteA_0_0_8_0;
  DATA_TYPE *localWriteA_0_0_9_0;
  DATA_TYPE *localWriteA_0_0_10_0;
  DATA_TYPE *localWriteA_0_0_11_0;
  DATA_TYPE *localWriteA_0_0_12_0;
  DATA_TYPE *localWriteA_0_0_13_0;
  DATA_TYPE *localWriteA_0_0_14_0;
  DATA_TYPE *localWriteA_0_0_15_0;
  DATA_TYPE *localWriteA_0_0_16_0;
  DATA_TYPE *localWriteA_0_0_17_0;
  DATA_TYPE *localWriteA_0_0_18_0;
  DATA_TYPE *localWriteA_0_0_19_0;
  DATA_TYPE *localWriteA_0_0_20_0;
  DATA_TYPE *localWriteA_0_0_21_0;
  DATA_TYPE *localWriteA_0_0_22_0;
  DATA_TYPE *localWriteA_0_0_23_0;
  DATA_TYPE *localWriteA_0_0_24_0;
  DATA_TYPE *localWriteA_0_0_25_0;
  DATA_TYPE *localWriteA_0_0_26_0;
  DATA_TYPE *localWriteA_0_0_27_0;
  DATA_TYPE *localWriteA_0_0_28_0;
  DATA_TYPE *localWriteA_0_0_29_0;
  DATA_TYPE *localWriteA_0_0_30_0;
  DATA_TYPE *localWriteA_0_0_31_0;
  DATA_TYPE *localWriteA_0_0_32_0;
  DATA_TYPE *localWriteA_0_0_33_0;
  DATA_TYPE *localWriteA_0_0_34_0;
  DATA_TYPE *localWriteA_0_0_35_0;
  DATA_TYPE *localWriteA_0_0_36_0;
  DATA_TYPE *localWriteA_0_0_37_0;
  DATA_TYPE *localWriteA_0_0_38_0;
  DATA_TYPE *localWriteA_0_0_39_0;
  DATA_TYPE *localWriteA_0_0_40_0;
  DATA_TYPE *localWriteA_0_0_41_0;
  DATA_TYPE *localWriteA_0_0_42_0;
  DATA_TYPE *localWriteA_0_0_43_0;
  DATA_TYPE *localWriteA_0_0_44_0;
  DATA_TYPE *localWriteA_0_0_45_0;
  DATA_TYPE *localWriteA_0_0_46_0;
  DATA_TYPE *localWriteA_0_0_47_0;
  DATA_TYPE *localWriteA_0_0_48_0;
  DATA_TYPE *localWriteA_0_0_49_0;
  DATA_TYPE *localWriteA_0_0_50_0;
  DATA_TYPE *localWriteA_0_0_51_0;
  DATA_TYPE *localWriteA_0_0_52_0;
  DATA_TYPE *localWriteA_0_0_53_0;
  DATA_TYPE *localWriteA_0_0_54_0;
  DATA_TYPE *localWriteA_0_0_55_0;
  DATA_TYPE *localWriteA_0_0_56_0;
  DATA_TYPE *localWriteA_0_0_57_0;
  DATA_TYPE *localWriteA_0_0_58_0;
  DATA_TYPE *localWriteA_0_0_59_0;
  DATA_TYPE *localWriteA_0_0_60_0;
  DATA_TYPE *localWriteA_0_0_61_0;
  DATA_TYPE *localWriteA_0_0_62_0;
  DATA_TYPE *localWriteA_0_0_63_0;


  /* local write addresses: declare addresses B */
  DATA_TYPE *localWriteB_0_0_0_0;


  /* local write init pointers A */
  localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
  localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
  localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
  localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);
  localWriteA_0_0_4_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_4_0);
  localWriteA_0_0_5_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_5_0);
  localWriteA_0_0_6_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_6_0);
  localWriteA_0_0_7_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_7_0);
  localWriteA_0_0_8_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_8_0);
  localWriteA_0_0_9_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_9_0);
  localWriteA_0_0_10_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_10_0);
  localWriteA_0_0_11_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_11_0);
  localWriteA_0_0_12_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_12_0);
  localWriteA_0_0_13_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_13_0);
  localWriteA_0_0_14_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_14_0);
  localWriteA_0_0_15_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_15_0);
  localWriteA_0_0_16_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_16_0);
  localWriteA_0_0_17_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_17_0);
  localWriteA_0_0_18_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_18_0);
  localWriteA_0_0_19_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_19_0);
  localWriteA_0_0_20_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_20_0);
  localWriteA_0_0_21_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_21_0);
  localWriteA_0_0_22_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_22_0);
  localWriteA_0_0_23_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_23_0);
  localWriteA_0_0_24_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_24_0);
  localWriteA_0_0_25_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_25_0);
  localWriteA_0_0_26_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_26_0);
  localWriteA_0_0_27_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_27_0);
  localWriteA_0_0_28_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_28_0);
  localWriteA_0_0_29_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_29_0);
  localWriteA_0_0_30_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_30_0);
  localWriteA_0_0_31_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_31_0);
  localWriteA_0_0_32_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_32_0);
  localWriteA_0_0_33_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_33_0);
  localWriteA_0_0_34_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_34_0);
  localWriteA_0_0_35_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_35_0);
  localWriteA_0_0_36_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_36_0);
  localWriteA_0_0_37_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_37_0);
  localWriteA_0_0_38_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_38_0);
  localWriteA_0_0_39_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_39_0);
  localWriteA_0_0_40_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_40_0);
  localWriteA_0_0_41_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_41_0);
  localWriteA_0_0_42_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_42_0);
  localWriteA_0_0_43_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_43_0);
  localWriteA_0_0_44_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_44_0);
  localWriteA_0_0_45_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_45_0);
  localWriteA_0_0_46_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_46_0);
  localWriteA_0_0_47_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_47_0);
  localWriteA_0_0_48_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_48_0);
  localWriteA_0_0_49_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_49_0);
  localWriteA_0_0_50_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_50_0);
  localWriteA_0_0_51_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_51_0);
  localWriteA_0_0_52_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_52_0);
  localWriteA_0_0_53_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_53_0);
  localWriteA_0_0_54_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_54_0);
  localWriteA_0_0_55_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_55_0);
  localWriteA_0_0_56_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_56_0);
  localWriteA_0_0_57_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_57_0);
  localWriteA_0_0_58_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_58_0);
  localWriteA_0_0_59_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_59_0);
  localWriteA_0_0_60_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_60_0);
  localWriteA_0_0_61_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_61_0);
  localWriteA_0_0_62_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_62_0);
  localWriteA_0_0_63_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_63_0);


  /* local write init pointers B */
  localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);

  /* declare loop num iterations */

  int numIterL;


  /* Compute summation loop num iter */
  unsigned int numIterMyWg = (sizeL / LOCAL_DEPTHU) / GLOBAL_SPLITU;
  unsigned int numIterPerWgRemainder = (sizeL / LOCAL_DEPTHU) % GLOBAL_SPLITU;
  if (gsuSumIdx < numIterPerWgRemainder) {
    numIterMyWg ++;
  }
  numIterL = numIterMyWg;

  const unsigned origNumIter = numIterL;
  unsigned staggerUIter = (wg0I & staggerUIterParm);
  staggerUIter = (staggerUIter << 1); // shift so each stagger has 256-byte stride

  globalReadA_0_0_0_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_1_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_2_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_3_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_4_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_5_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_6_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_7_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_8_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_9_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_10_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_11_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_12_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_13_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_14_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_15_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_16_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_17_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_18_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_19_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_20_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_21_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_22_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_23_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_24_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_25_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_26_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_27_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_28_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_29_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_30_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_31_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_32_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_33_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_34_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_35_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_36_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_37_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_38_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_39_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_40_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_41_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_42_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_43_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_44_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_45_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_46_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_47_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_48_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_49_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_50_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_51_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_52_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_53_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_54_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_55_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_56_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_57_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_58_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_59_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_60_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_61_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_62_0 += (staggerUIter * globalReadIncAL); // apply stagger offset
  globalReadA_0_0_63_0 += (staggerUIter * globalReadIncAL); // apply stagger offset


  globalReadB_0_0_0_0 += (staggerUIter * globalReadIncBL); // apply stagger offset

  staggerUIter += 1; // add PrefetchGlobalRead

  /* local read addresses: init pointers a */

  localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

  /* local read addresses: init pointers b */

  localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);


  /* prefetch: global -> local */

  if (numIterMyWg >= 1) {



    /* global read A */
    a_0_0_0_0 = *(globalReadA_0_0_0_0 + 0);
    a_0_0_1_0 = *(globalReadA_0_0_1_0 + 0);
    a_0_0_2_0 = *(globalReadA_0_0_2_0 + 0);
    a_0_0_3_0 = *(globalReadA_0_0_3_0 + 0);
    a_0_0_4_0 = *(globalReadA_0_0_4_0 + 0);
    a_0_0_5_0 = *(globalReadA_0_0_5_0 + 0);
    a_0_0_6_0 = *(globalReadA_0_0_6_0 + 0);
    a_0_0_7_0 = *(globalReadA_0_0_7_0 + 0);
    a_0_0_8_0 = *(globalReadA_0_0_8_0 + 0);
    a_0_0_9_0 = *(globalReadA_0_0_9_0 + 0);
    a_0_0_10_0 = *(globalReadA_0_0_10_0 + 0);
    a_0_0_11_0 = *(globalReadA_0_0_11_0 + 0);
    a_0_0_12_0 = *(globalReadA_0_0_12_0 + 0);
    a_0_0_13_0 = *(globalReadA_0_0_13_0 + 0);
    a_0_0_14_0 = *(globalReadA_0_0_14_0 + 0);
    a_0_0_15_0 = *(globalReadA_0_0_15_0 + 0);
    a_0_0_16_0 = *(globalReadA_0_0_16_0 + 0);
    a_0_0_17_0 = *(globalReadA_0_0_17_0 + 0);
    a_0_0_18_0 = *(globalReadA_0_0_18_0 + 0);
    a_0_0_19_0 = *(globalReadA_0_0_19_0 + 0);
    a_0_0_20_0 = *(globalReadA_0_0_20_0 + 0);
    a_0_0_21_0 = *(globalReadA_0_0_21_0 + 0);
    a_0_0_22_0 = *(globalReadA_0_0_22_0 + 0);
    a_0_0_23_0 = *(globalReadA_0_0_23_0 + 0);
    a_0_0_24_0 = *(globalReadA_0_0_24_0 + 0);
    a_0_0_25_0 = *(globalReadA_0_0_25_0 + 0);
    a_0_0_26_0 = *(globalReadA_0_0_26_0 + 0);
    a_0_0_27_0 = *(globalReadA_0_0_27_0 + 0);
    a_0_0_28_0 = *(globalReadA_0_0_28_0 + 0);
    a_0_0_29_0 = *(globalReadA_0_0_29_0 + 0);
    a_0_0_30_0 = *(globalReadA_0_0_30_0 + 0);
    a_0_0_31_0 = *(globalReadA_0_0_31_0 + 0);
    a_0_0_32_0 = *(globalReadA_0_0_32_0 + 0);
    a_0_0_33_0 = *(globalReadA_0_0_33_0 + 0);
    a_0_0_34_0 = *(globalReadA_0_0_34_0 + 0);
    a_0_0_35_0 = *(globalReadA_0_0_35_0 + 0);
    a_0_0_36_0 = *(globalReadA_0_0_36_0 + 0);
    a_0_0_37_0 = *(globalReadA_0_0_37_0 + 0);
    a_0_0_38_0 = *(globalReadA_0_0_38_0 + 0);
    a_0_0_39_0 = *(globalReadA_0_0_39_0 + 0);
    a_0_0_40_0 = *(globalReadA_0_0_40_0 + 0);
    a_0_0_41_0 = *(globalReadA_0_0_41_0 + 0);
    a_0_0_42_0 = *(globalReadA_0_0_42_0 + 0);
    a_0_0_43_0 = *(globalReadA_0_0_43_0 + 0);
    a_0_0_44_0 = *(globalReadA_0_0_44_0 + 0);
    a_0_0_45_0 = *(globalReadA_0_0_45_0 + 0);
    a_0_0_46_0 = *(globalReadA_0_0_46_0 + 0);
    a_0_0_47_0 = *(globalReadA_0_0_47_0 + 0);
    a_0_0_48_0 = *(globalReadA_0_0_48_0 + 0);
    a_0_0_49_0 = *(globalReadA_0_0_49_0 + 0);
    a_0_0_50_0 = *(globalReadA_0_0_50_0 + 0);
    a_0_0_51_0 = *(globalReadA_0_0_51_0 + 0);
    a_0_0_52_0 = *(globalReadA_0_0_52_0 + 0);
    a_0_0_53_0 = *(globalReadA_0_0_53_0 + 0);
    a_0_0_54_0 = *(globalReadA_0_0_54_0 + 0);
    a_0_0_55_0 = *(globalReadA_0_0_55_0 + 0);
    a_0_0_56_0 = *(globalReadA_0_0_56_0 + 0);
    a_0_0_57_0 = *(globalReadA_0_0_57_0 + 0);
    a_0_0_58_0 = *(globalReadA_0_0_58_0 + 0);
    a_0_0_59_0 = *(globalReadA_0_0_59_0 + 0);
    a_0_0_60_0 = *(globalReadA_0_0_60_0 + 0);
    a_0_0_61_0 = *(globalReadA_0_0_61_0 + 0);
    a_0_0_62_0 = *(globalReadA_0_0_62_0 + 0);
    a_0_0_63_0 = *(globalReadA_0_0_63_0 + 0);



    /* global read B */
    b_0_0_0_0 = *(globalReadB_0_0_0_0 + 0);


    /* global read inc A for sumL */
    globalReadA_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_0_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_0_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_1_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_1_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_1_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_2_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_2_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_2_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_3_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_3_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_3_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_4_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_4_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_4_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_5_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_5_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_5_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_6_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_6_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_6_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_7_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_7_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_7_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_8_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_8_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_8_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_9_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_9_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_9_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_10_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_10_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_10_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_11_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_11_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_11_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_12_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_12_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_12_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_13_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_13_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_13_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_14_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_14_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_14_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_15_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_15_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_15_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_16_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_16_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_16_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_17_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_17_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_17_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_18_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_18_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_18_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_19_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_19_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_19_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_20_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_20_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_20_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_21_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_21_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_21_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_22_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_22_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_22_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_23_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_23_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_23_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_24_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_24_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_24_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_25_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_25_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_25_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_26_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_26_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_26_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_27_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_27_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_27_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_28_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_28_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_28_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_29_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_29_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_29_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_30_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_30_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_30_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_31_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_31_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_31_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_32_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_32_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_32_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_33_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_33_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_33_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_34_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_34_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_34_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_35_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_35_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_35_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_36_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_36_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_36_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_37_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_37_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_37_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_38_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_38_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_38_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_39_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_39_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_39_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_40_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_40_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_40_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_41_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_41_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_41_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_42_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_42_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_42_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_43_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_43_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_43_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_44_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_44_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_44_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_45_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_45_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_45_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_46_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_46_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_46_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_47_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_47_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_47_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_48_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_48_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_48_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_49_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_49_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_49_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_50_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_50_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_50_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_51_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_51_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_51_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_52_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_52_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_52_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_53_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_53_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_53_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_54_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_54_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_54_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_55_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_55_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_55_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_56_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_56_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_56_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_57_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_57_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_57_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_58_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_58_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_58_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_59_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_59_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_59_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_60_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_60_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_60_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_61_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_61_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_61_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_62_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_62_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_62_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_63_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_63_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_63_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }

    /* global read inc B for sumL */
    globalReadB_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_0_0) + 1*globalReadIncBL);
    if ((numIterL) == staggerUIter) {
      globalReadB_0_0_0_0 -= (origNumIter * globalReadIncBL); // wrap staggered offset back to row start
    }


    /******************************************/
    /* End setupNewTile                       */
    /******************************************/




  rC[0] = SCALAR_ZERO;




    /* local write a */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
    *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
    *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
    *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
    *(localWriteA_0_0_4_0 + 0) = a_0_0_4_0;
    *(localWriteA_0_0_5_0 + 0) = a_0_0_5_0;
    *(localWriteA_0_0_6_0 + 0) = a_0_0_6_0;
    *(localWriteA_0_0_7_0 + 0) = a_0_0_7_0;
    *(localWriteA_0_0_8_0 + 0) = a_0_0_8_0;
    *(localWriteA_0_0_9_0 + 0) = a_0_0_9_0;
    *(localWriteA_0_0_10_0 + 0) = a_0_0_10_0;
    *(localWriteA_0_0_11_0 + 0) = a_0_0_11_0;
    *(localWriteA_0_0_12_0 + 0) = a_0_0_12_0;
    *(localWriteA_0_0_13_0 + 0) = a_0_0_13_0;
    *(localWriteA_0_0_14_0 + 0) = a_0_0_14_0;
    *(localWriteA_0_0_15_0 + 0) = a_0_0_15_0;
    *(localWriteA_0_0_16_0 + 0) = a_0_0_16_0;
    *(localWriteA_0_0_17_0 + 0) = a_0_0_17_0;
    *(localWriteA_0_0_18_0 + 0) = a_0_0_18_0;
    *(localWriteA_0_0_19_0 + 0) = a_0_0_19_0;
    *(localWriteA_0_0_20_0 + 0) = a_0_0_20_0;
    *(localWriteA_0_0_21_0 + 0) = a_0_0_21_0;
    *(localWriteA_0_0_22_0 + 0) = a_0_0_22_0;
    *(localWriteA_0_0_23_0 + 0) = a_0_0_23_0;
    *(localWriteA_0_0_24_0 + 0) = a_0_0_24_0;
    *(localWriteA_0_0_25_0 + 0) = a_0_0_25_0;
    *(localWriteA_0_0_26_0 + 0) = a_0_0_26_0;
    *(localWriteA_0_0_27_0 + 0) = a_0_0_27_0;
    *(localWriteA_0_0_28_0 + 0) = a_0_0_28_0;
    *(localWriteA_0_0_29_0 + 0) = a_0_0_29_0;
    *(localWriteA_0_0_30_0 + 0) = a_0_0_30_0;
    *(localWriteA_0_0_31_0 + 0) = a_0_0_31_0;
    *(localWriteA_0_0_32_0 + 0) = a_0_0_32_0;
    *(localWriteA_0_0_33_0 + 0) = a_0_0_33_0;
    *(localWriteA_0_0_34_0 + 0) = a_0_0_34_0;
    *(localWriteA_0_0_35_0 + 0) = a_0_0_35_0;
    *(localWriteA_0_0_36_0 + 0) = a_0_0_36_0;
    *(localWriteA_0_0_37_0 + 0) = a_0_0_37_0;
    *(localWriteA_0_0_38_0 + 0) = a_0_0_38_0;
    *(localWriteA_0_0_39_0 + 0) = a_0_0_39_0;
    *(localWriteA_0_0_40_0 + 0) = a_0_0_40_0;
    *(localWriteA_0_0_41_0 + 0) = a_0_0_41_0;
    *(localWriteA_0_0_42_0 + 0) = a_0_0_42_0;
    *(localWriteA_0_0_43_0 + 0) = a_0_0_43_0;
    *(localWriteA_0_0_44_0 + 0) = a_0_0_44_0;
    *(localWriteA_0_0_45_0 + 0) = a_0_0_45_0;
    *(localWriteA_0_0_46_0 + 0) = a_0_0_46_0;
    *(localWriteA_0_0_47_0 + 0) = a_0_0_47_0;
    *(localWriteA_0_0_48_0 + 0) = a_0_0_48_0;
    *(localWriteA_0_0_49_0 + 0) = a_0_0_49_0;
    *(localWriteA_0_0_50_0 + 0) = a_0_0_50_0;
    *(localWriteA_0_0_51_0 + 0) = a_0_0_51_0;
    *(localWriteA_0_0_52_0 + 0) = a_0_0_52_0;
    *(localWriteA_0_0_53_0 + 0) = a_0_0_53_0;
    *(localWriteA_0_0_54_0 + 0) = a_0_0_54_0;
    *(localWriteA_0_0_55_0 + 0) = a_0_0_55_0;
    *(localWriteA_0_0_56_0 + 0) = a_0_0_56_0;
    *(localWriteA_0_0_57_0 + 0) = a_0_0_57_0;
    *(localWriteA_0_0_58_0 + 0) = a_0_0_58_0;
    *(localWriteA_0_0_59_0 + 0) = a_0_0_59_0;
    *(localWriteA_0_0_60_0 + 0) = a_0_0_60_0;
    *(localWriteA_0_0_61_0 + 0) = a_0_0_61_0;
    *(localWriteA_0_0_62_0 + 0) = a_0_0_62_0;
    *(localWriteA_0_0_63_0 + 0) = a_0_0_63_0;
#pragma clang diagnostic pop


    /* local write b */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
#pragma clang diagnostic pop


    /* local write swap a */

    localWriteOffsetA_0_0_0_0 = (localWriteOffsetA_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_1_0 = (localWriteOffsetA_0_0_1_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_2_0 = (localWriteOffsetA_0_0_2_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_3_0 = (localWriteOffsetA_0_0_3_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_4_0 = (localWriteOffsetA_0_0_4_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_5_0 = (localWriteOffsetA_0_0_5_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_6_0 = (localWriteOffsetA_0_0_6_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_7_0 = (localWriteOffsetA_0_0_7_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_8_0 = (localWriteOffsetA_0_0_8_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_9_0 = (localWriteOffsetA_0_0_9_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_10_0 = (localWriteOffsetA_0_0_10_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_11_0 = (localWriteOffsetA_0_0_11_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_12_0 = (localWriteOffsetA_0_0_12_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_13_0 = (localWriteOffsetA_0_0_13_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_14_0 = (localWriteOffsetA_0_0_14_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_15_0 = (localWriteOffsetA_0_0_15_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_16_0 = (localWriteOffsetA_0_0_16_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_17_0 = (localWriteOffsetA_0_0_17_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_18_0 = (localWriteOffsetA_0_0_18_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_19_0 = (localWriteOffsetA_0_0_19_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_20_0 = (localWriteOffsetA_0_0_20_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_21_0 = (localWriteOffsetA_0_0_21_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_22_0 = (localWriteOffsetA_0_0_22_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_23_0 = (localWriteOffsetA_0_0_23_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_24_0 = (localWriteOffsetA_0_0_24_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_25_0 = (localWriteOffsetA_0_0_25_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_26_0 = (localWriteOffsetA_0_0_26_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_27_0 = (localWriteOffsetA_0_0_27_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_28_0 = (localWriteOffsetA_0_0_28_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_29_0 = (localWriteOffsetA_0_0_29_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_30_0 = (localWriteOffsetA_0_0_30_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_31_0 = (localWriteOffsetA_0_0_31_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_32_0 = (localWriteOffsetA_0_0_32_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_33_0 = (localWriteOffsetA_0_0_33_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_34_0 = (localWriteOffsetA_0_0_34_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_35_0 = (localWriteOffsetA_0_0_35_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_36_0 = (localWriteOffsetA_0_0_36_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_37_0 = (localWriteOffsetA_0_0_37_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_38_0 = (localWriteOffsetA_0_0_38_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_39_0 = (localWriteOffsetA_0_0_39_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_40_0 = (localWriteOffsetA_0_0_40_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_41_0 = (localWriteOffsetA_0_0_41_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_42_0 = (localWriteOffsetA_0_0_42_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_43_0 = (localWriteOffsetA_0_0_43_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_44_0 = (localWriteOffsetA_0_0_44_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_45_0 = (localWriteOffsetA_0_0_45_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_46_0 = (localWriteOffsetA_0_0_46_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_47_0 = (localWriteOffsetA_0_0_47_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_48_0 = (localWriteOffsetA_0_0_48_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_49_0 = (localWriteOffsetA_0_0_49_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_50_0 = (localWriteOffsetA_0_0_50_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_51_0 = (localWriteOffsetA_0_0_51_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_52_0 = (localWriteOffsetA_0_0_52_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_53_0 = (localWriteOffsetA_0_0_53_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_54_0 = (localWriteOffsetA_0_0_54_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_55_0 = (localWriteOffsetA_0_0_55_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_56_0 = (localWriteOffsetA_0_0_56_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_57_0 = (localWriteOffsetA_0_0_57_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_58_0 = (localWriteOffsetA_0_0_58_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_59_0 = (localWriteOffsetA_0_0_59_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_60_0 = (localWriteOffsetA_0_0_60_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_61_0 = (localWriteOffsetA_0_0_61_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_62_0 = (localWriteOffsetA_0_0_62_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_63_0 = (localWriteOffsetA_0_0_63_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);


    /* local write swap b */

    localWriteOffsetB_0_0_0_0 = (localWriteOffsetB_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);


    /* local write init pointers A */
    localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
    localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
    localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
    localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);
    localWriteA_0_0_4_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_4_0);
    localWriteA_0_0_5_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_5_0);
    localWriteA_0_0_6_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_6_0);
    localWriteA_0_0_7_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_7_0);
    localWriteA_0_0_8_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_8_0);
    localWriteA_0_0_9_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_9_0);
    localWriteA_0_0_10_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_10_0);
    localWriteA_0_0_11_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_11_0);
    localWriteA_0_0_12_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_12_0);
    localWriteA_0_0_13_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_13_0);
    localWriteA_0_0_14_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_14_0);
    localWriteA_0_0_15_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_15_0);
    localWriteA_0_0_16_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_16_0);
    localWriteA_0_0_17_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_17_0);
    localWriteA_0_0_18_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_18_0);
    localWriteA_0_0_19_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_19_0);
    localWriteA_0_0_20_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_20_0);
    localWriteA_0_0_21_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_21_0);
    localWriteA_0_0_22_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_22_0);
    localWriteA_0_0_23_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_23_0);
    localWriteA_0_0_24_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_24_0);
    localWriteA_0_0_25_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_25_0);
    localWriteA_0_0_26_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_26_0);
    localWriteA_0_0_27_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_27_0);
    localWriteA_0_0_28_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_28_0);
    localWriteA_0_0_29_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_29_0);
    localWriteA_0_0_30_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_30_0);
    localWriteA_0_0_31_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_31_0);
    localWriteA_0_0_32_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_32_0);
    localWriteA_0_0_33_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_33_0);
    localWriteA_0_0_34_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_34_0);
    localWriteA_0_0_35_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_35_0);
    localWriteA_0_0_36_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_36_0);
    localWriteA_0_0_37_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_37_0);
    localWriteA_0_0_38_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_38_0);
    localWriteA_0_0_39_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_39_0);
    localWriteA_0_0_40_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_40_0);
    localWriteA_0_0_41_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_41_0);
    localWriteA_0_0_42_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_42_0);
    localWriteA_0_0_43_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_43_0);
    localWriteA_0_0_44_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_44_0);
    localWriteA_0_0_45_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_45_0);
    localWriteA_0_0_46_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_46_0);
    localWriteA_0_0_47_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_47_0);
    localWriteA_0_0_48_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_48_0);
    localWriteA_0_0_49_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_49_0);
    localWriteA_0_0_50_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_50_0);
    localWriteA_0_0_51_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_51_0);
    localWriteA_0_0_52_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_52_0);
    localWriteA_0_0_53_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_53_0);
    localWriteA_0_0_54_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_54_0);
    localWriteA_0_0_55_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_55_0);
    localWriteA_0_0_56_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_56_0);
    localWriteA_0_0_57_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_57_0);
    localWriteA_0_0_58_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_58_0);
    localWriteA_0_0_59_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_59_0);
    localWriteA_0_0_60_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_60_0);
    localWriteA_0_0_61_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_61_0);
    localWriteA_0_0_62_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_62_0);
    localWriteA_0_0_63_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_63_0);


    /* local write init pointers B */
    localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);


    __syncthreads(); //


    /* local read prefetch a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read prefetch b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);

  } // end PrefetchGlobalRead
  else { // still need to initC even if skipped prefetch

  rC[0] = SCALAR_ZERO;
  }


  /******************************************/
  /* Unrolled Loop(s) - Begin               */
  /******************************************/

  while (numIterL-- > 1) {


    /******************************************/
    /* Unroll Loop 1/1 - Begin                */
    /******************************************/



    /* global read A */
    a_0_0_0_0 = *(globalReadA_0_0_0_0 + 0);
    a_0_0_1_0 = *(globalReadA_0_0_1_0 + 0);
    a_0_0_2_0 = *(globalReadA_0_0_2_0 + 0);
    a_0_0_3_0 = *(globalReadA_0_0_3_0 + 0);
    a_0_0_4_0 = *(globalReadA_0_0_4_0 + 0);
    a_0_0_5_0 = *(globalReadA_0_0_5_0 + 0);
    a_0_0_6_0 = *(globalReadA_0_0_6_0 + 0);
    a_0_0_7_0 = *(globalReadA_0_0_7_0 + 0);
    a_0_0_8_0 = *(globalReadA_0_0_8_0 + 0);
    a_0_0_9_0 = *(globalReadA_0_0_9_0 + 0);
    a_0_0_10_0 = *(globalReadA_0_0_10_0 + 0);
    a_0_0_11_0 = *(globalReadA_0_0_11_0 + 0);
    a_0_0_12_0 = *(globalReadA_0_0_12_0 + 0);
    a_0_0_13_0 = *(globalReadA_0_0_13_0 + 0);
    a_0_0_14_0 = *(globalReadA_0_0_14_0 + 0);
    a_0_0_15_0 = *(globalReadA_0_0_15_0 + 0);
    a_0_0_16_0 = *(globalReadA_0_0_16_0 + 0);
    a_0_0_17_0 = *(globalReadA_0_0_17_0 + 0);
    a_0_0_18_0 = *(globalReadA_0_0_18_0 + 0);
    a_0_0_19_0 = *(globalReadA_0_0_19_0 + 0);
    a_0_0_20_0 = *(globalReadA_0_0_20_0 + 0);
    a_0_0_21_0 = *(globalReadA_0_0_21_0 + 0);
    a_0_0_22_0 = *(globalReadA_0_0_22_0 + 0);
    a_0_0_23_0 = *(globalReadA_0_0_23_0 + 0);
    a_0_0_24_0 = *(globalReadA_0_0_24_0 + 0);
    a_0_0_25_0 = *(globalReadA_0_0_25_0 + 0);
    a_0_0_26_0 = *(globalReadA_0_0_26_0 + 0);
    a_0_0_27_0 = *(globalReadA_0_0_27_0 + 0);
    a_0_0_28_0 = *(globalReadA_0_0_28_0 + 0);
    a_0_0_29_0 = *(globalReadA_0_0_29_0 + 0);
    a_0_0_30_0 = *(globalReadA_0_0_30_0 + 0);
    a_0_0_31_0 = *(globalReadA_0_0_31_0 + 0);
    a_0_0_32_0 = *(globalReadA_0_0_32_0 + 0);
    a_0_0_33_0 = *(globalReadA_0_0_33_0 + 0);
    a_0_0_34_0 = *(globalReadA_0_0_34_0 + 0);
    a_0_0_35_0 = *(globalReadA_0_0_35_0 + 0);
    a_0_0_36_0 = *(globalReadA_0_0_36_0 + 0);
    a_0_0_37_0 = *(globalReadA_0_0_37_0 + 0);
    a_0_0_38_0 = *(globalReadA_0_0_38_0 + 0);
    a_0_0_39_0 = *(globalReadA_0_0_39_0 + 0);
    a_0_0_40_0 = *(globalReadA_0_0_40_0 + 0);
    a_0_0_41_0 = *(globalReadA_0_0_41_0 + 0);
    a_0_0_42_0 = *(globalReadA_0_0_42_0 + 0);
    a_0_0_43_0 = *(globalReadA_0_0_43_0 + 0);
    a_0_0_44_0 = *(globalReadA_0_0_44_0 + 0);
    a_0_0_45_0 = *(globalReadA_0_0_45_0 + 0);
    a_0_0_46_0 = *(globalReadA_0_0_46_0 + 0);
    a_0_0_47_0 = *(globalReadA_0_0_47_0 + 0);
    a_0_0_48_0 = *(globalReadA_0_0_48_0 + 0);
    a_0_0_49_0 = *(globalReadA_0_0_49_0 + 0);
    a_0_0_50_0 = *(globalReadA_0_0_50_0 + 0);
    a_0_0_51_0 = *(globalReadA_0_0_51_0 + 0);
    a_0_0_52_0 = *(globalReadA_0_0_52_0 + 0);
    a_0_0_53_0 = *(globalReadA_0_0_53_0 + 0);
    a_0_0_54_0 = *(globalReadA_0_0_54_0 + 0);
    a_0_0_55_0 = *(globalReadA_0_0_55_0 + 0);
    a_0_0_56_0 = *(globalReadA_0_0_56_0 + 0);
    a_0_0_57_0 = *(globalReadA_0_0_57_0 + 0);
    a_0_0_58_0 = *(globalReadA_0_0_58_0 + 0);
    a_0_0_59_0 = *(globalReadA_0_0_59_0 + 0);
    a_0_0_60_0 = *(globalReadA_0_0_60_0 + 0);
    a_0_0_61_0 = *(globalReadA_0_0_61_0 + 0);
    a_0_0_62_0 = *(globalReadA_0_0_62_0 + 0);
    a_0_0_63_0 = *(globalReadA_0_0_63_0 + 0);

    /* global read B */
    b_0_0_0_0 = *(globalReadB_0_0_0_0 + 0);

    /* global read inc A for sumL */
    globalReadA_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_0_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_0_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_1_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_1_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_1_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_2_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_2_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_2_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_3_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_3_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_3_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_4_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_4_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_4_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_5_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_5_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_5_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_6_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_6_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_6_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_7_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_7_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_7_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_8_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_8_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_8_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_9_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_9_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_9_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_10_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_10_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_10_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_11_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_11_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_11_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_12_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_12_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_12_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_13_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_13_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_13_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_14_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_14_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_14_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_15_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_15_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_15_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_16_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_16_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_16_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_17_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_17_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_17_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_18_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_18_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_18_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_19_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_19_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_19_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_20_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_20_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_20_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_21_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_21_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_21_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_22_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_22_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_22_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_23_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_23_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_23_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_24_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_24_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_24_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_25_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_25_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_25_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_26_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_26_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_26_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_27_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_27_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_27_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_28_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_28_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_28_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_29_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_29_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_29_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_30_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_30_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_30_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_31_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_31_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_31_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_32_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_32_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_32_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_33_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_33_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_33_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_34_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_34_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_34_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_35_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_35_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_35_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_36_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_36_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_36_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_37_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_37_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_37_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_38_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_38_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_38_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_39_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_39_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_39_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_40_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_40_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_40_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_41_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_41_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_41_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_42_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_42_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_42_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_43_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_43_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_43_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_44_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_44_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_44_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_45_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_45_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_45_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_46_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_46_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_46_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_47_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_47_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_47_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_48_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_48_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_48_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_49_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_49_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_49_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_50_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_50_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_50_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_51_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_51_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_51_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_52_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_52_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_52_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_53_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_53_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_53_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_54_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_54_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_54_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_55_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_55_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_55_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_56_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_56_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_56_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_57_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_57_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_57_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_58_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_58_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_58_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_59_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_59_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_59_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_60_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_60_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_60_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_61_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_61_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_61_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_62_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_62_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_62_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }
    globalReadA_0_0_63_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_63_0) + 1*globalReadIncAL);
    if ((numIterL) == staggerUIter) {
      globalReadA_0_0_63_0 -= (origNumIter * globalReadIncAL); // wrap staggered offset back to row start
    }

    /* global read inc B for sumL */
    globalReadB_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_0_0) + 1*globalReadIncBL);
    if ((numIterL) == staggerUIter) {
      globalReadB_0_0_0_0 -= (origNumIter * globalReadIncBL); // wrap staggered offset back to row start
    }




    /* iter 0 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 1 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 2 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 3 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 4 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 5 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 6 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 7 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 8 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 9 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 10 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 11 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 12 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 13 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 14 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 15 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 16 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 17 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 18 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 19 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 20 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 21 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 22 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 23 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 24 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 25 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 26 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 27 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 28 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 29 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 30 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 31 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 32 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 33 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 34 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 35 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 36 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 37 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 38 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 39 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 40 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 41 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 42 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 43 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 44 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 45 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 46 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 47 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 48 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 49 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 50 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 51 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 52 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 53 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 54 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 55 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 56 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 57 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 58 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 59 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 60 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1


    /* iter 61 */


    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK


    /* iter 62 (localWrite + swap local pointers iteration) */


    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

/* local write A */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
    *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
    *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
    *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
    *(localWriteA_0_0_4_0 + 0) = a_0_0_4_0;
    *(localWriteA_0_0_5_0 + 0) = a_0_0_5_0;
    *(localWriteA_0_0_6_0 + 0) = a_0_0_6_0;
    *(localWriteA_0_0_7_0 + 0) = a_0_0_7_0;
    *(localWriteA_0_0_8_0 + 0) = a_0_0_8_0;
    *(localWriteA_0_0_9_0 + 0) = a_0_0_9_0;
    *(localWriteA_0_0_10_0 + 0) = a_0_0_10_0;
    *(localWriteA_0_0_11_0 + 0) = a_0_0_11_0;
    *(localWriteA_0_0_12_0 + 0) = a_0_0_12_0;
    *(localWriteA_0_0_13_0 + 0) = a_0_0_13_0;
    *(localWriteA_0_0_14_0 + 0) = a_0_0_14_0;
    *(localWriteA_0_0_15_0 + 0) = a_0_0_15_0;
    *(localWriteA_0_0_16_0 + 0) = a_0_0_16_0;
    *(localWriteA_0_0_17_0 + 0) = a_0_0_17_0;
    *(localWriteA_0_0_18_0 + 0) = a_0_0_18_0;
    *(localWriteA_0_0_19_0 + 0) = a_0_0_19_0;
    *(localWriteA_0_0_20_0 + 0) = a_0_0_20_0;
    *(localWriteA_0_0_21_0 + 0) = a_0_0_21_0;
    *(localWriteA_0_0_22_0 + 0) = a_0_0_22_0;
    *(localWriteA_0_0_23_0 + 0) = a_0_0_23_0;
    *(localWriteA_0_0_24_0 + 0) = a_0_0_24_0;
    *(localWriteA_0_0_25_0 + 0) = a_0_0_25_0;
    *(localWriteA_0_0_26_0 + 0) = a_0_0_26_0;
    *(localWriteA_0_0_27_0 + 0) = a_0_0_27_0;
    *(localWriteA_0_0_28_0 + 0) = a_0_0_28_0;
    *(localWriteA_0_0_29_0 + 0) = a_0_0_29_0;
    *(localWriteA_0_0_30_0 + 0) = a_0_0_30_0;
    *(localWriteA_0_0_31_0 + 0) = a_0_0_31_0;
    *(localWriteA_0_0_32_0 + 0) = a_0_0_32_0;
    *(localWriteA_0_0_33_0 + 0) = a_0_0_33_0;
    *(localWriteA_0_0_34_0 + 0) = a_0_0_34_0;
    *(localWriteA_0_0_35_0 + 0) = a_0_0_35_0;
    *(localWriteA_0_0_36_0 + 0) = a_0_0_36_0;
    *(localWriteA_0_0_37_0 + 0) = a_0_0_37_0;
    *(localWriteA_0_0_38_0 + 0) = a_0_0_38_0;
    *(localWriteA_0_0_39_0 + 0) = a_0_0_39_0;
    *(localWriteA_0_0_40_0 + 0) = a_0_0_40_0;
    *(localWriteA_0_0_41_0 + 0) = a_0_0_41_0;
    *(localWriteA_0_0_42_0 + 0) = a_0_0_42_0;
    *(localWriteA_0_0_43_0 + 0) = a_0_0_43_0;
    *(localWriteA_0_0_44_0 + 0) = a_0_0_44_0;
    *(localWriteA_0_0_45_0 + 0) = a_0_0_45_0;
    *(localWriteA_0_0_46_0 + 0) = a_0_0_46_0;
    *(localWriteA_0_0_47_0 + 0) = a_0_0_47_0;
    *(localWriteA_0_0_48_0 + 0) = a_0_0_48_0;
    *(localWriteA_0_0_49_0 + 0) = a_0_0_49_0;
    *(localWriteA_0_0_50_0 + 0) = a_0_0_50_0;
    *(localWriteA_0_0_51_0 + 0) = a_0_0_51_0;
    *(localWriteA_0_0_52_0 + 0) = a_0_0_52_0;
    *(localWriteA_0_0_53_0 + 0) = a_0_0_53_0;
    *(localWriteA_0_0_54_0 + 0) = a_0_0_54_0;
    *(localWriteA_0_0_55_0 + 0) = a_0_0_55_0;
    *(localWriteA_0_0_56_0 + 0) = a_0_0_56_0;
    *(localWriteA_0_0_57_0 + 0) = a_0_0_57_0;
    *(localWriteA_0_0_58_0 + 0) = a_0_0_58_0;
    *(localWriteA_0_0_59_0 + 0) = a_0_0_59_0;
    *(localWriteA_0_0_60_0 + 0) = a_0_0_60_0;
    *(localWriteA_0_0_61_0 + 0) = a_0_0_61_0;
    *(localWriteA_0_0_62_0 + 0) = a_0_0_62_0;
    *(localWriteA_0_0_63_0 + 0) = a_0_0_63_0;
#pragma clang diagnostic pop

/* local write B */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
#pragma clang diagnostic pop

    /* local write swap offsets a */
    localWriteOffsetA_0_0_0_0 = (localWriteOffsetA_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_1_0 = (localWriteOffsetA_0_0_1_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_2_0 = (localWriteOffsetA_0_0_2_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_3_0 = (localWriteOffsetA_0_0_3_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_4_0 = (localWriteOffsetA_0_0_4_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_5_0 = (localWriteOffsetA_0_0_5_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_6_0 = (localWriteOffsetA_0_0_6_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_7_0 = (localWriteOffsetA_0_0_7_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_8_0 = (localWriteOffsetA_0_0_8_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_9_0 = (localWriteOffsetA_0_0_9_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_10_0 = (localWriteOffsetA_0_0_10_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_11_0 = (localWriteOffsetA_0_0_11_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_12_0 = (localWriteOffsetA_0_0_12_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_13_0 = (localWriteOffsetA_0_0_13_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_14_0 = (localWriteOffsetA_0_0_14_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_15_0 = (localWriteOffsetA_0_0_15_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_16_0 = (localWriteOffsetA_0_0_16_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_17_0 = (localWriteOffsetA_0_0_17_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_18_0 = (localWriteOffsetA_0_0_18_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_19_0 = (localWriteOffsetA_0_0_19_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_20_0 = (localWriteOffsetA_0_0_20_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_21_0 = (localWriteOffsetA_0_0_21_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_22_0 = (localWriteOffsetA_0_0_22_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_23_0 = (localWriteOffsetA_0_0_23_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_24_0 = (localWriteOffsetA_0_0_24_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_25_0 = (localWriteOffsetA_0_0_25_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_26_0 = (localWriteOffsetA_0_0_26_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_27_0 = (localWriteOffsetA_0_0_27_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_28_0 = (localWriteOffsetA_0_0_28_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_29_0 = (localWriteOffsetA_0_0_29_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_30_0 = (localWriteOffsetA_0_0_30_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_31_0 = (localWriteOffsetA_0_0_31_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_32_0 = (localWriteOffsetA_0_0_32_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_33_0 = (localWriteOffsetA_0_0_33_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_34_0 = (localWriteOffsetA_0_0_34_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_35_0 = (localWriteOffsetA_0_0_35_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_36_0 = (localWriteOffsetA_0_0_36_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_37_0 = (localWriteOffsetA_0_0_37_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_38_0 = (localWriteOffsetA_0_0_38_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_39_0 = (localWriteOffsetA_0_0_39_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_40_0 = (localWriteOffsetA_0_0_40_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_41_0 = (localWriteOffsetA_0_0_41_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_42_0 = (localWriteOffsetA_0_0_42_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_43_0 = (localWriteOffsetA_0_0_43_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_44_0 = (localWriteOffsetA_0_0_44_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_45_0 = (localWriteOffsetA_0_0_45_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_46_0 = (localWriteOffsetA_0_0_46_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_47_0 = (localWriteOffsetA_0_0_47_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_48_0 = (localWriteOffsetA_0_0_48_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_49_0 = (localWriteOffsetA_0_0_49_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_50_0 = (localWriteOffsetA_0_0_50_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_51_0 = (localWriteOffsetA_0_0_51_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_52_0 = (localWriteOffsetA_0_0_52_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_53_0 = (localWriteOffsetA_0_0_53_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_54_0 = (localWriteOffsetA_0_0_54_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_55_0 = (localWriteOffsetA_0_0_55_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_56_0 = (localWriteOffsetA_0_0_56_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_57_0 = (localWriteOffsetA_0_0_57_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_58_0 = (localWriteOffsetA_0_0_58_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_59_0 = (localWriteOffsetA_0_0_59_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_60_0 = (localWriteOffsetA_0_0_60_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_61_0 = (localWriteOffsetA_0_0_61_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_62_0 = (localWriteOffsetA_0_0_62_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_0_0_63_0 = (localWriteOffsetA_0_0_63_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write swap offsets b */
    localWriteOffsetB_0_0_0_0 = (localWriteOffsetB_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write init pointers A */
    localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
    localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
    localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
    localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);
    localWriteA_0_0_4_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_4_0);
    localWriteA_0_0_5_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_5_0);
    localWriteA_0_0_6_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_6_0);
    localWriteA_0_0_7_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_7_0);
    localWriteA_0_0_8_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_8_0);
    localWriteA_0_0_9_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_9_0);
    localWriteA_0_0_10_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_10_0);
    localWriteA_0_0_11_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_11_0);
    localWriteA_0_0_12_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_12_0);
    localWriteA_0_0_13_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_13_0);
    localWriteA_0_0_14_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_14_0);
    localWriteA_0_0_15_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_15_0);
    localWriteA_0_0_16_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_16_0);
    localWriteA_0_0_17_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_17_0);
    localWriteA_0_0_18_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_18_0);
    localWriteA_0_0_19_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_19_0);
    localWriteA_0_0_20_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_20_0);
    localWriteA_0_0_21_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_21_0);
    localWriteA_0_0_22_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_22_0);
    localWriteA_0_0_23_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_23_0);
    localWriteA_0_0_24_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_24_0);
    localWriteA_0_0_25_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_25_0);
    localWriteA_0_0_26_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_26_0);
    localWriteA_0_0_27_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_27_0);
    localWriteA_0_0_28_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_28_0);
    localWriteA_0_0_29_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_29_0);
    localWriteA_0_0_30_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_30_0);
    localWriteA_0_0_31_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_31_0);
    localWriteA_0_0_32_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_32_0);
    localWriteA_0_0_33_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_33_0);
    localWriteA_0_0_34_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_34_0);
    localWriteA_0_0_35_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_35_0);
    localWriteA_0_0_36_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_36_0);
    localWriteA_0_0_37_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_37_0);
    localWriteA_0_0_38_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_38_0);
    localWriteA_0_0_39_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_39_0);
    localWriteA_0_0_40_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_40_0);
    localWriteA_0_0_41_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_41_0);
    localWriteA_0_0_42_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_42_0);
    localWriteA_0_0_43_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_43_0);
    localWriteA_0_0_44_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_44_0);
    localWriteA_0_0_45_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_45_0);
    localWriteA_0_0_46_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_46_0);
    localWriteA_0_0_47_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_47_0);
    localWriteA_0_0_48_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_48_0);
    localWriteA_0_0_49_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_49_0);
    localWriteA_0_0_50_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_50_0);
    localWriteA_0_0_51_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_51_0);
    localWriteA_0_0_52_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_52_0);
    localWriteA_0_0_53_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_53_0);
    localWriteA_0_0_54_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_54_0);
    localWriteA_0_0_55_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_55_0);
    localWriteA_0_0_56_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_56_0);
    localWriteA_0_0_57_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_57_0);
    localWriteA_0_0_58_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_58_0);
    localWriteA_0_0_59_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_59_0);
    localWriteA_0_0_60_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_60_0);
    localWriteA_0_0_61_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_61_0);
    localWriteA_0_0_62_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_62_0);
    localWriteA_0_0_63_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_63_0);

    /* local write init pointers B */
    localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);

    /* local read swap offsets a */
    localReadOffsetA = (localReadOffsetA + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local read swap offsets b */
    localReadOffsetB = (localReadOffsetB + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local read init pointers a */
    localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

    /* local read init pointers b */
    localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);
    MAC_1x1


    /* iter 63 */

    __syncthreads(); //

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_1x1_BLK




    /******************************************/
    /* Unrolled Loop - End                    */
    /******************************************/

  }


  if (numIterMyWg >= 1) {


    /* iter 0 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 1 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 2 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 3 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 4 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 5 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 6 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 7 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 8 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 9 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 10 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 11 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 12 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 13 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 14 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 15 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 16 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 17 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 18 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 19 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 20 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 21 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 22 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 23 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 24 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 25 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 26 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 27 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 28 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 29 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 30 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 31 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 32 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 33 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 34 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 35 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 36 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 37 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 38 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 39 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 40 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 41 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 42 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 43 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 44 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 45 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 46 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 47 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 48 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 49 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 50 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 51 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 52 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 53 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 54 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 55 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 56 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 57 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 58 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 59 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 60 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 61 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1_BLK


    /* iter 62 */


    /* local read a */

    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1


    /* iter 63 */


    MAC_1x1_BLK

  } // end unroll


  /******************************************/
  /* Tail Loop                              */
  /******************************************/


  /* local write reset offsets a */

  localWriteOffsetA_0_0_0_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_1_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_2_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_3_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_4_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_5_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_6_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_7_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_8_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_9_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_10_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_11_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_12_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_13_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_14_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_15_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_16_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_17_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_18_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_19_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_20_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_21_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_22_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_23_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_24_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_25_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_26_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_27_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_28_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_29_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_30_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_31_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_32_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_33_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_34_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_35_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_36_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_37_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_38_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_39_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_40_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_41_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_42_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_43_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_44_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_45_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_46_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_47_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_48_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_49_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_50_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_51_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_52_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_53_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_54_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_55_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_56_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_57_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_58_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_59_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_60_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_61_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_62_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_0_0_63_0 %= LDS_OFFSET_BLK;


  /* local write reset offsets b */

  localWriteOffsetB_0_0_0_0 %= LDS_OFFSET_BLK;


  /* Compute tail loop num iter */
  numIterL = (((sizeL % LOCAL_DEPTHU) + LOCAL_SPLITU - 1) / LOCAL_SPLITU);
  if (gsuSumIdx != numIterPerWgRemainder) {
    numIterL = 0;
  }


  /* remove stagger offsets for tail loop */

  globalReadA_0_0_0_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_1_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_2_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_3_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_4_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_5_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_6_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_7_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_8_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_9_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_10_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_11_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_12_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_13_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_14_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_15_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_16_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_17_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_18_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_19_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_20_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_21_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_22_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_23_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_24_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_25_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_26_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_27_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_28_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_29_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_30_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_31_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_32_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_33_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_34_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_35_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_36_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_37_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_38_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_39_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_40_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_41_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_42_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_43_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_44_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_45_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_46_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_47_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_48_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_49_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_50_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_51_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_52_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_53_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_54_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_55_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_56_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_57_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_58_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_59_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_60_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_61_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_62_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset
  globalReadA_0_0_63_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncAL); // remove stagger offset

  globalReadB_0_0_0_0 += ((origNumIter - (staggerUIter - 1)) * globalReadIncBL); // remove stagger offset


  /* Update M0 for DTLDS */



  /* global read a */


  /* global read A */
  a_0_0_0_0 = ( globalReadOffsetAL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_0_0 + 0);
  a_0_0_1_0 = ( globalReadOffsetAL_1_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_1_0 + 0);
  a_0_0_2_0 = ( globalReadOffsetAL_2_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_2_0 + 0);
  a_0_0_3_0 = ( globalReadOffsetAL_3_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_3_0 + 0);
  a_0_0_4_0 = ( globalReadOffsetAL_4_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_4_0 + 0);
  a_0_0_5_0 = ( globalReadOffsetAL_5_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_5_0 + 0);
  a_0_0_6_0 = ( globalReadOffsetAL_6_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_6_0 + 0);
  a_0_0_7_0 = ( globalReadOffsetAL_7_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_7_0 + 0);
  a_0_0_8_0 = ( globalReadOffsetAL_8_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_8_0 + 0);
  a_0_0_9_0 = ( globalReadOffsetAL_9_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_9_0 + 0);
  a_0_0_10_0 = ( globalReadOffsetAL_10_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_10_0 + 0);
  a_0_0_11_0 = ( globalReadOffsetAL_11_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_11_0 + 0);
  a_0_0_12_0 = ( globalReadOffsetAL_12_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_12_0 + 0);
  a_0_0_13_0 = ( globalReadOffsetAL_13_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_13_0 + 0);
  a_0_0_14_0 = ( globalReadOffsetAL_14_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_14_0 + 0);
  a_0_0_15_0 = ( globalReadOffsetAL_15_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_15_0 + 0);
  a_0_0_16_0 = ( globalReadOffsetAL_16_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_16_0 + 0);
  a_0_0_17_0 = ( globalReadOffsetAL_17_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_17_0 + 0);
  a_0_0_18_0 = ( globalReadOffsetAL_18_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_18_0 + 0);
  a_0_0_19_0 = ( globalReadOffsetAL_19_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_19_0 + 0);
  a_0_0_20_0 = ( globalReadOffsetAL_20_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_20_0 + 0);
  a_0_0_21_0 = ( globalReadOffsetAL_21_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_21_0 + 0);
  a_0_0_22_0 = ( globalReadOffsetAL_22_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_22_0 + 0);
  a_0_0_23_0 = ( globalReadOffsetAL_23_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_23_0 + 0);
  a_0_0_24_0 = ( globalReadOffsetAL_24_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_24_0 + 0);
  a_0_0_25_0 = ( globalReadOffsetAL_25_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_25_0 + 0);
  a_0_0_26_0 = ( globalReadOffsetAL_26_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_26_0 + 0);
  a_0_0_27_0 = ( globalReadOffsetAL_27_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_27_0 + 0);
  a_0_0_28_0 = ( globalReadOffsetAL_28_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_28_0 + 0);
  a_0_0_29_0 = ( globalReadOffsetAL_29_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_29_0 + 0);
  a_0_0_30_0 = ( globalReadOffsetAL_30_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_30_0 + 0);
  a_0_0_31_0 = ( globalReadOffsetAL_31_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_31_0 + 0);
  a_0_0_32_0 = ( globalReadOffsetAL_32_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_32_0 + 0);
  a_0_0_33_0 = ( globalReadOffsetAL_33_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_33_0 + 0);
  a_0_0_34_0 = ( globalReadOffsetAL_34_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_34_0 + 0);
  a_0_0_35_0 = ( globalReadOffsetAL_35_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_35_0 + 0);
  a_0_0_36_0 = ( globalReadOffsetAL_36_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_36_0 + 0);
  a_0_0_37_0 = ( globalReadOffsetAL_37_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_37_0 + 0);
  a_0_0_38_0 = ( globalReadOffsetAL_38_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_38_0 + 0);
  a_0_0_39_0 = ( globalReadOffsetAL_39_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_39_0 + 0);
  a_0_0_40_0 = ( globalReadOffsetAL_40_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_40_0 + 0);
  a_0_0_41_0 = ( globalReadOffsetAL_41_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_41_0 + 0);
  a_0_0_42_0 = ( globalReadOffsetAL_42_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_42_0 + 0);
  a_0_0_43_0 = ( globalReadOffsetAL_43_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_43_0 + 0);
  a_0_0_44_0 = ( globalReadOffsetAL_44_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_44_0 + 0);
  a_0_0_45_0 = ( globalReadOffsetAL_45_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_45_0 + 0);
  a_0_0_46_0 = ( globalReadOffsetAL_46_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_46_0 + 0);
  a_0_0_47_0 = ( globalReadOffsetAL_47_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_47_0 + 0);
  a_0_0_48_0 = ( globalReadOffsetAL_48_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_48_0 + 0);
  a_0_0_49_0 = ( globalReadOffsetAL_49_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_49_0 + 0);
  a_0_0_50_0 = ( globalReadOffsetAL_50_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_50_0 + 0);
  a_0_0_51_0 = ( globalReadOffsetAL_51_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_51_0 + 0);
  a_0_0_52_0 = ( globalReadOffsetAL_52_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_52_0 + 0);
  a_0_0_53_0 = ( globalReadOffsetAL_53_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_53_0 + 0);
  a_0_0_54_0 = ( globalReadOffsetAL_54_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_54_0 + 0);
  a_0_0_55_0 = ( globalReadOffsetAL_55_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_55_0 + 0);
  a_0_0_56_0 = ( globalReadOffsetAL_56_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_56_0 + 0);
  a_0_0_57_0 = ( globalReadOffsetAL_57_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_57_0 + 0);
  a_0_0_58_0 = ( globalReadOffsetAL_58_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_58_0 + 0);
  a_0_0_59_0 = ( globalReadOffsetAL_59_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_59_0 + 0);
  a_0_0_60_0 = ( globalReadOffsetAL_60_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_60_0 + 0);
  a_0_0_61_0 = ( globalReadOffsetAL_61_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_61_0 + 0);
  a_0_0_62_0 = ( globalReadOffsetAL_62_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_62_0 + 0);
  a_0_0_63_0 = ( globalReadOffsetAL_63_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadA_0_0_63_0 + 0);


  /* Update M0 for DTLDS */



  /* global read b */


  /* global read B */
  b_0_0_0_0 = ( globalReadOffsetBL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU + LOCAL_DEPTHU*gsuSumIdx) || !numIterL ) ? SCALAR_OOB_DATA : *(globalReadB_0_0_0_0 + 0);


  __syncthreads(); //


  /* local write init pointers A */
  localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
  localWriteA_0_0_1_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_1_0);
  localWriteA_0_0_2_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_2_0);
  localWriteA_0_0_3_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_3_0);
  localWriteA_0_0_4_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_4_0);
  localWriteA_0_0_5_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_5_0);
  localWriteA_0_0_6_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_6_0);
  localWriteA_0_0_7_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_7_0);
  localWriteA_0_0_8_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_8_0);
  localWriteA_0_0_9_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_9_0);
  localWriteA_0_0_10_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_10_0);
  localWriteA_0_0_11_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_11_0);
  localWriteA_0_0_12_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_12_0);
  localWriteA_0_0_13_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_13_0);
  localWriteA_0_0_14_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_14_0);
  localWriteA_0_0_15_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_15_0);
  localWriteA_0_0_16_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_16_0);
  localWriteA_0_0_17_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_17_0);
  localWriteA_0_0_18_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_18_0);
  localWriteA_0_0_19_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_19_0);
  localWriteA_0_0_20_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_20_0);
  localWriteA_0_0_21_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_21_0);
  localWriteA_0_0_22_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_22_0);
  localWriteA_0_0_23_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_23_0);
  localWriteA_0_0_24_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_24_0);
  localWriteA_0_0_25_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_25_0);
  localWriteA_0_0_26_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_26_0);
  localWriteA_0_0_27_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_27_0);
  localWriteA_0_0_28_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_28_0);
  localWriteA_0_0_29_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_29_0);
  localWriteA_0_0_30_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_30_0);
  localWriteA_0_0_31_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_31_0);
  localWriteA_0_0_32_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_32_0);
  localWriteA_0_0_33_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_33_0);
  localWriteA_0_0_34_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_34_0);
  localWriteA_0_0_35_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_35_0);
  localWriteA_0_0_36_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_36_0);
  localWriteA_0_0_37_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_37_0);
  localWriteA_0_0_38_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_38_0);
  localWriteA_0_0_39_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_39_0);
  localWriteA_0_0_40_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_40_0);
  localWriteA_0_0_41_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_41_0);
  localWriteA_0_0_42_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_42_0);
  localWriteA_0_0_43_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_43_0);
  localWriteA_0_0_44_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_44_0);
  localWriteA_0_0_45_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_45_0);
  localWriteA_0_0_46_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_46_0);
  localWriteA_0_0_47_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_47_0);
  localWriteA_0_0_48_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_48_0);
  localWriteA_0_0_49_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_49_0);
  localWriteA_0_0_50_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_50_0);
  localWriteA_0_0_51_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_51_0);
  localWriteA_0_0_52_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_52_0);
  localWriteA_0_0_53_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_53_0);
  localWriteA_0_0_54_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_54_0);
  localWriteA_0_0_55_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_55_0);
  localWriteA_0_0_56_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_56_0);
  localWriteA_0_0_57_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_57_0);
  localWriteA_0_0_58_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_58_0);
  localWriteA_0_0_59_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_59_0);
  localWriteA_0_0_60_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_60_0);
  localWriteA_0_0_61_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_61_0);
  localWriteA_0_0_62_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_62_0);
  localWriteA_0_0_63_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_63_0);


  /* local write init pointers B */
  localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);


  /* local write a */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
  *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
  *(localWriteA_0_0_1_0 + 0) = a_0_0_1_0;
  *(localWriteA_0_0_2_0 + 0) = a_0_0_2_0;
  *(localWriteA_0_0_3_0 + 0) = a_0_0_3_0;
  *(localWriteA_0_0_4_0 + 0) = a_0_0_4_0;
  *(localWriteA_0_0_5_0 + 0) = a_0_0_5_0;
  *(localWriteA_0_0_6_0 + 0) = a_0_0_6_0;
  *(localWriteA_0_0_7_0 + 0) = a_0_0_7_0;
  *(localWriteA_0_0_8_0 + 0) = a_0_0_8_0;
  *(localWriteA_0_0_9_0 + 0) = a_0_0_9_0;
  *(localWriteA_0_0_10_0 + 0) = a_0_0_10_0;
  *(localWriteA_0_0_11_0 + 0) = a_0_0_11_0;
  *(localWriteA_0_0_12_0 + 0) = a_0_0_12_0;
  *(localWriteA_0_0_13_0 + 0) = a_0_0_13_0;
  *(localWriteA_0_0_14_0 + 0) = a_0_0_14_0;
  *(localWriteA_0_0_15_0 + 0) = a_0_0_15_0;
  *(localWriteA_0_0_16_0 + 0) = a_0_0_16_0;
  *(localWriteA_0_0_17_0 + 0) = a_0_0_17_0;
  *(localWriteA_0_0_18_0 + 0) = a_0_0_18_0;
  *(localWriteA_0_0_19_0 + 0) = a_0_0_19_0;
  *(localWriteA_0_0_20_0 + 0) = a_0_0_20_0;
  *(localWriteA_0_0_21_0 + 0) = a_0_0_21_0;
  *(localWriteA_0_0_22_0 + 0) = a_0_0_22_0;
  *(localWriteA_0_0_23_0 + 0) = a_0_0_23_0;
  *(localWriteA_0_0_24_0 + 0) = a_0_0_24_0;
  *(localWriteA_0_0_25_0 + 0) = a_0_0_25_0;
  *(localWriteA_0_0_26_0 + 0) = a_0_0_26_0;
  *(localWriteA_0_0_27_0 + 0) = a_0_0_27_0;
  *(localWriteA_0_0_28_0 + 0) = a_0_0_28_0;
  *(localWriteA_0_0_29_0 + 0) = a_0_0_29_0;
  *(localWriteA_0_0_30_0 + 0) = a_0_0_30_0;
  *(localWriteA_0_0_31_0 + 0) = a_0_0_31_0;
  *(localWriteA_0_0_32_0 + 0) = a_0_0_32_0;
  *(localWriteA_0_0_33_0 + 0) = a_0_0_33_0;
  *(localWriteA_0_0_34_0 + 0) = a_0_0_34_0;
  *(localWriteA_0_0_35_0 + 0) = a_0_0_35_0;
  *(localWriteA_0_0_36_0 + 0) = a_0_0_36_0;
  *(localWriteA_0_0_37_0 + 0) = a_0_0_37_0;
  *(localWriteA_0_0_38_0 + 0) = a_0_0_38_0;
  *(localWriteA_0_0_39_0 + 0) = a_0_0_39_0;
  *(localWriteA_0_0_40_0 + 0) = a_0_0_40_0;
  *(localWriteA_0_0_41_0 + 0) = a_0_0_41_0;
  *(localWriteA_0_0_42_0 + 0) = a_0_0_42_0;
  *(localWriteA_0_0_43_0 + 0) = a_0_0_43_0;
  *(localWriteA_0_0_44_0 + 0) = a_0_0_44_0;
  *(localWriteA_0_0_45_0 + 0) = a_0_0_45_0;
  *(localWriteA_0_0_46_0 + 0) = a_0_0_46_0;
  *(localWriteA_0_0_47_0 + 0) = a_0_0_47_0;
  *(localWriteA_0_0_48_0 + 0) = a_0_0_48_0;
  *(localWriteA_0_0_49_0 + 0) = a_0_0_49_0;
  *(localWriteA_0_0_50_0 + 0) = a_0_0_50_0;
  *(localWriteA_0_0_51_0 + 0) = a_0_0_51_0;
  *(localWriteA_0_0_52_0 + 0) = a_0_0_52_0;
  *(localWriteA_0_0_53_0 + 0) = a_0_0_53_0;
  *(localWriteA_0_0_54_0 + 0) = a_0_0_54_0;
  *(localWriteA_0_0_55_0 + 0) = a_0_0_55_0;
  *(localWriteA_0_0_56_0 + 0) = a_0_0_56_0;
  *(localWriteA_0_0_57_0 + 0) = a_0_0_57_0;
  *(localWriteA_0_0_58_0 + 0) = a_0_0_58_0;
  *(localWriteA_0_0_59_0 + 0) = a_0_0_59_0;
  *(localWriteA_0_0_60_0 + 0) = a_0_0_60_0;
  *(localWriteA_0_0_61_0 + 0) = a_0_0_61_0;
  *(localWriteA_0_0_62_0 + 0) = a_0_0_62_0;
  *(localWriteA_0_0_63_0 + 0) = a_0_0_63_0;
#pragma clang diagnostic pop


  /* local write b */

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
  *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
#pragma clang diagnostic pop


  __syncthreads(); //


  /* local read reset offsets a */

  localReadOffsetA %= LDS_OFFSET_BLK;


  /* local read reset offsets b */

  localReadOffsetB %= LDS_OFFSET_BLK;


  /* local read init pointers a */

  localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);


  /* local read init pointers b */

  localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);


  /* tail loop: macs */

  while (numIterL-- > 0) {


    /* local read a */

    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 


    /* local read b */

    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 


    /* local read inc a */

    localReadA += LOCAL_SPLITU*(MT0I+PAD);


    /* local read inc b */

    localReadB += LOCAL_SPLITU*(MT1J+PAD);


    MAC_1x1

  }




  /* not-LocalSplitU: global write indices */

  unsigned int flattenedGlobalC0 = (wg0I)*MT0I + (serial % SG0I)*VECTOR_WIDTH;
  unsigned int flattenedGlobalC1 = (wg1J)*MT1J + (serial / SG0I)*VECTOR_WIDTH;
  unsigned int globalC0I = flattenedGlobalC0;
  unsigned int globalC1J = flattenedGlobalC1;
  unsigned int globalCK = (wgK);


  /* not-LocalSplitU: global write */

  if (flattenedGlobalC0 + 0*SG0I*VECTOR_WIDTH < size0I) {  if (flattenedGlobalC1 + 0*SG1J*VECTOR_WIDTH < size1J) {   } }

  /* new vw0 offset - inc and extract tensor dims */
  globalC0I =   flattenedGlobalC0 +  0*SG0I*VECTOR_WIDTH;
  /* new vw1 offset - inc and extract tensor dims */
  globalC1J =   flattenedGlobalC1 + 0 + 0*SG1J*VECTOR_WIDTH;
  if (flattenedGlobalC0 + 0*SG0I*VECTOR_WIDTH < size0I) 
  {  if (flattenedGlobalC1 + 0*SG1J*VECTOR_WIDTH < size1J)
	 {  
	  D[gsuSumIdx + 1] = rC[0];
	  TYPE_MAC_WRITE( D[ GLOBAL_D( (uint64_t) globalC0I, (uint64_t) globalC1J, (uint64_t) globalCK) ], C[ GLOBAL_C( (uint64_t) globalC0I, (uint64_t) globalC1J, (uint64_t) globalCK) ], alpha, rC[0*VECTOR_WIDTH+0 + (0*VECTOR_WIDTH+0)*TT0I], beta)
    } 
  }


}

#undef UNROLL
#undef LOCAL_SPLITU
#undef LOCAL_DEPTHU
#undef SG0I
#undef SG1J
#undef TT0I
#undef TT1J
#undef MT0I
#undef MT1J
#undef NLCA
#undef NLCB
#undef NLPA
#undef NLPB
#undef LSCA
#undef LSPA
#undef LSCB
#undef LSPB
#undef GLOBAL_C
#undef GLOBAL_OFFSET_A
#undef GLOBAL_OFFSET_B
#undef DATA_TYPE
#undef DEST_DATA_TYPE
#undef COMPUTE_DATA_TYPE
#undef LDS_OFFSET_B
#undef LDS_OFFSET_BLK
#undef LDS_NUM_ELEMENTS
#undef NUM_THREADS
#undef WORK_GROUP_MAPPING
#undef VECTOR_WIDTH
#undef GLOBAL_LOAD_VECTOR_WIDTH_A
#undef GLOBAL_LOAD_VECTOR_WIDTH_B
#undef GLOBAL_WRITE_VECTOR_WIDTH
#undef MAC
#undef TYPE_MAC
#undef TYPE_MAC_WRITE
#undef GLOBAL_SPLITU
#undef SCALAR_ZERO
#undef SCALAR_OOB_DATA
#undef MAC_1x1
#undef MAC_1x1_BLK
#undef strideD0I
#undef strideC0I
#undef strideA0I
#undef strideB1J





extern "C"
__global__ void Cijk_H_GA(
  float *D,
  tensile_half const * __restrict__ C,
  unsigned int const strideD1J,
  unsigned int const strideDK,
  unsigned int const strideC1J,
  unsigned int const strideCK,
  unsigned int const size0I,
  unsigned int const size1J,
  unsigned int const sizeK)
{
/* hard-coded initial strides */
#define strideD0I 1
#define strideC0I 1
#define GLOBAL_D(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideD0I + (IDX1J)*strideD1J + (IDXK)*strideDK ))
#define GLOBAL_C(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideC0I + (IDX1J)*strideC1J + (IDXK)*strideCK ))
 if ((hc_get_workitem_absolute_id(0) >=  size0I)
   || (hc_get_workitem_absolute_id(1) >=  size1J)
   || (hc_get_workitem_absolute_id(2) >=  sizeK))
    return;
  unsigned int wgK = ( hc_get_group_id(2));
  unsigned int globalC0I = ( hc_get_workitem_absolute_id(0));
  unsigned int globalC1J = ( hc_get_workitem_absolute_id(1));
  uint64_t idxD = GLOBAL_D( (uint64_t)globalC0I, globalC1J, wgK);
  uint64_t idxC = GLOBAL_C( (uint64_t)globalC0I, globalC1J, wgK);
#define SCALAR_ZERO ((float)(0))
  D[idxD] = SCALAR_ZERO;
}
#undef GLOBAL_D
#undef GLOBAL_C
#undef SCALAR_ZERO

extern "C"
__global__ void Cijk_HB_GA(
  float *D,
  tensile_half const * __restrict__ C,
  unsigned int const strideD1J,
  unsigned int const strideDK,
  unsigned int const strideC1J,
  unsigned int const strideCK,
  unsigned int const size0I,
  unsigned int const size1J,
  unsigned int const sizeK,
  tensile_half const beta)
{
/* hard-coded initial strides */
#define strideD0I 1
#define strideC0I 1
#define GLOBAL_D(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideD0I + (IDX1J)*strideD1J + (IDXK)*strideDK ))
#define GLOBAL_C(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideC0I + (IDX1J)*strideC1J + (IDXK)*strideCK ))
 if ((hc_get_workitem_absolute_id(0) >=  size0I)
   || (hc_get_workitem_absolute_id(1) >=  size1J)
   || (hc_get_workitem_absolute_id(2) >=  sizeK))
    return;
  unsigned int wgK = ( hc_get_group_id(2));
  unsigned int globalC0I = ( hc_get_workitem_absolute_id(0));
  unsigned int globalC1J = ( hc_get_workitem_absolute_id(1));
  uint64_t idxD = GLOBAL_D( (uint64_t)globalC0I, globalC1J, wgK);
  uint64_t idxC = GLOBAL_C( (uint64_t)globalC0I, globalC1J, wgK);
#define SCALAR_ZERO ((float)(0))
  if(beta == SCALAR_ZERO) {
    D[idxD] = SCALAR_ZERO;
  } else {
    D[idxD] = ((tensile_half)(C[idxC])) * beta;
  }
}
#undef GLOBAL_D
#undef GLOBAL_C
#undef SCALAR_ZERO

extern "C"
__global__ void Cijk_H_Convert(
  tensile_half * dst,
  float * src,
  unsigned int const stride1J,
  unsigned int const strideK,
  unsigned int const size0I,
  unsigned int const size1J,
  unsigned int const sizeK)
{
/* hard-coded initial strides */
#define stride0I 1
#define GLOBAL(IDX0I, IDX1J, IDXK) (( (IDX0I)*stride0I + (IDX1J)*stride1J + (IDXK)*strideK ))
  if ((hc_get_workitem_absolute_id(0) >=  4)
   || (hc_get_workitem_absolute_id(1) >=  size1J)
   || (hc_get_workitem_absolute_id(2) >=  sizeK))
    return;
  unsigned int wgK = ( hc_get_group_id(2));
  unsigned int global0I = ( hc_get_workitem_absolute_id(0));
  unsigned int global1J = ( hc_get_workitem_absolute_id(1));
  uint64_t idx = GLOBAL( (uint64_t)global0I, global1J, wgK);
    dst[idx] = ((tensile_half)(src[idx]));
}
#undef GLOBAL_D
#undef GLOBAL_C
#undef SCALAR_ZERO
