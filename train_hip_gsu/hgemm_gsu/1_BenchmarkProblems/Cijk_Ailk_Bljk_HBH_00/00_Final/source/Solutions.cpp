/*******************************************************************************
* Copyright 2016-2020 Advanced Micro Devices, Inc. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
* ies of the Software, and to permit persons to whom the Software is furnished
* to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
* PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
* CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

/**************************************************
* This file was generated by Tensile:             *
* https://github.com/ROCmSoftwarePlatform/Tensile *
**************************************************/

#include "Solutions.h"
#include <algorithm>
TensileStatus Cijk_Ailk_Bljk_HBH_MT32x16x4_SE_GSU1_VAW2(SolutionLock*      solutionLock,
                                                        TensileHalf*       dataD,
                                                        const TensileHalf* dataC,
                                                        const TensileHalf* dataA,
                                                        const TensileHalf* dataB,
                                                        TensileHalf        alpha,
                                                        TensileHalf        beta,
                                                        unsigned int       strideD1J,
                                                        unsigned int       strideD2K,
                                                        unsigned int       strideC1J,
                                                        unsigned int       strideC2K,
                                                        unsigned int       strideA1L,
                                                        unsigned int       strideA2K,
                                                        unsigned int       strideB1J,
                                                        unsigned int       strideB2K,
                                                        unsigned int       sizeI,
                                                        unsigned int       sizeJ,
                                                        unsigned int       sizeK,
                                                        unsigned int       sizeL,
                                                        hipStream_t        stream,
                                                        unsigned int       numInputEvents,
                                                        hipEvent_t*        inputEvents,
                                                        hipEvent_t*        outputEvent,
                                                        float*             workspace)
{
    TensileStatus status;
    int           deviceId;
    hipGetDevice(&deviceId);

    /* kernels */
    const unsigned int numKernels = 1; // 1 or 4

    /* num kernels */
    unsigned int numEnqueues[numKernels] = {1};

    /* grid sizes */
    const unsigned int workDim          = 3;
    const unsigned int threadTile[2]    = {4, 2};
    const unsigned int groupSize[2]     = {8, 8};
    size_t             localWorkSize[3] = {64, 1, 1};
    size_t             globalWorkSize[numKernels][3];
    globalWorkSize[0][2] = 1;
    globalWorkSize[0][2] *= sizeK;
    unsigned int sizeOfC0         = sizeI;
    unsigned int sizeOfC1         = sizeJ;
    unsigned int macroTile0       = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
    unsigned int macroTile1       = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
    unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
    unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
    // b/c single kernel, add extra work-group here if edge needed
    if(totalWorkGroups0 * macroTile0 < sizeOfC0)
    {
        totalWorkGroups0++;
    }
    if(totalWorkGroups1 * macroTile1 < sizeOfC1)
    {
        totalWorkGroups1++;
    }
    unsigned int   problemNumGroupTiles0 = totalWorkGroups0;
    unsigned int   problemNumGroupTiles1 = totalWorkGroups1;
    const unsigned smallNumMagicShift    = 31; // bozo, review
    unsigned       magicNumberProblemNumGroupTiles0
        = (1L << smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
    unsigned numFullBlocks = problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
    unsigned wgmRemainder1 = problemNumGroupTiles1 % 8;
    if(wgmRemainder1 == 0)
        wgmRemainder1 = 8;
    unsigned magicNumberWgmRemainder1 = ((1L << smallNumMagicShift) / wgmRemainder1 + 1);
    globalWorkSize[0][0]              = totalWorkGroups0;
    globalWorkSize[0][1]              = totalWorkGroups1;

    /* index sizes */
    unsigned int sizes[numKernels][1][4];
    sizes[0][0][0]               = sizeI;
    sizes[0][0][1]               = sizeJ;
    sizes[0][0][2]               = sizeK;
    sizes[0][0][3]               = sizeL;
    uint64_t tensor2dSizeC       = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
    uint64_t tensor2dSizeA       = 1;
    uint64_t tensor2dSizeAStride = 0;
    uint64_t tensor2dSizeAOffset = 0;
    tensor2dSizeAStride          = std::max(tensor2dSizeA * sizeI, (uint64_t)strideA1L);
    tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA * sizeI;
    tensor2dSizeA       = tensor2dSizeAStride;
    tensor2dSizeAStride = std::max(tensor2dSizeA * sizeL, (uint64_t)strideA2K);
    tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA * sizeL;
    tensor2dSizeA = tensor2dSizeAStride;
    tensor2dSizeA -= tensor2dSizeAOffset;

    uint64_t tensor2dSizeB       = 1;
    uint64_t tensor2dSizeBStride = 0;
    uint64_t tensor2dSizeBOffset = 0;
    tensor2dSizeBStride          = std::max(tensor2dSizeB * sizeL, (uint64_t)strideB1J);
    tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB * sizeL;
    tensor2dSizeB       = tensor2dSizeBStride;
    tensor2dSizeBStride = std::max(tensor2dSizeB * sizeJ, (uint64_t)strideB2K);
    tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB * sizeJ;
    tensor2dSizeB = tensor2dSizeBStride;
    tensor2dSizeB -= tensor2dSizeBOffset;

    unsigned int staggerUIter    = 32; // how many stride-sized clicks to stagger start offset
    int          unrollLoopIters = sizeL / 4 / 1; // /DepthU/GSU
    while(staggerUIter > 1)
    {
        if(unrollLoopIters >= (staggerUIter * 32))
        {
            break;
        }
        staggerUIter /= 2; // step down to smaller stagger
    }
    if(staggerUIter >= 1)
        staggerUIter -= 1;

    int kernelsLaunched = 0;

    /* kernel 0: Cijk_Ailk_Bljk_HBH_MT32x16x4_SE_GSU1_K1_VAW2 */
    unsigned int kernelIdx = 0;
    for(unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++)
    {
        if(inputEvents != NULL)
            hipEventRecord(inputEvents[enqueueIdx], stream);
        try
        {
            kernelsLaunched++;
            hipLaunchKernelGGL(HIP_KERNEL_NAME(Cijk_Ailk_Bljk_HBH_MT32x16x4_SE_GSU1_K1_VAW2),
                               dim3(globalWorkSize[kernelIdx][0],
                                    globalWorkSize[kernelIdx][1],
                                    globalWorkSize[kernelIdx][2]),
                               dim3(localWorkSize[0], localWorkSize[1], localWorkSize[2]),
                               0, // groupMemBytes
                               stream,
                               dataD,
                               dataC,
                               dataA,
                               dataB,
                               alpha,
                               beta,
                               strideD1J,
                               strideD2K,
                               strideC1J,
                               strideC2K,
                               strideA1L,
                               strideA2K,
                               strideB1J,
                               strideB2K,
                               sizes[kernelIdx][enqueueIdx][0],
                               sizes[kernelIdx][enqueueIdx][1],
                               sizes[kernelIdx][enqueueIdx][2],
                               sizes[kernelIdx][enqueueIdx][3],
                               staggerUIter,
                               problemNumGroupTiles0,
                               problemNumGroupTiles1,
                               magicNumberProblemNumGroupTiles0);
        }
        catch(const std::exception& e)
        {
#ifdef DEBUG
            std::cerr << e.what() << std::endl;
#endif
            return tensileStatusFailure;
        }
        if(outputEvent != NULL)
            hipEventRecord(outputEvent[enqueueIdx], stream);
    }

    return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Ailk_Bljk_HBH
  1LDSBuffer: 0
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 2
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: True
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 4
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: False
  ExpandPointerSwap: False
  FractionalLoad: False
  GlobalLoadVectorWidthA: 2
  GlobalLoadVectorWidthB: 1
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 2
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: False
  GuaranteeNoPartialB: True
  ISA: [0, 0, 0]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Source
  LSCA: 32
  LSCB: 4
  LSPA: 4
  LSPB: 16
  LVCA: 16
  LVCB: 4
  LVPA: 2
  LVPB: 16
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 0
  LdsBlockSizePerPadA: 0
  LdsBlockSizePerPadB: 0
  LdsNumElements: 819
  LdsOffsetA: 0
  LdsOffsetB: 128
  LdsPadA: 0
  LdsPadB: 0
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 2
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 4
  LoopTail: True
  LoopUnroll: 4
  MacroTile0: 32
  MacroTile1: 16
  MacroTileA: 32
  MacroTileB: 16
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstruction: []
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 8
  NumGlobalWriteVectorsPerThread: 4
  NumLoadsA: 1
  NumLoadsB: 1
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 1
  NumLoadsPerpendicularB: 1
  NumThreads: 64
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: False
  PrefetchLocalRead: True
  ProblemType: Cijk_Ailk_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 1
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 0
  StoreVectorWidth: 4
  SubGroup0: 8
  SubGroup1: 8
  SubGroupA: 8
  SubGroupB: 8
  SuppressNoLoadLoop: False
  ThreadTile: [4, 2]
  ThreadTile0: 4
  ThreadTile1: 2
  ThreadTileA: 4
  ThreadTileB: 2
  TransposeLDS: 0
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: 0
  UnrollMajorLDSB: 0
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 0
  WaveSeparateGlobalReadB: 0
  WorkGroup: [8, 8, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _GlobalAccumulation: False
  _UseSgprForGRO: False
  _VectorStore: 1
  _WorkspaceSizePerElemC: 0
  _staggerStrideShift: 5
*/

TensileStatus Cijk_Ailk_Bljk_HBH_MT32x16x4_SE_GSU3_VAW1(SolutionLock*      solutionLock,
                                                        TensileHalf*       dataD,
                                                        const TensileHalf* dataC,
                                                        const TensileHalf* dataA,
                                                        const TensileHalf* dataB,
                                                        TensileHalf        alpha,
                                                        TensileHalf        beta,
                                                        unsigned int       strideD1J,
                                                        unsigned int       strideD2K,
                                                        unsigned int       strideC1J,
                                                        unsigned int       strideC2K,
                                                        unsigned int       strideA1L,
                                                        unsigned int       strideA2K,
                                                        unsigned int       strideB1J,
                                                        unsigned int       strideB2K,
                                                        unsigned int       sizeI,
                                                        unsigned int       sizeJ,
                                                        unsigned int       sizeK,
                                                        unsigned int       sizeL,
                                                        hipStream_t        stream,
                                                        unsigned int       numInputEvents,
                                                        hipEvent_t*        inputEvents,
                                                        hipEvent_t*        outputEvent,
                                                        float*             workspace)
{
    TensileStatus status;
    int           deviceId;
    hipGetDevice(&deviceId);

    /* kernels */
    const unsigned int numKernels = 1; // 1 or 4

    /* num kernels */
    unsigned int numEnqueues[numKernels] = {1};

    /* grid sizes */
    const unsigned int workDim          = 3;
    const unsigned int threadTile[2]    = {4, 2};
    const unsigned int groupSize[2]     = {8, 8};
    size_t             localWorkSize[3] = {64, 1, 1};
    size_t             globalWorkSize[numKernels][3];
    globalWorkSize[0][2] = 1;
    globalWorkSize[0][2] *= sizeK;
    unsigned int sizeOfC0         = sizeI;
    unsigned int sizeOfC1         = sizeJ;
    unsigned int macroTile0       = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
    unsigned int macroTile1       = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
    unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
    unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
    // b/c single kernel, add extra work-group here if edge needed
    if(totalWorkGroups0 * macroTile0 < sizeOfC0)
    {
        totalWorkGroups0++;
    }
    if(totalWorkGroups1 * macroTile1 < sizeOfC1)
    {
        totalWorkGroups1++;
    }
    unsigned int   problemNumGroupTiles0 = totalWorkGroups0;
    unsigned int   problemNumGroupTiles1 = totalWorkGroups1;
    const unsigned smallNumMagicShift    = 31; // bozo, review
    unsigned       magicNumberProblemNumGroupTiles0
        = (1L << smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
    unsigned numFullBlocks = problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
    unsigned wgmRemainder1 = problemNumGroupTiles1 % 8;
    if(wgmRemainder1 == 0)
        wgmRemainder1 = 8;
    unsigned magicNumberWgmRemainder1 = ((1L << smallNumMagicShift) / wgmRemainder1 + 1);
    totalWorkGroups1 *= 3; // GlobalSplitU
    globalWorkSize[0][0] = totalWorkGroups0;
    globalWorkSize[0][1] = totalWorkGroups1;

    /* index sizes */
    unsigned int sizes[numKernels][1][4];
    sizes[0][0][0]               = sizeI;
    sizes[0][0][1]               = sizeJ;
    sizes[0][0][2]               = sizeK;
    sizes[0][0][3]               = sizeL;
    uint64_t tensor2dSizeC       = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
    uint64_t tensor2dSizeA       = 1;
    uint64_t tensor2dSizeAStride = 0;
    uint64_t tensor2dSizeAOffset = 0;
    tensor2dSizeAStride          = std::max(tensor2dSizeA * sizeI, (uint64_t)strideA1L);
    tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA * sizeI;
    tensor2dSizeA       = tensor2dSizeAStride;
    tensor2dSizeAStride = std::max(tensor2dSizeA * sizeL, (uint64_t)strideA2K);
    tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA * sizeL;
    tensor2dSizeA = tensor2dSizeAStride;
    tensor2dSizeA -= tensor2dSizeAOffset;

    uint64_t tensor2dSizeB       = 1;
    uint64_t tensor2dSizeBStride = 0;
    uint64_t tensor2dSizeBOffset = 0;
    tensor2dSizeBStride          = std::max(tensor2dSizeB * sizeL, (uint64_t)strideB1J);
    tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB * sizeL;
    tensor2dSizeB       = tensor2dSizeBStride;
    tensor2dSizeBStride = std::max(tensor2dSizeB * sizeJ, (uint64_t)strideB2K);
    tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB * sizeJ;
    tensor2dSizeB = tensor2dSizeBStride;
    tensor2dSizeB -= tensor2dSizeBOffset;

    unsigned int staggerUIter    = 32; // how many stride-sized clicks to stagger start offset
    int          unrollLoopIters = sizeL / 4 / 3; // /DepthU/GSU
    while(staggerUIter > 1)
    {
        if(unrollLoopIters >= (staggerUIter * 32))
        {
            break;
        }
        staggerUIter /= 2; // step down to smaller stagger
    }
    if(staggerUIter >= 1)
        staggerUIter -= 1;

    int kernelsLaunched = 0;
    // enqueue Beta-Only kernel
    size_t localWorkSizeBetaOnly[3] = {8, 8, 1};
    size_t globalWorkSizeBetaOnly[3];
    size_t totalWorkGroupsBetaOnly0 = sizeOfC0 / localWorkSizeBetaOnly[0];
    size_t totalWorkGroupsBetaOnly1 = sizeOfC1 / localWorkSizeBetaOnly[1];
    // b/c single kernel, add extra work-group here if edge needed
    if(totalWorkGroupsBetaOnly0 * localWorkSizeBetaOnly[0] < sizeOfC0)
    {
        totalWorkGroupsBetaOnly0++;
    }
    if(totalWorkGroupsBetaOnly1 * localWorkSizeBetaOnly[1] < sizeOfC1)
    {
        totalWorkGroupsBetaOnly1++;
    }
    globalWorkSizeBetaOnly[0] = totalWorkGroupsBetaOnly0;
    globalWorkSizeBetaOnly[1] = totalWorkGroupsBetaOnly1;
    globalWorkSizeBetaOnly[2] = 1;
    globalWorkSizeBetaOnly[2] *= sizeK;
    bool betaZero = beta == (TensileHalf)0;
    try
    {
        if(betaZero)
        {
            if(inputEvents != NULL)
                hipEventRecord(inputEvents[0], stream);
            kernelsLaunched++;
            hipLaunchKernelGGL(
                HIP_KERNEL_NAME(Cijk_H_GA),
                dim3(globalWorkSizeBetaOnly[0],
                     globalWorkSizeBetaOnly[1],
                     globalWorkSizeBetaOnly[2]),
                dim3(localWorkSizeBetaOnly[0], localWorkSizeBetaOnly[1], localWorkSizeBetaOnly[2]),
                0, // groupMemBytes
                stream,
                workspace,
                dataC,
                strideD1J,
                strideD2K,
                strideC1J,
                strideC2K,
                sizeI,
                sizeJ,
                sizeK);
        }
        else
        {
            if(inputEvents != NULL)
                hipEventRecord(inputEvents[0], stream);
            kernelsLaunched++;
            hipLaunchKernelGGL(
                HIP_KERNEL_NAME(Cijk_HB_GA),
                dim3(globalWorkSizeBetaOnly[0],
                     globalWorkSizeBetaOnly[1],
                     globalWorkSizeBetaOnly[2]),
                dim3(localWorkSizeBetaOnly[0], localWorkSizeBetaOnly[1], localWorkSizeBetaOnly[2]),
                0, // groupMemBytes
                stream,
                workspace,
                dataC,
                strideD1J,
                strideD2K,
                strideC1J,
                strideC2K,
                sizeI,
                sizeJ,
                sizeK,
                beta);
        }
    }
    catch(const std::exception& e)
    {
#ifdef DEBUG
        std::cerr << e.what() << std::endl;
#endif
        return tensileStatusFailure;
    }

    /* kernel 0: Cijk_Ailk_Bljk_HBH_MT32x16x4_SE_GSU3_K1_VAW1 */
    unsigned int kernelIdx = 0;
    for(unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++)
    {
        if(inputEvents != NULL)
            hipEventRecord(inputEvents[enqueueIdx], stream);
        try
        {
            kernelsLaunched++;
            hipLaunchKernelGGL(HIP_KERNEL_NAME(Cijk_Ailk_Bljk_HBH_MT32x16x4_SE_GSU3_K1_VAW1),
                               dim3(globalWorkSize[kernelIdx][0],
                                    globalWorkSize[kernelIdx][1],
                                    globalWorkSize[kernelIdx][2]),
                               dim3(localWorkSize[0], localWorkSize[1], localWorkSize[2]),
                               0, // groupMemBytes
                               stream,
                               dataD,
                               dataC,
                               dataA,
                               dataB,
                               alpha,
                               beta,
                               strideD1J,
                               strideD2K,
                               strideC1J,
                               strideC2K,
                               strideA1L,
                               strideA2K,
                               strideB1J,
                               strideB2K,
                               sizes[kernelIdx][enqueueIdx][0],
                               sizes[kernelIdx][enqueueIdx][1],
                               sizes[kernelIdx][enqueueIdx][2],
                               sizes[kernelIdx][enqueueIdx][3],
                               staggerUIter,
                               problemNumGroupTiles0,
                               problemNumGroupTiles1,
                               magicNumberProblemNumGroupTiles0);
        }
        catch(const std::exception& e)
        {
#ifdef DEBUG
            std::cerr << e.what() << std::endl;
#endif
            return tensileStatusFailure;
        }
        if(outputEvent != NULL)
            hipEventRecord(outputEvent[enqueueIdx], stream);
    }
    // enqueue GSU third kernel
    size_t localWorkSizeGlobalAccum[3] = {8, 8, 1};
    size_t globalWorkSizeGlobalAccum[3];
    size_t totalWorkGroupsGlobalAccum0 = sizeOfC0 / localWorkSizeGlobalAccum[0];
    size_t totalWorkGroupsGlobalAccum1 = sizeOfC1 / localWorkSizeGlobalAccum[1];
    // b/c single kernel, add extra work-group here if edge needed
    if(totalWorkGroupsGlobalAccum0 * localWorkSizeGlobalAccum[0] < sizeOfC0)
    {
        totalWorkGroupsGlobalAccum0++;
    }
    if(totalWorkGroupsGlobalAccum1 * localWorkSizeGlobalAccum[1] < sizeOfC1)
    {
        totalWorkGroupsGlobalAccum1++;
    }
    globalWorkSizeGlobalAccum[0] = totalWorkGroupsGlobalAccum0;
    globalWorkSizeGlobalAccum[1] = totalWorkGroupsGlobalAccum1;
    globalWorkSizeGlobalAccum[2] = 1;
    globalWorkSizeGlobalAccum[2] *= sizeK;
    try
    {
        kernelsLaunched++;
        hipLaunchKernelGGL(HIP_KERNEL_NAME(Cijk_H_Convert),
                           dim3(globalWorkSizeGlobalAccum[0],
                                globalWorkSizeGlobalAccum[1],
                                globalWorkSizeGlobalAccum[2]),
                           dim3(localWorkSizeGlobalAccum[0],
                                localWorkSizeGlobalAccum[1],
                                localWorkSizeGlobalAccum[2]),
                           0, // groupMemBytes
                           stream,
                           dataD,
                           workspace,
                           strideD1J,
                           strideD2K,
                           sizeI,
                           sizeJ,
                           sizeK);
        if(outputEvent != NULL)
            hipEventRecord(outputEvent[0], stream);
    }
    catch(const std::exception& e)
    {
#ifdef DEBUG
        std::cerr << e.what() << std::endl;
#endif
        return tensileStatusFailure;
    }

    return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Ailk_Bljk_HBH
  1LDSBuffer: 0
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 2
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: True
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 4
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: False
  ExpandPointerSwap: False
  FractionalLoad: False
  GlobalLoadVectorWidthA: 2
  GlobalLoadVectorWidthB: 1
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 2
  GlobalSplitU: 3
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: False
  GuaranteeNoPartialB: True
  ISA: [0, 0, 0]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Source
  LSCA: 32
  LSCB: 4
  LSPA: 4
  LSPB: 16
  LVCA: 16
  LVCB: 4
  LVPA: 2
  LVPB: 16
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 0
  LdsBlockSizePerPadA: 0
  LdsBlockSizePerPadB: 0
  LdsNumElements: 819
  LdsOffsetA: 0
  LdsOffsetB: 128
  LdsPadA: 0
  LdsPadB: 0
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 2
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 4
  LoopTail: True
  LoopUnroll: 4
  MacroTile0: 32
  MacroTile1: 16
  MacroTileA: 32
  MacroTileB: 16
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstruction: []
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 8
  NumGlobalWriteVectorsPerThread: 4
  NumLoadsA: 1
  NumLoadsB: 1
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 1
  NumLoadsPerpendicularB: 1
  NumThreads: 64
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: False
  PrefetchLocalRead: True
  ProblemType: Cijk_Ailk_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 1
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 0
  StoreVectorWidth: 4
  SubGroup0: 8
  SubGroup1: 8
  SubGroupA: 8
  SubGroupB: 8
  SuppressNoLoadLoop: False
  ThreadTile: [4, 2]
  ThreadTile0: 4
  ThreadTile1: 2
  ThreadTileA: 4
  ThreadTileB: 2
  TransposeLDS: 0
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: 0
  UnrollMajorLDSB: 0
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 1
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 0
  WaveSeparateGlobalReadB: 0
  WorkGroup: [8, 8, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _GlobalAccumulation: True
  _UseSgprForGRO: False
  _VectorStore: 1
  _WorkspaceSizePerElemC: 4
  _staggerStrideShift: 5
*/
