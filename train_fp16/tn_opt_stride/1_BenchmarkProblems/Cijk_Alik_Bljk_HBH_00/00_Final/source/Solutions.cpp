/*******************************************************************************
* Copyright (C) 2016-2020 Advanced Micro Devices, Inc. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
* ies of the Software, and to permit persons to whom the Software is furnished
* to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
* PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
* CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

/**************************************************
* This file was generated by Tensile:             *
* https://github.com/ROCmSoftwarePlatform/Tensile *
**************************************************/


#include "Solutions.h"
#include <algorithm>
#include <math.h>
TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW2_LBSPP128_PLR9(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW2_K1_LBSPP128_PLR9", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/32/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*4)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;
#if 1
  /* Copy A B to temp AB */
  unsigned int tempStrideA1I = ((unsigned int)(pow(2, ceil(log2(strideA1I))))) + 32;
  unsigned int tempStrideA2K = tempStrideA1I * sizeI;
  unsigned int tempStrideB1J = ((unsigned int)(pow(2, ceil(log2(strideB1J))))) + 32;
  unsigned int tempStrideB2K = tempStrideB1J * sizeJ;

  // enqueue CopyA kernel
  size_t localWorkSizeTempAB[3] = { 8, 8, 1};
  size_t globalWorkSizeTempAB[3];
  size_t totalWorkGroupsTempAB0 = sizeL / localWorkSizeTempAB[0];
  size_t totalWorkGroupsTempAB1 = sizeI / localWorkSizeTempAB[1];
  if (totalWorkGroupsTempAB0*localWorkSizeTempAB[0] < sizeL) { totalWorkGroupsTempAB0++; }
  if (totalWorkGroupsTempAB1*localWorkSizeTempAB[1] < sizeI) { totalWorkGroupsTempAB1++; }
  globalWorkSizeTempAB[0] = totalWorkGroupsTempAB0;
  globalWorkSizeTempAB[1] = totalWorkGroupsTempAB1;
  globalWorkSizeTempAB[2] = 1;
  globalWorkSizeTempAB[2] *= sizeK;

  try {
#if 1
    kernelsLaunched++;
    if( inputEvents != NULL )
      hipEventRecord(inputEvents[0], stream );
    hipLaunchKernelGGL(
      HIP_KERNEL_NAME(Cijk_AB_Copy_OptStride),
      dim3(globalWorkSizeTempAB[0], globalWorkSizeTempAB[1], globalWorkSizeTempAB[2]),
      dim3(localWorkSizeTempAB[0], localWorkSizeTempAB[1], localWorkSizeTempAB[2]),
      0, // groupMemBytes
      stream,
      const_cast<TensileHalf *>(dataA+tensor2dSizeA),   //out
      dataA,     //in
      tempStrideA1I, //out
      tempStrideA2K,
      strideA1I, //in
      strideA2K,
      sizeL,
      sizeI,
      sizeK);
#endif
    //hipEventRecord(outputEvent[0], stream );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }


  totalWorkGroupsTempAB0 = sizeL / localWorkSizeTempAB[0];
  totalWorkGroupsTempAB1 = sizeJ / localWorkSizeTempAB[1];
  if (totalWorkGroupsTempAB0*localWorkSizeTempAB[0] < sizeL) { totalWorkGroupsTempAB0++; }
  if (totalWorkGroupsTempAB1*localWorkSizeTempAB[1] < sizeJ) { totalWorkGroupsTempAB1++; }
  globalWorkSizeTempAB[0] = totalWorkGroupsTempAB0;
  globalWorkSizeTempAB[1] = totalWorkGroupsTempAB1;
  globalWorkSizeTempAB[2] = 1;
  globalWorkSizeTempAB[2] *= sizeK;

  try {
#if 1
    kernelsLaunched++;
    //if( inputEvents != NULL )
    //  hipEventRecord(inputEvents[0], stream );
    hipLaunchKernelGGL(
      HIP_KERNEL_NAME(Cijk_AB_Copy_OptStride),
      dim3(globalWorkSizeTempAB[0], globalWorkSizeTempAB[1], globalWorkSizeTempAB[2]),
      dim3(localWorkSizeTempAB[0], localWorkSizeTempAB[1], localWorkSizeTempAB[2]),
      0, // groupMemBytes
      stream,
      const_cast<TensileHalf *>(dataB+tensor2dSizeB),   //out
      dataB,     //in
      tempStrideB1J, //out
      tempStrideB2K,
      strideB1J, //in
      strideB2K,
      sizeL,
      sizeJ,
      sizeK);
    //hipEventRecord(outputEvent[0], stream );
#endif
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }

  uint64_t tempTensor2dSizeA = 1;
  uint64_t tempTensor2dSizeAStride = 0;
  uint64_t tempTensor2dSizeAOffset = 0;
  tempTensor2dSizeAStride = std::max(tempTensor2dSizeA*sizeL, (uint64_t)tempStrideA1I);
  tempTensor2dSizeAOffset += tempTensor2dSizeAStride - tempTensor2dSizeA*sizeL;
  tempTensor2dSizeA = tempTensor2dSizeAStride;
  tempTensor2dSizeAStride = std::max(tempTensor2dSizeA*sizeI, (uint64_t)tempStrideA2K);
  tempTensor2dSizeAOffset += tempTensor2dSizeAStride - tempTensor2dSizeA*sizeI;
  tempTensor2dSizeA = tempTensor2dSizeAStride;
  tempTensor2dSizeA -= tempTensor2dSizeAOffset;

  uint64_t tempTensor2dSizeB = 1;
  uint64_t tempTensor2dSizeBStride = 0;
  uint64_t tempTensor2dSizeBOffset = 0;
  tempTensor2dSizeBStride = std::max(tempTensor2dSizeB*sizeL, (uint64_t)tempStrideB1J);
  tempTensor2dSizeBOffset += tempTensor2dSizeBStride - tempTensor2dSizeB*sizeL;
  tempTensor2dSizeB = tempTensor2dSizeBStride;
  tempTensor2dSizeBStride = std::max(tempTensor2dSizeB*sizeJ, (uint64_t)tempStrideB2K);
  tempTensor2dSizeBOffset += tempTensor2dSizeBStride - tempTensor2dSizeB*sizeJ;
  tempTensor2dSizeB = tempTensor2dSizeBStride;
  tempTensor2dSizeB -= tempTensor2dSizeBOffset;

  /* Copy end */
#endif
  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW2_K1_LBSPP128_PLR9 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tempTensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tempTensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA+tensor2dSizeA;
    hipFunctionArgs.dataB = dataB+tensor2dSizeB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = tempStrideA1I;
    hipFunctionArgs.strideA2K = tempStrideA2K;
    hipFunctionArgs.strideB1J = tempStrideB1J;
    hipFunctionArgs.strideB2K = tempStrideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tempTensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tempTensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 0
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 32
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 2
  GlobalLoadVectorWidthB: 2
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 2
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 32
  LSCB: 32
  LSPA: 4
  LSPB: 4
  LVCA: 16
  LVCB: 16
  LVPA: 2
  LVPB: 2
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 128
  LdsBlockSizePerPadA: 128
  LdsBlockSizePerPadB: 128
  LdsNumElements: 15104
  LdsNumElementsAlignedA: 2304
  LdsNumElementsAlignedB: 4608
  LdsOffsetA: 0
  LdsOffsetA_Blk: 8192
  LdsOffsetB: 2304
  LdsOffsetB_Blk: 10496
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 8
  LoopTail: True
  LoopUnroll: 32
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 4
  NumLoadsB: 8
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 4
  NumLoadsPerpendicularB: 8
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 9
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 1
  _VectorStore: 1
  _staggerStrideShift: 2
*/

TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW2_LBSPP128_PLR17(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW2_K1_LBSPP128_PLR17", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/64/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*2)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;

  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW2_K1_LBSPP128_PLR17 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA;
    hipFunctionArgs.dataB = dataB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = strideA1I;
    hipFunctionArgs.strideA2K = strideA2K;
    hipFunctionArgs.strideB1J = strideB1J;
    hipFunctionArgs.strideB2K = strideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 0
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 64
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 2
  GlobalLoadVectorWidthB: 2
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 2
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 64
  LSCB: 64
  LSPA: 2
  LSPB: 2
  LVCA: 32
  LVCB: 32
  LVPA: 1
  LVPB: 1
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 128
  LdsBlockSizePerPadA: 128
  LdsBlockSizePerPadB: 128
  LdsNumElements: 30208
  LdsNumElementsAlignedA: 4608
  LdsNumElementsAlignedB: 9216
  LdsOffsetA: 0
  LdsOffsetA_Blk: 16384
  LdsOffsetB: 4608
  LdsOffsetB_Blk: 20992
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 16
  LoopTail: True
  LoopUnroll: 64
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 8
  NumLoadsB: 16
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 8
  NumLoadsPerpendicularB: 16
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 17
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 1
  _VectorStore: 1
  _staggerStrideShift: 1
*/

TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW2_LBSPP256_PLR33(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW2_K1_LBSPP256_PLR33", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/128/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*1)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;

  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW2_K1_LBSPP256_PLR33 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA;
    hipFunctionArgs.dataB = dataB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = strideA1I;
    hipFunctionArgs.strideA2K = strideA2K;
    hipFunctionArgs.strideB1J = strideB1J;
    hipFunctionArgs.strideB2K = strideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 1
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 128
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 2
  GlobalLoadVectorWidthB: 2
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 2
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 128
  LSCB: 128
  LSPA: 1
  LSPB: 1
  LVCA: 64
  LVCB: 64
  LVPA: 1
  LVPB: 1
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 256
  LdsBlockSizePerPadA: 256
  LdsBlockSizePerPadB: 256
  LdsNumElements: 26112
  LdsNumElementsAlignedA: 8704
  LdsNumElementsAlignedB: 17408
  LdsOffsetA: 0
  LdsOffsetA_Blk: 32768
  LdsOffsetB: 8704
  LdsOffsetB_Blk: 41472
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 32
  LoopTail: True
  LoopUnroll: 128
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 16
  NumLoadsB: 32
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 16
  NumLoadsPerpendicularB: 32
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 33
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 0
  _VectorStore: 1
  _staggerStrideShift: 0
*/

TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW4_LBSPP128_PLR9(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW4_K1_LBSPP128_PLR9", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/32/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*4)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;

  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW4_K1_LBSPP128_PLR9 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA;
    hipFunctionArgs.dataB = dataB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = strideA1I;
    hipFunctionArgs.strideA2K = strideA2K;
    hipFunctionArgs.strideB1J = strideB1J;
    hipFunctionArgs.strideB2K = strideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 0
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 32
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 4
  GlobalLoadVectorWidthB: 4
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 4
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 32
  LSCB: 32
  LSPA: 8
  LSPB: 8
  LVCA: 8
  LVCB: 8
  LVPA: 2
  LVPB: 2
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 128
  LdsBlockSizePerPadA: 128
  LdsBlockSizePerPadB: 128
  LdsNumElements: 15104
  LdsNumElementsAlignedA: 2304
  LdsNumElementsAlignedB: 4608
  LdsOffsetA: 0
  LdsOffsetA_Blk: 8192
  LdsOffsetB: 2304
  LdsOffsetB_Blk: 10496
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 8
  LoopTail: True
  LoopUnroll: 32
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 2
  NumLoadsB: 4
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 2
  NumLoadsPerpendicularB: 4
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 9
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 1
  _VectorStore: 1
  _staggerStrideShift: 2
*/

TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW4_LBSPP128_PLR17(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW4_K1_LBSPP128_PLR17", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/64/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*2)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;

  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW4_K1_LBSPP128_PLR17 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA;
    hipFunctionArgs.dataB = dataB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = strideA1I;
    hipFunctionArgs.strideA2K = strideA2K;
    hipFunctionArgs.strideB1J = strideB1J;
    hipFunctionArgs.strideB2K = strideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 0
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 64
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 4
  GlobalLoadVectorWidthB: 4
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 4
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 64
  LSCB: 64
  LSPA: 4
  LSPB: 4
  LVCA: 16
  LVCB: 16
  LVPA: 1
  LVPB: 1
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 128
  LdsBlockSizePerPadA: 128
  LdsBlockSizePerPadB: 128
  LdsNumElements: 30208
  LdsNumElementsAlignedA: 4608
  LdsNumElementsAlignedB: 9216
  LdsOffsetA: 0
  LdsOffsetA_Blk: 16384
  LdsOffsetB: 4608
  LdsOffsetB_Blk: 20992
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 16
  LoopTail: True
  LoopUnroll: 64
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 4
  NumLoadsB: 8
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 4
  NumLoadsPerpendicularB: 8
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 17
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 1
  _VectorStore: 1
  _staggerStrideShift: 1
*/

TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW4_LBSPP256_PLR33(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW4_K1_LBSPP256_PLR33", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/128/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*1)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;

  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW4_K1_LBSPP256_PLR33 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA;
    hipFunctionArgs.dataB = dataB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = strideA1I;
    hipFunctionArgs.strideA2K = strideA2K;
    hipFunctionArgs.strideB1J = strideB1J;
    hipFunctionArgs.strideB2K = strideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 1
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 128
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 4
  GlobalLoadVectorWidthB: 4
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 4
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 128
  LSCB: 128
  LSPA: 2
  LSPB: 2
  LVCA: 32
  LVCB: 32
  LVPA: 1
  LVPB: 1
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 256
  LdsBlockSizePerPadA: 256
  LdsBlockSizePerPadB: 256
  LdsNumElements: 26112
  LdsNumElementsAlignedA: 8704
  LdsNumElementsAlignedB: 17408
  LdsOffsetA: 0
  LdsOffsetA_Blk: 32768
  LdsOffsetB: 8704
  LdsOffsetB_Blk: 41472
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 32
  LoopTail: True
  LoopUnroll: 128
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 8
  NumLoadsB: 16
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 8
  NumLoadsPerpendicularB: 16
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 33
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 1
  _VectorStore: 1
  _staggerStrideShift: 0
*/

TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW8_LBSPP128_PLR9(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW8_K1_LBSPP128_PLR9", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/32/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*4)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;

  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x32_MI32x32x4x2_SE_1LDSB0_GRVW8_K1_LBSPP128_PLR9 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA;
    hipFunctionArgs.dataB = dataB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = strideA1I;
    hipFunctionArgs.strideA2K = strideA2K;
    hipFunctionArgs.strideB1J = strideB1J;
    hipFunctionArgs.strideB2K = strideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 0
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 32
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 8
  GlobalLoadVectorWidthB: 8
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 8
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 32
  LSCB: 32
  LSPA: 16
  LSPB: 16
  LVCA: 4
  LVCB: 4
  LVPA: 2
  LVPB: 2
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 128
  LdsBlockSizePerPadA: 128
  LdsBlockSizePerPadB: 128
  LdsNumElements: 15104
  LdsNumElementsAlignedA: 2304
  LdsNumElementsAlignedB: 4608
  LdsOffsetA: 0
  LdsOffsetA_Blk: 8192
  LdsOffsetB: 2304
  LdsOffsetB_Blk: 10496
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 8
  LoopTail: True
  LoopUnroll: 32
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 1
  NumLoadsB: 2
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 1
  NumLoadsPerpendicularB: 2
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 9
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 1
  _VectorStore: 1
  _staggerStrideShift: 2
*/

TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW8_LBSPP128_PLR17(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW8_K1_LBSPP128_PLR17", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/64/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*2)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;

  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x64_MI32x32x4x2_SE_1LDSB0_GRVW8_K1_LBSPP128_PLR17 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA;
    hipFunctionArgs.dataB = dataB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = strideA1I;
    hipFunctionArgs.strideA2K = strideA2K;
    hipFunctionArgs.strideB1J = strideB1J;
    hipFunctionArgs.strideB2K = strideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 0
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 64
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 8
  GlobalLoadVectorWidthB: 8
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 8
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 64
  LSCB: 64
  LSPA: 8
  LSPB: 8
  LVCA: 8
  LVCB: 8
  LVPA: 1
  LVPB: 1
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 128
  LdsBlockSizePerPadA: 128
  LdsBlockSizePerPadB: 128
  LdsNumElements: 30208
  LdsNumElementsAlignedA: 4608
  LdsNumElementsAlignedB: 9216
  LdsOffsetA: 0
  LdsOffsetA_Blk: 16384
  LdsOffsetB: 4608
  LdsOffsetB_Blk: 20992
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 16
  LoopTail: True
  LoopUnroll: 64
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 2
  NumLoadsB: 4
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 2
  NumLoadsPerpendicularB: 4
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 17
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 1
  _VectorStore: 1
  _staggerStrideShift: 1
*/

TensileStatus Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW8_LBSPP256_PLR33(
    SolutionLock * solutionLock,
    TensileHalf * dataD,
    const TensileHalf * dataC,
    const TensileHalf * dataA,
    const TensileHalf * dataB,
    TensileHalf alpha,
    TensileHalf beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1I,
    unsigned int strideA2K,
    unsigned int strideB1J,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;

  /* module function args */
  struct {
    // Size of Tensor's packed dims, in elements
    uint64_t tensor2dSizeC;
    uint64_t tensor2dSizeA;
    uint64_t tensor2dSizeB;
    TensileHalf * dataD;
    const TensileHalf * dataC;
    const TensileHalf * dataA;
    const TensileHalf * dataB;
    TensileHalf alpha[2];
    TensileHalf beta[2];
    unsigned int strideD1J;
    unsigned int strideD2K;
    unsigned int strideC1J;
    unsigned int strideC2K;
    unsigned int strideA1I;
    unsigned int strideA2K;
    unsigned int strideB1J;
    unsigned int strideB2K;
    unsigned int sizeI;
    unsigned int sizeJ;
    unsigned int sizeK;
    unsigned int sizeL;
    int staggerUIter;
    unsigned int problemNumGroupTiles0;
    unsigned int problemNumGroupTiles1;
    unsigned int magicNumberProblemNumGroupTiles0;
    unsigned int gridNumWorkGroups0;
    unsigned int numFullBlocks;
    unsigned int wgmRemainder1;
    unsigned int magicNumberWgmRemainder1;
    unsigned int pad;
  } hipFunctionArgs;
  size_t hipFunctionArgsSize = sizeof(hipFunctionArgs);
  void *hipLaunchParams[] = {HIP_LAUNCH_PARAM_BUFFER_POINTER, &hipFunctionArgs, HIP_LAUNCH_PARAM_BUFFER_SIZE, &hipFunctionArgsSize, HIP_LAUNCH_PARAM_END};
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4
  hipFunction_t hipFunction;
  status = solutionLock->getFunction(&hipFunction, deviceId, "Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW8_K1_LBSPP256_PLR33", nullptr);;
  if (status) return status;

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 32, 1 };
  const unsigned int groupSize[2] = { 2, 128 };
  size_t localWorkSize[3] = { 256, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 8; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 8;
  if (wgmRemainder1 == 0) wgmRemainder1 = 8;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA1I);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB1J);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/128/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*1)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;

  /* kernel 0: Cijk_Alik_Bljk_HBH_MT64x128x128_MI32x32x4x2_SE_1LDSB1_GRVW8_K1_LBSPP256_PLR33 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
  try {
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.dataD = dataD;
    hipFunctionArgs.dataC = dataC;
    hipFunctionArgs.dataA = dataA;
    hipFunctionArgs.dataB = dataB;
    hipFunctionArgs.alpha[0] = alpha;
    hipFunctionArgs.alpha[1] = alpha;
    hipFunctionArgs.beta[0] = beta;
    hipFunctionArgs.beta[1] = beta;
    hipFunctionArgs.strideD1J = strideD1J;
    hipFunctionArgs.strideD2K = strideD2K;
    hipFunctionArgs.strideC1J = strideC1J;
    hipFunctionArgs.strideC2K = strideC2K;
    hipFunctionArgs.strideA1I = strideA1I;
    hipFunctionArgs.strideA2K = strideA2K;
    hipFunctionArgs.strideB1J = strideB1J;
    hipFunctionArgs.strideB2K = strideB2K;
    hipFunctionArgs.sizeI = sizes[kernelIdx][enqueueIdx][0];
    hipFunctionArgs.sizeJ = sizes[kernelIdx][enqueueIdx][1];
    hipFunctionArgs.sizeK = sizes[kernelIdx][enqueueIdx][2];
    hipFunctionArgs.sizeL = sizes[kernelIdx][enqueueIdx][3];
    hipFunctionArgs.tensor2dSizeC = tensor2dSizeC;
    hipFunctionArgs.tensor2dSizeA = tensor2dSizeA;
    hipFunctionArgs.tensor2dSizeB = tensor2dSizeB;
    hipFunctionArgs.staggerUIter = staggerUIter;

    hipFunctionArgs.problemNumGroupTiles0 = problemNumGroupTiles0;
    hipFunctionArgs.problemNumGroupTiles1 = problemNumGroupTiles1;
    hipFunctionArgs.magicNumberProblemNumGroupTiles0 = magicNumberProblemNumGroupTiles0;
    hipFunctionArgs.gridNumWorkGroups0 = globalWorkSize[kernelIdx][0];
    hipFunctionArgs.numFullBlocks = numFullBlocks;
    hipFunctionArgs.wgmRemainder1 = wgmRemainder1;
    hipFunctionArgs.magicNumberWgmRemainder1 = magicNumberWgmRemainder1;
    kernelsLaunched++;
    hipExtModuleLaunchKernel(
      hipFunction,
      globalWorkSize[kernelIdx][0]*localWorkSize[0],
      globalWorkSize[kernelIdx][1]*localWorkSize[1],
      globalWorkSize[kernelIdx][2]*localWorkSize[2],
      localWorkSize[0],
      localWorkSize[1],
      localWorkSize[2],
      0, // groupMemBytes
      stream,
      NULL,
      (void**)hipLaunchParams
      ,(inputEvents && kernelsLaunched==1) ? inputEvents[enqueueIdx]:nullptr
      ,outputEvent ? outputEvent[enqueueIdx]:nullptr
      );
  } catch (const std::exception& e) {
#ifdef DEBUG
    std::cerr << e.what() << std::endl;
#endif
    return tensileStatusFailure;
  }
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Alik_Bljk_HBH
  1LDSBuffer: 1
  AggressivePerfMode: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 3
  AssertSizeEqual: {}
  AssertStrideAEqual: {0: 1}
  AssertStrideBEqual: {0: 1}
  AssertStrideCEqual: {0: 1}
  AssertStrideDEqual: {0: 1}
  AssertSummationElementMultiple: 1
  AssignedDerivedParameters: False
  AssignedProblemIndependentDerivedParameters: True
  BufferLoad: True
  BufferStore: True
  CheckDimOverflow: 0
  CheckTensorDimAsserts: False
  CodeObjectVersion: V3
  DepthU: 128
  DirectToLds: False
  DirectToLdsA: False
  DirectToLdsB: False
  DisableAtomicFail: 0
  DisableKernelPieces: 0
  DisableVgprOverlapping: False
  EdgeType: ShiftPtr
  EnableMatrixInstruction: True
  ExpandPointerSwap: 1
  FractionalLoad: 0
  GlobalLoadVectorWidthA: 8
  GlobalLoadVectorWidthB: 8
  GlobalRead2A: True
  GlobalRead2B: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadVectorWidth: 8
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  GlobalWriteVectorWidth: 2
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
  ISA: [9, 0, 8]
  InnerUnroll: 1
  InterleaveAlpha: 0
  KernelLanguage: Assembly
  LSCA: 128
  LSCB: 128
  LSPA: 4
  LSPB: 4
  LVCA: 16
  LVCB: 16
  LVPA: 1
  LVPB: 1
  LdcEqualsLdd: True
  LdsBlockSizePerPad: 256
  LdsBlockSizePerPadA: 256
  LdsBlockSizePerPadB: 256
  LdsNumElements: 26112
  LdsNumElementsAlignedA: 8704
  LdsNumElementsAlignedB: 17408
  LdsOffsetA: 0
  LdsOffsetA_Blk: 32768
  LdsOffsetB: 8704
  LdsOffsetB_Blk: 41472
  LdsPadA: 8
  LdsPadB: 8
  LocalDotLayout: 1
  LocalRead2A: True
  LocalRead2B: True
  LocalReadVectorWidth: 8
  LocalSplitU: 1
  LocalWrite2A: True
  LocalWrite2B: True
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  LoopDoWhile: False
  LoopIters: 32
  LoopTail: True
  LoopUnroll: 128
  MIBlock: [32, 32, 4, 2, 2, 1]
  MIOutputVectorWidth: 4
  MIWaveGroup: [1, 4]
  MIWaveTile: [1, 1]
  MacroTile0: 64
  MacroTile1: 128
  MacroTileA: 64
  MacroTileB: 128
  MacroTileShapeMax: 64
  MacroTileShapeMin: 1
  MagicDivAlg: 1
  MatrixInstB: 2
  MatrixInstBM: 2
  MatrixInstBN: 1
  MatrixInstK: 4
  MatrixInstM: 32
  MatrixInstN: 32
  MatrixInstruction: [32, 32, 4, 2]
  MaxOccupancy: 40
  MaxVgprNumber: 256
  MinVgprNumber: 0
  NonTemporalA: 0
  NonTemporalB: 0
  NonTemporalC: 0
  NumElementsPerThread: 32
  NumGlobalWriteVectorsPerThread: 16
  NumLoadsA: 4
  NumLoadsB: 8
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 1
  NumLoadsPerpendicularA: 4
  NumLoadsPerpendicularB: 8
  NumThreads: 256
  OptNoLoadLoop: 1
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  PackSummationDims: 0
  PackedC0IdxChars: ['I']
  PackedC0IndicesX: [0]
  PackedC1IdxChars: ['J']
  PackedC1IndicesX: [1]
  PerformanceSyncLocation: -1
  PerformanceWaitCount: -1
  PerformanceWaitLocation: -1
  PersistentKernel: 0
  PrefetchAcrossPersistent: 0
  PrefetchGlobalRead: 1
  PrefetchLocalRead: 33
  ProblemType: Cijk_Alik_Bljk_HBH
  ReplacementKernel: False
  ScheduleGlobalRead: 1
  ScheduleIterAlg: 3
  ScheduleLocalWrite: 1
  StaggerU: 32
  StaggerUMapping: 0
  StaggerUStride: 256
  StoreRemapVectorWidth: 4
  StoreVectorWidth: 4
  SubGroup0: 2
  SubGroup1: 128
  SubGroupA: 2
  SubGroupB: 128
  SuppressNoLoadLoop: 0
  ThreadTile: [1, 32]
  ThreadTile0: 32
  ThreadTile1: 1
  ThreadTileA: 32
  ThreadTileB: 1
  TransposeLDS: 1
  UnrollIncIsDepthU: 0
  UnrollMajorLDSA: True
  UnrollMajorLDSB: True
  UnrollMemFence: False
  Use64bShadowLimit: 1
  UseInstOffsetForGRO: 0
  UseSgprForGRO: -1
  Valid: True
  VectorAtomicWidth: 2
  VectorStore: -1
  VectorWidth: 2
  WaveSeparateGlobalReadA: 1
  WaveSeparateGlobalReadB: 1
  WorkGroup: [64, 4, 1]
  WorkGroupMapping: 8
  WorkGroupMappingType: B
  _UseSgprForGRO: 1
  _VectorStore: 1
  _staggerStrideShift: 0
*/

